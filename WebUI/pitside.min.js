Date.ext={};  
Date.ext.util={};  
Date.ext.util.xPad=function(c,a,b)
{
    if(typeof(b)=="undefined")
    {
        b=10
    }
    for(;  parseInt(c,10)<b&&b>1;  b/=10)
    {
        c=a.toString()+c
    }
    return c.toString()
};  
Date.prototype.locale="en-GB";  
if(document.getElementsByTagName("html")&&document.getElementsByTagName("html")[0].lang)
{
    Date.prototype.locale=document.getElementsByTagName("html")[0].lang
}
Date.ext.locales={};  
Date.ext.locales.en=
{
    a:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],
    A:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
    b:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
    B:["January","February","March","April","May","June","July","August","September","October","November","December"],
    c:"%a %d %b %Y %T %Z",
    p:["AM","PM"],
    P:["am","pm"],
    x:"%d/%m/%y",X:"%T"
};  
Date.ext.locales["en-US"]=Date.ext.locales.en;  Date.ext.locales["en-US"].c="%a %d %b %Y %r %Z";  
Date.ext.locales["en-US"].x="%D";  
Date.ext.locales["en-US"].X="%r";  
Date.ext.locales["en-GB"]=Date.ext.locales.en;  
Date.ext.locales["en-AU"]=Date.ext.locales["en-GB"];  
Date.ext.formats=
{
    a:function(a){return Date.ext.locales[a.locale].a[a.getDay()]},
    A:function(a){return Date.ext.locales[a.locale].A[a.getDay()]},
    b:function(a){return Date.ext.locales[a.locale].b[a.getMonth()]},
    B:function(a){return Date.ext.locales[a.locale].B[a.getMonth()]},
    c:"toLocaleString",
    C:function(a){return Date.ext.util.xPad(parseInt(a.getFullYear()/100,10),0)},
    d:["getDate","0"],
    e:["getDate"," "],
    g:function(a){return Date.ext.util.xPad(parseInt(Date.ext.util.G(a)/100,10),0)},
    G:function(a)
    {
        var e=a.getFullYear();  
        var b=parseInt(Date.ext.formats.V(a),10);  
        var c=parseInt(Date.ext.formats.W(a),10);  
        if(c>b)
        {
            e++
        }
        else
        {
            if(c===0&&b>=52)
            {
                e--
            }
        }
        return e
    },
    H:["getHours","0"],
    I:function(a)
    {
        var b=a.getHours()%12;  
        return Date.ext.util.xPad(b===0?12:b,0)
    },
    j:function(a)
    {
        var c=a-new Date(""+a.getFullYear()+"/1/1 GMT");  
        c+=a.getTimezoneOffset()*60000;  
        var b=parseInt(c/60000/60/24,10)+1;  
        return Date.ext.util.xPad(b,0,100)
    },
    m:function(a){return Date.ext.util.xPad(a.getMonth()+1,0)},
    M:["getMinutes","0"],
    p:function(a){return Date.ext.locales[a.locale].p[a.getHours()>=12?1:0]},
    P:function(a){return Date.ext.locales[a.locale].P[a.getHours()>=12?1:0]},
    S:["getSeconds","0"],
    u:function(a)
    {
        var b=a.getDay();  
        return b===0?7:b
    },
    U:function(a)
    {
        var b=parseInt(Date.ext.formats.j(a),10);  
        var c=6-a.getDay();  
        var e=parseInt((b+c)/7,10);  
        return Date.ext.util.xPad(e,0)
    },
    V:function(a)
    {
        var e=parseInt(Date.ext.formats.W(a),10);  
        var b=(new Date(""+a.getFullYear()+"/1/1")).getDay();  
        var c=e+(b>4||b<=1?0:1);  
        if(c==53&&(new Date(""+a.getFullYear()+"/12/31")).getDay()<4)
        {
            c=1
        }
        else
        {
            if(c===0)
            {
                c=Date.ext.formats.V(new Date(""+(a.getFullYear()-1)+"/12/31"))
            }
        }
        return Date.ext.util.xPad(c,0)
    },
    w:"getDay",
    W:function(a)
    {
        var b=parseInt(Date.ext.formats.j(a),10);  
        var c=7-Date.ext.formats.u(a);  
        var e=parseInt((b+c)/7,10);  
        return Date.ext.util.xPad(e,0,10)
    },
    y:function(a)
    {
        return Date.ext.util.xPad(a.getFullYear()%100,0)
    },
    Y:"getFullYear",
    z:function(a)
    {
        var e=a.getTimezoneOffset();  
        var b=Date.ext.util.xPad(parseInt(Math.abs(e/60),10),0);  
        var c=Date.ext.util.xPad(e%60,0);  
        return(e>0?"-":"+")+b+c
    },
    Z:function(a){return a.toString().replace(/^.*\(([^)]+)\)$/,"$1")},
    "%":function(a){return"%"}
};  

Date.ext.aggregates=
{
    c:"locale",
    D:"%m/%d/%y",
    h:"%b",
    n:"\n",
    r:"%I:%M:%S %p",
    R:"%H:%M",
    t:"\t",
    T:"%H:%M:%S",
    x:"locale",
    X:"locale"
};  
Date.ext.aggregates.z=Date.ext.formats.z(new Date());  
Date.ext.aggregates.Z=Date.ext.formats.Z(new Date());  
Date.ext.unsupported={};  
Date.prototype.strftime=function(b)
{
    if(!(this.locale in Date.ext.locales))
    {
        if(this.locale.replace(/-[a-zA-Z]+$/,"") in Date.ext.locales)
        {
            this.locale=this.locale.replace(/-[a-zA-Z]+$/,"")
        }
        else
        {
            this.locale="en-GB"
        }
    }
    var a=this;  
    while(b.match(/%[cDhnrRtTxXzZ]/))
    {
        b=b.replace(/%([cDhnrRtTxXzZ])/g,function(e,g) 
        {
            var d=Date.ext.aggregates[g];  
            return(d=="locale"?Date.ext.locales[a.locale][g]:d)
        } )
    }
    var c=b.replace(/%([aAbBCdegGHIjmMpPSuUVwWyY%])/g,function(e,g)
    {
        var d=Date.ext.formats[g];  



        if(typeof(d)=="string")
        {
            return a[d]()
        }
        else
        {
            if(typeof(d)=="function")
            {
                return d.call(a,a)
            }
            else
            {
                if(typeof(d)=="object"&&typeof(d[0])=="string")
                {
                    return Date.ext.util.xPad(a[d[0]](),d[1])
                }
                else
                {
                    return g
                }
            }
        }
    } );  
    a=null;  
    return c
};  

"use strict";  
function RGBColor(d)
{
    this.ok=false;  
    if(d.charAt(0)=="#")
    {
        d=d.substr(1,6)
    }
    d=d.replace(/ /g,"");  
    d=d.toLowerCase();  
    var j=
    {
        aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"
    };  
    for(var f in j)
    {
        if(d==f)
        {
            d=j[f]
        }
    }
    var c=[
    {
        re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/, example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(i)
        {
            return[parseInt(i[1]),parseInt(i[2]),parseInt(i[3])]
        }
    },
    {
        re:/^(\w{2})(\w{2})(\w{2})$/,example:["#00ff00","336699"],process:function(i)
        {
            return[parseInt(i[1],16),parseInt(i[2],16),parseInt(i[3],16)]
        }
    },
    {
        re:/^(\w{1})(\w{1})(\w{1})$/,example:["#fb0","f0f"],process:function(i)
        {
            return[parseInt(i[1]+i[1],16),parseInt(i[2]+i[2],16),parseInt(i[3]+i[3],16)]
        }
    }];  
    for(var e=0;  e<c.length;  e++)
    {
        var h=c[e].re;  
        var g=c[e].process;  
        var a=h.exec(d);  
        if(a)
        {
            var b=g(a);  
            this.r=b[0];  
            this.g=b[1];  
            this.b=b[2];  
            this.ok=true
        }
    }
    this.r=(this.r<0||isNaN(this.r))?0:((this.r>255)?255:this.r);  
    this.g=(this.g<0||isNaN(this.g))?0:((this.g>255)?255:this.g);  
    this.b=(this.b<0||isNaN(this.b))?0:((this.b>255)?255:this.b);  
    this.toRGB=function()
    {
        return"rgb("+this.r+", "+this.g+", "+this.b+")"
    };  
    this.toHex=function()
    {
        var l=this.r.toString(16);  
        var k=this.g.toString(16);  
        var i=this.b.toString(16);  
        if(l.length==1)
        {
            l="0"+l
        }
        if(k.length==1)
        {
            k="0"+k
        }
        if(i.length==1)
        {
            i="0"+i
        }
        return"#"+l+k+i
    }
};  

function printStackTrace(c)
{
    c=c||{guess:true};  
    var a=c.e||null,b=!!c.guess;  
    var d=new printStackTrace.implementation(),e=d.run(a);  
    return(b)?d.guessAnonymousFunctions(e):e
}
printStackTrace.implementation=function()
{};  
printStackTrace.implementation.prototype=
{
    run:function(a,b)
    {
        a=a||this.createException();  
        b=b||this.mode(a);  
        if(b==="other")
        {
            return this.other(arguments.callee)
        }
        else
        {
            return this[b](a)
        }
    },
    createException:function()
    {
        try
        {
            this.undef()
        }
        catch(a)
        {
            return a
        }
    },
    mode:function(a)
    {
        if(a["arguments"]&&a.stack)
        {
            return"chrome"
        }
        else
        {
            if(typeof a.message==="string"&&typeof window!=="undefined"&&window.opera)
            {
                if(!a.stacktrace)
                {
                    return"opera9"
                }
                if(a.message.indexOf("\n")>-1&&a.message.split("\n").length>a.stacktrace.split("\n").length)
                {
                    return"opera9"
                }
                if(!a.stack)
                {
                    return"opera10a"
                }
                if(a.stacktrace.indexOf("called from line")<0)
                {
                    return"opera10b"
                }
                return"opera11"
            }
            else
            {
                if(a.stack)
                {
                    return"firefox"
                }
            }
        }
        return"other"
    },
    instrumentFunction:function(b,c,a)
    {
        b=b||window;  
        var e=b[c];  
        b[c]=function d()
        {
            a.call(this,printStackTrace().slice(4));  
            return b[c]._instrumented.apply(this,arguments)
        };  
        b[c]._instrumented=e
    },
    deinstrumentFunction:function(a,b)
    {
        if(a[b].constructor===Function&&a[b]._instrumented&&a[b]._instrumented.constructor===Function)
        {
            a[b]=a[b]._instrumented
        }
    },
    chrome:function(a)
    {
        var b=(a.stack+"\n").replace(/^\S[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^([^\(]+?)([\n$])/gm,"{anonymous}()@$1$2").replace(/^Object.<anonymous>\s*\(([^\)]+)\)/gm,"{anonymous}()@$1").split("\n");  
        b.pop();  
        return b
    },
    firefox:function(a)
    {
        return a.stack.replace(/(?:\n@:0)?\s+$/m,"").replace(/^\(/gm,"{anonymous}(").split("\n")
    },
    opera11:function(b)
    {
        var a="{anonymous}",g=/^.*line (\d+), column (\d+)(?: in (.+))? in (\S+):$/;  
        var h=b.stacktrace.split("\n"),l=[];  
        for(var d=0,f=h.length;  d<f;  d+=2)
        {
            var k=g.exec(h[d]);  
            if(k)
            {
                var j=k[4]+":"+k[1]+":"+k[2];  
                var c=k[3]||"global code";  
                c=c.replace(/<anonymous function: (\S+)>/,"$1").replace(/<anonymous function>/,a);  
                l.push(c+"@"+j+" -- "+h[d+1].replace(/^\s+/,""))
            }
        }
        return l
    },
    opera10b:function(b)
    {
        var a="{anonymous}",g=/^(.*)@(.+):(\d+)$/;  
        var h=b.stacktrace.split("\n"),k=[];  
        for(var d=0,f=h.length;  
        d<f;  
        d++)
        {
            var j=g.exec(h[d]);  
            if(j)
            {
                var c=j[1]?(j[1]+"()"):"global code";  
                k.push(c+"@"+j[2]+":"+j[3])
            }
        }
        return k
    },
    opera10a:function(b)
    {
        var a="{anonymous}",g=/Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;  
        var h=b.stacktrace.split("\n"),k=[];  
        for(var d=0,f=h.length;  d<f;  d+=2)
        {
            var j=g.exec(h[d]);  
            if(j)
            {
                var c=j[3]||a;  
                k.push(c+"()@"+j[2]+":"+j[1]+" -- "+h[d+1].replace(/^\s+/,""))
            }
        }
        return k
    },
    opera9:function(b)
    {
        var a="{anonymous}",f=/Line (\d+).*script (?:in )?(\S+)/i;  
        var g=b.message.split("\n"),j=[];  
        for(var c=2,d=g.length;  c<d;  c+=2)
        {
            var h=f.exec(g[c]);  
            if(h)
            {
                j.push(a+"()@"+h[2]+":"+h[1]+" -- "+g[c+1].replace(/^\s+/,""))
            }
        }
        return j
    },
    other:function(c)
    {
        var a="{anonymous}",e=/function\s*([\w\-$]+)?\s*\(/i,g=[],d,b,f=10;  
        while(c&&g.length<f)
        {
            d=e.test(c.toString())?RegExp.$1||a:a;  
            b=Array.prototype.slice.call(c["arguments"]||[]);  
            g[g.length]=d+"("+this.stringifyArguments(b)+")";  
            c=c.caller
        }
        return g
    },
    stringifyArguments:function(b)
    {
        var d=[];  
        var e=Array.prototype.slice;  
        for(var c=0;  c<b.length;  ++c)
        {
            var a=b[c];  
            if(a===undefined)
            {
                d[c]="undefined"
            }
            else
            {
                if(a===null)
                {
                    d[c]="null"
                }
                else
                {
                    if(a.constructor)
                    {
                        if(a.constructor===Array)
                        {
                            if(a.length<3)
                            {
                                d[c]="["+this.stringifyArguments(a)+"]"
                            }
                            else
                            {
                                d[c]="["+this.stringifyArguments(e.call(a,0,1))+"..."+this.stringifyArguments(e.call(a,-1))+"]"
                            }
                        }
                        else
                        {
                            if(a.constructor===Object)
                            {
                                d[c]="#object"
                            }
                            else
                            {
                                if(a.constructor===Function)
                                {
                                    d[c]="#function"
                                }
                                else
                                {
                                    if(a.constructor===String)
                                    {
                                        d[c]='"'+a+'"'
                                    }
                                    else
                                    {
                                        if(a.constructor===Number)
                                        {
                                            d[c]=a
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return d.join(",")
    },
    sourceCache:{},ajax:function(c)
    {
        var b=this.createXMLHTTPObject();  
        if(b)
        {
            try
            {
                b.open("GET",c,false);  
                b.send(null);  
                return b.responseText
            }
            catch(a){}
        }
        return""
    },
    createXMLHTTPObject:function()
    {
        var c,d=[function()
        {
            return new XMLHttpRequest()
        },
        function()
        {
            return new ActiveXObject("Msxml2.XMLHTTP")
        },
        function()
        {
            return new ActiveXObject("Msxml3.XMLHTTP")
        },
        function()
        {
            return new ActiveXObject("Microsoft.XMLHTTP")
        }];  
        for(var b=0;  b<d.length;  b++)
        {
            try
            {
                c=d[b]();  this.createXMLHTTPObject=d[b];  
                return c
            }
            catch(a){}
        }
    },
    isSameDomain:function(a)
    {
        return a.indexOf(location.hostname)!==-1
    },
    getSource:function(a)
    {
        if(!(a in this.sourceCache))
        {
            this.sourceCache[a]=this.ajax(a).split("\n")
        }
        return this.sourceCache[a]
    },
    guessAnonymousFunctions:function(l)
    {
        for(var e=0;  e<l.length;  ++e)
        {
            var k=/\{anonymous\}\(.*\)@(.*)/,j=/^(.*?)(?::(\d+))(?::(\d+))?(?: -- .+)?$/,c=l[e],h=k.exec(c);  
            if(h)
            {
                var g=j.exec(h[1]),b=g[1],f=g[2],a=g[3]||0;  
                if(b&&this.isSameDomain(b)&&f)
                {
                    var d=this.guessAnonymousFunction(b,f,a);  
                    l[e]=c.replace("{anonymous}",d)
                }
            }
        }
        return l
    },
    guessAnonymousFunction:function(f,c,a)
    {var d;  
        try
        {
            d=this.findFunctionName(this.getSource(f),c)
        }
        catch(b)
        {
            d="getSource failed with url: "+f+", exception: "+b.toString()
        }
        return d
    },
    findFunctionName:function(l,e)
    {
        var h=/function\s+([^(]*?)\s*\(([^)]*)\)/;  
        var k=/['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*function\b/;  
        var j=/['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*(?:eval|new Function)\b/;  
        var a="",d,g=Math.min(e,20),f,b;  
        for(var c=0;  c<g;  ++c)
        {
            d=l[e-c-1];  
            b=d.indexOf("//");  
            if(b>=0)
            {
                d=d.substr(0,b)
            }
            if(d)
            {
                a=d+a;  
                f=k.exec(a);  
                if(f&&f[1])
                {
                    return f[1]
                }
                f=h.exec(a);  
                if(f&&f[1])
                {
                    return f[1]
                }
                f=j.exec(a);  
                if(f&&f[1])
                {
                    return f[1]
                }
            }
        }
        return"(?)"
    }
};  




"use strict";  
var DygraphLayout=function(a)
{
    this.dygraph_=a;  
    this.datasets=[];  
    this.setNames=[];  
    this.annotations=[];  
    this.yAxes_=null;  
    this.xTicks_=null;  
    this.yTicks_=null
};  

DygraphLayout.prototype.attr_=function(a){return this.dygraph_.attr_(a)};  
DygraphLayout.prototype.addDataset=function(b,a){this.datasets.push(a);  this.setNames.push(b)};  
DygraphLayout.prototype.getPlotArea=function(){return this.computePlotArea_()};  
DygraphLayout.prototype.computePlotArea_=function()
{
    var a={x:0,y:0};  
    if(this.attr_("drawYAxis"))
    {
        a.x=this.attr_("yAxisLabelWidth")+2*this.attr_("axisTickSize")
    }
    a.w=this.dygraph_.width_-a.x-this.attr_("rightGap");  
    a.h=this.dygraph_.height_;  
    if(this.attr_("drawXAxis"))
    {
        if(this.attr_("xAxisHeight"))
        {
            a.h-=this.attr_("xAxisHeight")
        }
        else
        {
            a.h-=this.attr_("axisLabelFontSize")+2*this.attr_("axisTickSize")
        }
    }
    if(this.dygraph_.numAxes()==2)
    {
        a.w-=(this.attr_("yAxisLabelWidth")+2*this.attr_("axisTickSize"))
    }
    else
    {
        if(this.dygraph_.numAxes()>2)
        {
            this.dygraph_.error("Only two y-axes are supported at this time. (Trying to use "+this.dygraph_.numAxes()+")")
        }
    }
    if(this.attr_("title"))
    {
        a.h-=this.attr_("titleHeight");  
        a.y+=this.attr_("titleHeight")
    }
    if(this.attr_("xlabel"))
    {
        a.h-=this.attr_("xLabelHeight")
    }
    if(this.attr_("ylabel"))
    {}
    if(this.attr_("y2label")){}
    if(this.attr_("showRangeSelector"))
    {
        a.h-=this.attr_("rangeSelectorHeight")+4
    }
    return a
};  

DygraphLayout.prototype.setAnnotations=function(c)
{
    this.annotations=[];  
    var e=this.attr_("xValueParser")||function(a){return a};  
    for(var d=0;  d<c.length;  d++)
    {
        var b={};  
        if(!c[d].xval&&!c[d].x)
        {
            this.dygraph_.error("Annotations must have an 'x' property");  
            return
        }
        if(c[d].icon&&!(c[d].hasOwnProperty("width")&&c[d].hasOwnProperty("height")))
        {
            this.dygraph_.error("Must set width and height when setting annotation.icon property"); 
            return
        }
        Dygraph.update(b,c[d]);  
        if(!b.xval)
        {
            b.xval=e(b.x)
        }
        this.annotations.push(b)
    }
};  

DygraphLayout.prototype.setXTicks=function(a){this.xTicks_=a};  
DygraphLayout.prototype.setYAxes=function(a){this.yAxes_=a};  
DygraphLayout.prototype.setDateWindow=function(a){this.dateWindow_=a};  

DygraphLayout.prototype.evaluate=function()
{
    this._evaluateLimits();  
    this._evaluateLineCharts();  
    this._evaluateLineTicks();  
    this._evaluateAnnotations()
};  

DygraphLayout.prototype._evaluateLimits=function()
{
    this.minxval=this.maxxval=null;  
    if(this.dateWindow_)
    {
        this.minxval=this.dateWindow_[0];  
        this.maxxval=this.dateWindow_[1]
    }
    else
    {
        for(var d=0;  d<this.datasets.length;  ++d)
        {
            var c=this.datasets[d];  
            if(c.length>1)
            {
                var e=c[0][0];  
                if(!this.minxval||e<this.minxval)
                {
                    this.minxval=e
                }
                var f=c[c.length-1][0];  
                if(!this.maxxval||f>this.maxxval)
                {
                    this.maxxval=f
                }
            }
        }
    }
    this.xrange=this.maxxval-this.minxval;  
    this.xscale=(this.xrange!==0?1/this.xrange:1);  
    for(var b=0;  b<this.yAxes_.length;  b++)
    {
        var a=this.yAxes_[b];  
        a.minyval=a.computedValueRange[0];  
        a.maxyval=a.computedValueRange[1];  
        a.yrange=a.maxyval-a.minyval;  
        a.yscale=(a.yrange!==0?1/a.yrange:1);  
        if(a.g.attr_("logscale"))
        {
            a.ylogrange=Dygraph.log10(a.maxyval)-Dygraph.log10(a.minyval);  
            a.ylogscale=(a.ylogrange!==0?1/a.ylogrange:1);  
            if(!isFinite(a.ylogrange)||isNaN(a.ylogrange))
            {
                a.g.error("axis "+b+" of graph at "+a.g+" can't be displayed in log scale for range ["+a.minyval+" - "+a.maxyval+"]")
            }
        }
    }
};  

DygraphLayout._calcYNormal=function(a,b)
{
    if(a.logscale)
    {
        return 1-((Dygraph.log10(b)-Dygraph.log10(a.minyval))*a.ylogscale)
    }
    else
    {
        return 1-((b-a.minyval)*a.yscale)
    }
};  

DygraphLayout.prototype._evaluateLineCharts=function()
{
    this.setPointsLengths=[];  
    this.setPointsOffsets=[];  var b=this.attr_("connectSeparatedPoints");  
    var d=0;  
    var g;  
    var k=0;  
    for(g=0;  g<this.datasets.length;  ++g)
    {
        k+=this.datasets[g].length
    }
    this.points=new Array(k);  
    for(g=0;  g<this.datasets.length;  ++g)
    {
        this.setPointsOffsets.push(d);  
        var c=this.datasets[g];  
        var h=this.setNames[g];  
        var a=this.dygraph_.axisPropertiesForSeries(h);  
        for(var f=0;  f<c.length;  f++)
        {
            var e=c[f];  
            var m=DygraphLayout.parseFloat_(e[0]);  
            var o=DygraphLayout.parseFloat_(e[1]);  
            var l=(m-this.minxval)*this.xscale;  
            var n=DygraphLayout._calcYNormal(a,o);  
            if(b&&e[1]===null)
            {
                o=null
            }
            this.points[d]={x:l,y:n,xval:m,yval:o,name:h};  
            d++
        }
        this.setPointsLengths.push(d-this.setPointsOffsets[g])
    }
};  

DygraphLayout.parseFloat_=function(a)
{
    if(a===null)
    {
        return NaN
    }
    return a
};  

DygraphLayout.prototype._evaluateLineTicks=function()
{
    var b,f,d,e;  this.xticks=[];  
    for(b=0;  b<this.xTicks_.length;  b++)
    {
        f=this.xTicks_[b];  
        d=f.label;  
        e=this.xscale*(f.v-this.minxval);  
        if((e>=0)&&(e<=1))
        {
            this.xticks.push([e,d])
        }
    }
    this.yticks=[];  
    for(b=0;  b<this.yAxes_.length;  b++)
    {
        var a=this.yAxes_[b];  
        for(var c=0;  c<a.ticks.length;  c++)
        {
            f=a.ticks[c];  
            d=f.label;  
            e=this.dygraph_.toPercentYCoord(f.v,b);  
            if((e>=0)&&(e<=1))
            {
                this.yticks.push([b,e,d])
            }
        }
    }
};  

DygraphLayout.prototype.evaluateWithError=function()
{
    this.evaluate();  
    if(!(this.attr_("errorBars")||this.attr_("customBars")))
    {
        return
    }
    var e=0;  
    for(var h=0;  h<this.datasets.length;  ++h)
    {
        var g=0;  
        var b=this.datasets[h];  
        var k=this.setNames[h];  
        var a=this.dygraph_.axisPropertiesForSeries(k);  
        for(g=0;  g<b.length;  g++,e++)
        {
            var f=b[g];  
            var l=DygraphLayout.parseFloat_(f[0]);  
            var m=DygraphLayout.parseFloat_(f[1]);  
            if(l==this.points[e].xval&&m==this.points[e].yval)
            {
                var c=DygraphLayout.parseFloat_(f[2]);  
                var d=DygraphLayout.parseFloat_(f[3]);  
                var n=m-c;  var o=m+d;  this.points[e].y_top=DygraphLayout._calcYNormal(a,n);  
                this.points[e].y_bottom=DygraphLayout._calcYNormal(a,o)
            }
        }
    }
};  

DygraphLayout.prototype._evaluateAnnotations=function()
{
    var d;  
    var c={};  
    for(d=0;  d<this.annotations.length;  d++)
    {
        var b=this.annotations[d];  
        c[b.xval+","+b.series]=b
    }
    this.annotated_points=[];  
    if(!this.annotations||!this.annotations.length)
    {
        return
    }
    for(d=0;  d<this.points.length;  d++)
    {
        var f=this.points[d];  
        var e=f.xval+","+f.name;  
        if(e in c)
        {
            f.annotation=c[e];  
            this.annotated_points.push(f)
        }
    }
};  

DygraphLayout.prototype.removeAllDatasets=function()
{
    delete this.datasets;  
    delete this.setNames;  
    delete this.setPointsLengths;  
    delete this.setPointsOffsets;  
    this.datasets=[];  
    this.setNames=[];  
    this.setPointsLengths=[];  
    this.setPointsOffsets=[]
};  

DygraphLayout.prototype.unstackPointAtIndex=function(b)
{
    var c=this.points[b];  
    if(!c.yval){return c}var e={};  
    for(var d in c)
    {
        e[d]=c[d]
    }
    if(!this.attr_("stackedGraph"))
    {
        return e
    }
    for(var a=b+1;  a<this.points.length;  a++)
    {
        if((this.points[a].xval==c.xval)&&this.points[a].yval)
        {
            e.yval-=this.points[a].yval;  
            break
        }
    }
    return e
};  

"use strict";  
var DygraphCanvasRenderer=function(b,c,d,e)
{
    this.dygraph_=b;  
    this.layout=e;  
    this.element=c;  
    this.elementContext=d;  
    this.container=this.element.parentNode;  
    this.height=this.element.height;  
    this.width=this.element.width;  
    if(!this.isIE&&!(DygraphCanvasRenderer.isSupported(this.element)))
    {
        throw"Canvas is not supported."
    }
    this.xlabels=[];  
    this.ylabels=[];  
    this.annotations=[];  
    this.chartLabels={};  
    this.area=e.getPlotArea();  
    this.container.style.position="relative";  
    this.container.style.width=this.width+"px";  
    if(this.dygraph_.isUsingExcanvas_)
    {
        this._createIEClipArea()
    }
    else
    {
        if(!Dygraph.isAndroid())
        {
            var a=this.dygraph_.canvas_ctx_;  
            a.beginPath();  
            a.rect(this.area.x,this.area.y,this.area.w,this.area.h);  
            a.clip();  
            a=this.dygraph_.hidden_ctx_;  
            a.beginPath();  
            a.rect(this.area.x,this.area.y,this.area.w,this.area.h);  
            a.clip()
        }
    }
};  

DygraphCanvasRenderer.prototype.attr_=function(a)
{
    return this.dygraph_.attr_(a)
};  

DygraphCanvasRenderer.prototype.clear=function()
{
    var a;  
    if(this.isIE)
    {
        try
        {
            if(this.clearDelay)
            {
                this.clearDelay.cancel();  
                this.clearDelay=null
            }
            a=this.elementContext
        }
        catch(b)
        {
            return
        }
    }
    a=this.elementContext;  
    a.clearRect(0,0,this.width,this.height);  
    function f(e)
    {
        for(var h=0;  h<e.length;  h++)
        {
            var g=e[h];  
            if(g.parentNode)
            {
                g.parentNode.removeChild(g)
            }
        }
    }
    f(this.xlabels);  
    f(this.ylabels);  
    f(this.annotations);  
    for(var d in this.chartLabels)
    {
        if(!this.chartLabels.hasOwnProperty(d))
        {
            continue
        }
        var c=this.chartLabels[d];  
        if(c.parentNode)
        {
            c.parentNode.removeChild(c)
        }
    }
    this.xlabels=[];  
    this.ylabels=[];  
    this.annotations=[];  
    this.chartLabels={}
};  

DygraphCanvasRenderer.isSupported=function(b)
{
    var a=null;  
    try
    {
        if(typeof(b)=="undefined"||b===null)
        {
            a=document.createElement("canvas")
        }
        else
        {
            a=b
        }
        a.getContext("2d")
    }
    catch(c)
    {
        var d=navigator.appVersion.match(/MSIE (\d\.\d)/);  
        var f=(navigator.userAgent.toLowerCase().indexOf("opera")!=-1);  
        if((!d)||(d[1]<6)||(f))
        {
            return false
        }
        return true
    }
    return true
};  

DygraphCanvasRenderer.prototype.setColors=function(a)
{
    this.colorScheme_=a
};  

DygraphCanvasRenderer.prototype.render=function()
{
    var a=this.elementContext;  
    function c(h)
    {
        return Math.round(h)+0.5
    }
    function b(h)
    {
        return Math.round(h)-0.5
    }
    if(this.attr_("underlayCallback"))
    {
        this.attr_("underlayCallback")(a,this.area,this.dygraph_,this.dygraph_)
    }
    var f,g,d,e;  
    if(this.attr_("drawYGrid"))
    {
        e=this.layout.yticks;  
        a.save();  
        a.strokeStyle=this.attr_("gridLineColor");  
        a.lineWidth=this.attr_("gridLineWidth");  
        for(d=0;  d<e.length;  d++)
        {
            if(e[d][0]!==0)
            {
                continue
            }
            f=c(this.area.x);  
            g=b(this.area.y+e[d][1]*this.area.h);  
            a.beginPath();  
            a.moveTo(f,g);  
            a.lineTo(f+this.area.w,g);  
            a.closePath();  
            a.stroke()
        }
        a.restore()
    }
    if(this.attr_("drawXGrid"))
    {
        e=this.layout.xticks;  
        a.save();  
        a.strokeStyle=this.attr_("gridLineColor");  
        a.lineWidth=this.attr_("gridLineWidth");  
        for(d=0;  d<e.length;  d++)
        {
            f=c(this.area.x+e[d][0]*this.area.w);  
            g=b(this.area.y+this.area.h);  
            a.beginPath();  
            a.moveTo(f,g);  
            a.lineTo(f,this.area.y);  
            a.closePath();  
            a.stroke()
        }
        a.restore()
    }
    this._renderLineChart();  
    this._renderAxis();  
    this._renderChartLabels();  
    this._renderAnnotations()
};  

DygraphCanvasRenderer.prototype._createIEClipArea=function()
{
    var c="dygraph-clip-div";  
    var f=this.dygraph_.graphDiv;  
    for(var g=f.childNodes.length-1;  g>=0;  g--)
    {
        if(f.childNodes[g].className==c)
        {
            f.removeChild(f.childNodes[g])
        }
    }
    var a=document.bgColor;  
    var e=this.dygraph_.graphDiv;  
    while(e!=document)
    {
        var b=e.currentStyle.backgroundColor;  
        if(b&&b!="transparent")
        {
            a=b;  
            break
        }
        e=e.parentNode
    }
    function d(i)
    {
        if(i.w===0||i.h===0)
        {
            return
        }
        var j=document.createElement("div");  
        j.className=c;  
        j.style.backgroundColor=a;  
        j.style.position="absolute";  
        j.style.left=i.x+"px";  
        j.style.top=i.y+"px";  
        j.style.width=i.w+"px";  
        j.style.height=i.h+"px";  
        f.appendChild(j)
    }
    var h=this.area;  
    d( {x:0,y:0,w:h.x,h:this.height} );  
    d({x:h.x,y:0,w:this.width-h.x,h:h.y});  
    d({x:h.x+h.w,y:0,w:this.width-h.x-h.w,h:this.height});  
    d({x:h.x,y:h.y+h.h,w:this.width-h.x,h:this.height-h.h-h.y})
};  

DygraphCanvasRenderer.prototype._renderAxis=function()
{
    if(!this.attr_("drawXAxis")&&!this.attr_("drawYAxis"))
    {
        return
    }
    function h(i)
    {
        return Math.round(i)+0.5
    }
    function g(i)
    {
        return Math.round(i)-0.5
    }
    var e=this.elementContext;  
    var k,v,w,t,j;  
    var l={position:"absolute",fontSize:this.attr_("axisLabelFontSize")+"px",zIndex:10,color:this.attr_("axisLabelColor"),width:this.attr_("axisLabelWidth")+"px",lineHeight:"normal",overflow:"hidden"};  
    var n=function(A,i,z){var r=document.createElement("div");  
    for(var y in l)
    {
        if(l.hasOwnProperty(y))
        {
            r.style[y]=l[y]
        }
    }
    var x=document.createElement("div");  
    x.className="dygraph-axis-label dygraph-axis-label-"+i+(z?" dygraph-axis-label-"+z:"");  
    x.innerHTML=A;  
    r.appendChild(x);  
    return r};  
    e.save();  
    e.strokeStyle=this.attr_("axisLineColor");  
    e.lineWidth=this.attr_("axisLineWidth");  
    if(this.attr_("drawYAxis"))
    {
        if(this.layout.yticks&&this.layout.yticks.length>0)
        {
            var o=this.dygraph_.numAxes();  
            for(j=0;  j<this.layout.yticks.length;  j++)
            {
                t=this.layout.yticks[j];  
                if(typeof(t)=="function")
                {
                    return
                }
                v=this.area.x;  
                var s=1;  
                var p="y1";  
                if(t[0]==1)
                {
                    v=this.area.x+this.area.w;  
                    s=-1;  
                    p="y2"
                }
                w=this.area.y+t[1]*this.area.h;  
                k=n(t[2],"y",o==2?p:null);  
                var u=(w-this.attr_("axisLabelFontSize")/2);  
                if(u<0)
                {
                    u=0
                }
                if(u+this.attr_("axisLabelFontSize")+3>this.height)
                {
                    k.style.bottom="0px"
                }
                else
                {
                    k.style.top=u+"px"
                }
                if(t[0]===0)
                {
                    k.style.left=(this.area.x-this.attr_("yAxisLabelWidth")-this.attr_("axisTickSize"))+"px";  
                    k.style.textAlign="right"
                }
                else
                {
                    if(t[0]==1)
                    {
                        k.style.left=(this.area.x+this.area.w+this.attr_("axisTickSize"))+"px";  
                        k.style.textAlign="left"
                    }
                }
                k.style.width=this.attr_("yAxisLabelWidth")+"px";  
                this.container.appendChild(k);  
                this.ylabels.push(k)
            }
            var d=this.ylabels[0];  
            var f=this.attr_("axisLabelFontSize");  
            var c=parseInt(d.style.top,10)+f;  
            if(c>this.height-f)
            {
                d.style.top=(parseInt(d.style.top,10)-f/2)+"px"
            }
        }
        var a;  
        if(this.attr_("drawAxesAtZero"))
        {
            var q=this.dygraph_.toPercentXCoord(0);  
            if(q>1||q<0)
            {
                q=0
            }
            a=h(this.area.x+q*this.area.w)
        }
        else
        {
            a=h(this.area.x)
        }
        e.beginPath();  
        e.moveTo(a,g(this.area.y));  
        e.lineTo(a,g(this.area.y+this.area.h));  
        e.closePath();  
        e.stroke();  
        if(this.dygraph_.numAxes()==2)
        {
            e.beginPath();  
            e.moveTo(g(this.area.x+this.area.w),g(this.area.y));  
            e.lineTo(g(this.area.x+this.area.w),g(this.area.y+this.area.h));  
            e.closePath();  
            e.stroke()
        }
    }
    if(this.attr_("drawXAxis"))
    {
        if(this.layout.xticks)
        {
            for(j=0;  j<this.layout.xticks.length;  j++)
            {
                t=this.layout.xticks[j];  
                v=this.area.x+t[0]*this.area.w;  
                w=this.area.y+this.area.h;  
                k=n(t[1],"x");  
                k.style.textAlign="center";  
                k.style.top=(w+this.attr_("axisTickSize"))+"px";  
                var m=(v-this.attr_("axisLabelWidth")/2);  
                if(m+this.attr_("axisLabelWidth")>this.width)
                {
                    m=this.width-this.attr_("xAxisLabelWidth");  
                    k.style.textAlign="right"
                }
                if(m<0)
                {
                    m=0;  
                    k.style.textAlign="left"
                }
                k.style.left=m+"px";  
                k.style.width=this.attr_("xAxisLabelWidth")+"px";  
                this.container.appendChild(k);  
                this.xlabels.push(k)
            }
        }
        e.beginPath();  
        var b;  
        if(this.attr_("drawAxesAtZero"))
        {
            var q=this.dygraph_.toPercentYCoord(0,0);  
            if(q>1||q<0)
            {
                q=1
            }
            b=g(this.area.y+q*this.area.h)
        }
        else
        {
            b=g(this.area.y+this.area.h)
        }
        e.moveTo(h(this.area.x),b);  
        e.lineTo(h(this.area.x+this.area.w),b);  
        e.closePath();  
        e.stroke()
    }
    e.restore()
};  
    
DygraphCanvasRenderer.prototype._renderChartLabels=function()
{
    var c,a;  
    if(this.attr_("title"))
    {
        c=document.createElement("div");  
        c.style.position="absolute";  
        c.style.top="0px";  
        c.style.left=this.area.x+"px";  
        c.style.width=this.area.w+"px";  
        c.style.height=this.attr_("titleHeight")+"px";  
        c.style.textAlign="center";  
        c.style.fontSize=(this.attr_("titleHeight")-8)+"px";  
        c.style.fontWeight="bold";  
        a=document.createElement("div");  
        a.className="dygraph-label dygraph-title";  
        a.innerHTML=this.attr_("title");  
        c.appendChild(a);  
        this.container.appendChild(c);  
        this.chartLabels.title=c
    }
    if(this.attr_("xlabel"))
    {
        c=document.createElement("div");  
        c.style.position="absolute";  
        c.style.bottom=0;  
        c.style.left=this.area.x+"px";  
        c.style.width=this.area.w+"px";  
        c.style.height=this.attr_("xLabelHeight")+"px";  
        c.style.textAlign="center";  
        c.style.fontSize=(this.attr_("xLabelHeight")-2)+"px";  
        a=document.createElement("div");  
        a.className="dygraph-label dygraph-xlabel";  
        a.innerHTML=this.attr_("xlabel");  
        c.appendChild(a);  
        this.container.appendChild(c);  
        this.chartLabels.xlabel=c
    }
    var d=this;  
    function b(e,g,h)
    {
        var f=
        {
            left:0,top:d.area.y,width:d.attr_("yLabelWidth"),height:d.area.h
        };  
        c=document.createElement("div");  
        c.style.position="absolute";  
        if(e==1)
        {
            c.style.left=f.left
        }
        else
        {
            c.style.right=f.left
        }
        c.style.top=f.top+"px";  
        c.style.width=f.width+"px";  
        c.style.height=f.height+"px";  
        c.style.fontSize=(d.attr_("yLabelWidth")-2)+"px";  
        var i=document.createElement("div");  
        i.style.position="absolute";  
        i.style.width=f.height+"px";  
        i.style.height=f.width+"px";  
        i.style.top=(f.height/2-f.width/2)+"px";  
        i.style.left=(f.width/2-f.height/2)+"px";  
        i.style.textAlign="center";  
        var j="rotate("+(e==1?"-":"")+"90deg)";  
        i.style.transform=j;  
        i.style.WebkitTransform=j;  
        i.style.MozTransform=j;  
        i.style.OTransform=j;  
        i.style.msTransform=j;  
        if(typeof(document.documentMode)!=="undefined"&&document.documentMode<9)
        {
            i.style.filter="progid:DXImageTransform.Microsoft.BasicImage(rotation="+(e==1?"3":"1")+")";  
            i.style.left="0px";  
            i.style.top="0px"
        }
        a=document.createElement("div");  
        a.className=g;  
        a.innerHTML=h;  
        i.appendChild(a);  
        c.appendChild(i);  
        return c
    }
    var c;  
    if(this.attr_("ylabel"))
    {
        c=b(1,"dygraph-label dygraph-ylabel",this.attr_("ylabel"));  
        this.container.appendChild(c);  
        this.chartLabels.ylabel=c
    }
    if(this.attr_("y2label")&&this.dygraph_.numAxes()==2)
    {
        c=b(2,"dygraph-label dygraph-y2label",this.attr_("y2label"));  
        this.container.appendChild(c);  
        this.chartLabels.y2label=c
    }
};  

DygraphCanvasRenderer.prototype._renderAnnotations=function()
{
    var c={position:"absolute",fontSize:this.attr_("axisLabelFontSize")+"px",zIndex:10,overflow:"hidden"};  
    var d=function(i,a,q,r)
    {
        return function(s)
        {
            var p=q.annotation;  
            if(p.hasOwnProperty(i))
            {
                p[i](p,q,r.dygraph_,s)
            }
            else
            {
                if(r.dygraph_.attr_(a))
                {
                    r.dygraph_.attr_(a)(p,q,r.dygraph_,s)
                }
            }
        }
    };  
    var m=this.layout.annotated_points;  
    for(var h=0;  h<m.length;  h++)
    {
        var l=m[h];  
        if(l.canvasx<this.area.x||l.canvasx>this.area.x+this.area.w||l.canvasy<this.area.y||l.canvasy>this.area.y+this.area.h)
        {
            continue
        }
        var b=l.annotation;  
        var n=6;  
        if(b.hasOwnProperty("tickHeight"))
        {
            n=b.tickHeight
        }
        var f=document.createElement("div");  
        for(var k in c)
        {
            if(c.hasOwnProperty(k))
            {
                f.style[k]=c[k]
            }
        }
        if(!b.hasOwnProperty("icon"))
        {
            f.className="dygraphDefaultAnnotation"
        }
        if(b.hasOwnProperty("cssClass"))
        {
            f.className+=" "+b.cssClass
        }
        var o=b.hasOwnProperty("width")?b.width:16;  
        var g=b.hasOwnProperty("height")?b.height:16;  
        if(b.hasOwnProperty("icon"))
        {
            var j=document.createElement("img");  
            j.src=b.icon;  
            j.width=o;  
            j.height=g;  
            f.appendChild(j)
        }
        else
        {
            if(l.annotation.hasOwnProperty("shortText"))
            {
                f.appendChild(document.createTextNode(l.annotation.shortText))
            }
        }
        f.style.left=(l.canvasx-o/2)+"px";  
        if(b.attachAtBottom)
        {
            f.style.top=(this.area.h-g-n)+"px"
        }
        else
        {
            f.style.top=(l.canvasy-g-n)+"px"
        }
        f.style.width=o+"px";  
        f.style.height=g+"px";  
        f.title=l.annotation.text;  
        f.style.color=this.colors[l.name];  
        f.style.borderColor=this.colors[l.name];  
        b.div=f;  
        this.dygraph_.addEvent(f,"click",d("clickHandler","annotationClickHandler",l,this));  
        this.dygraph_.addEvent(f,"mouseover",d("mouseOverHandler","annotationMouseOverHandler",l,this));  
        this.dygraph_.addEvent(f,"mouseout",d("mouseOutHandler","annotationMouseOutHandler",l,this));  
        this.dygraph_.addEvent(f,"dblclick",d("dblClickHandler","annotationDblClickHandler",l,this));  
        this.container.appendChild(f);  
        this.annotations.push(f);  
        var e=this.elementContext;  
        e.strokeStyle=this.colors[l.name];  
        e.beginPath();  
        if(!b.attachAtBottom)
        {
            e.moveTo(l.canvasx,l.canvasy);  
            e.lineTo(l.canvasx,l.canvasy-2-n)
        }
        else
        {
            e.moveTo(l.canvasx,this.area.h);  
            e.lineTo(l.canvasx,this.area.h-2-n)
        }
        e.closePath();  
        e.stroke()
    }
};  

DygraphCanvasRenderer._getIteratorPredicate=function(a)
{
    return a?DygraphCanvasRenderer._predicateThatSkipsEmptyPoints:null
};  

DygraphCanvasRenderer._predicateThatSkipsEmptyPoints=function(a,b)
{
    return a[b].yval!==null
};  

DygraphCanvasRenderer.prototype._drawStyledLine=function(b,g,n,a,r,q,e,d,k)
{
    var o=this.attr_("stepPlot");  
    var f=this.layout.setPointsOffsets[g];  
    var m=this.layout.setPointsLengths[g];  
    var j=this.layout.points;  
    if(!Dygraph.isArrayLike(q))
    {
        q=null
    }
    var c=this.dygraph_.attr_("drawGapEdgePoints",n);  
    b.save();  
    var h=Dygraph.createIterator(j,f,m,DygraphCanvasRenderer._getIteratorPredicate(this.attr_("connectSeparatedPoints")));  
    var l;  
    var p;  
    if(!q||q.length<=1)
    {
        p=trivialStrategy(b,a,r)
    }
    else
    {
        p=nonTrivialStrategy(this,b,a,r,q)
    }
    l=this._drawSeries(b,h,r,k,e,c,o,p);  
    this._drawPointsOnLine(b,l,d,n,a,k);  
    b.restore()
};  

var nonTrivialStrategy=function(c,b,a,e,d)
{
    return new function()
    {
        this.init=function() {};  
        this.finish=function(){};  
        this.startSegment=function()
        {
            b.beginPath();  
            b.strokeStyle=a;  
            b.lineWidth=e
        };  
        this.endSegment=function()
        {
            b.stroke()
        };  
        this.drawLine=function(f,h,g,i)
        {c._dashedLine(b,f,h,g,i,d)};  
        this.skipPixel=function(h,i,f,g)
        {
            return(Math.round(h)==Math.round(f)&&Math.round(i)==Math.round(g))
        }
    }
};  

var trivialStrategy=function(b,a,c)
{
    return new function()
    {
        this.init=function()
        {
            b.beginPath();  
            b.strokeStyle=a;  
            b.lineWidth=c
        };  
        this.finish=function() {b.stroke()};  
        this.startSegment=function(){};  
        this.endSegment=function(){};  
        this.drawLine=function(d,f,e,g)
        {
            b.moveTo(d,f);  b.lineTo(e,g)
        };  
        this.skipPixel=function(){return false}
    }
};  

DygraphCanvasRenderer.prototype._drawPointsOnLine=function(c,g,d,h,b,f)
{
    for(var e=0;  e<g.length;  e++)
    {
        var a=g[e];  
        c.save();  
        d(this.dygraph_,h,c,a[0],a[1],b,f);  
        c.restore()
    }
};  

DygraphCanvasRenderer.prototype._drawSeries=function(a,g,p,j,c,b,n,o)
{
    var l=null;  
    var m=null;  
    var h=null;  
    var e;  
    var i;  
    var k=[];  
    var d=true;  
    o.init();  
    while(g.hasNext)
    {
        i=g.next();  
        if(i.canvasy===null||i.canvasy!=i.canvasy)
        {
            if(n&&l!==null)
            {
                o.startSegment();  
                o.drawLine(prevX,prevY,i.canvasx,prevY);  
                o.endSegment()
            }
            l=m=null
        }
        else
        {
            h=g.hasNext?g.peek.canvasy:null;  
            var f=h===null||h!=h;  
            e=(!l&&f);  
            if(b)
            {
                if((!d&&!l)||(g.hasNext&&f))
                {
                    e=true
                }
            }
            if(l!==null)
            {
                if(o.skipPixel(l,m,i.canvasx,i.canvasy))
                {
                    continue
                }
                if(p)
                {
                    o.startSegment();  
                    if(n)
                    {
                        o.drawLine(l,m,i.canvasx,m);  
                        l=i.canvasx
                    }
                    o.drawLine(l,m,i.canvasx,i.canvasy);  
                    o.endSegment()
                }
            }
            if(c||e)
            {
                k.push([i.canvasx,i.canvasy])
            }
            l=i.canvasx;  
            m=i.canvasy
        }
        d=false
    }
    o.finish();  
    return k
};  

DygraphCanvasRenderer.prototype._drawLine=function(b,d)
{
    var f=this.layout.setNames;  
    var e=f[d];  
    var g=this.dygraph_.attr_("strokeWidth",e);  
    var a=this.dygraph_.attr_("strokeBorderWidth",e);  
    var c=this.dygraph_.attr_("drawPointCallback",e)||Dygraph.Circles.DEFAULT;  
    if(a&&g)
    {
        this._drawStyledLine(b,d,e,this.dygraph_.attr_("strokeBorderColor",e),g+2*a,this.dygraph_.attr_("strokePattern",e),this.dygraph_.attr_("drawPoints",e),c,this.dygraph_.attr_("pointSize",e))
    }
    this._drawStyledLine(b,d,e,this.colors[e],g,this.dygraph_.attr_("strokePattern",e),this.dygraph_.attr_("drawPoints",e),c,this.dygraph_.attr_("pointSize",e))
};  

DygraphCanvasRenderer.prototype._renderLineChart=function()
{
    var e=this.elementContext;  
    var j=this.attr_("fillAlpha");  
    var h=this.attr_("errorBars")||this.attr_("customBars");  
    var k=this.attr_("fillGraph");  
    var B=this.attr_("stackedGraph");  
    var C=this.attr_("stepPlot");  
    var r=this.layout.points;  
    var s=r.length;  
    var q,m,t,u,v,d,z,p,g,w,D,a;  
    var A=this.layout.setNames;  
    var x=A.length;  
    this.colors={};  
    for(m=0;  m<x;  m++)
    {
        this.colors[A[m]]=this.colorScheme_[m%this.colorScheme_.length]
    }
    for(m=s;  m--;  )
    {
        q=r[m];  
        q.canvasx=this.area.w*q.x+this.area.x;  
        q.canvasy=this.area.h*q.y+this.area.y
    }
    if(h)
    {
        e.save();  
        if(k)
        {
            this.dygraph_.warn("Can't use fillGraph option with error bars")
        }
        for(m=0;  m<x;  m++)
        {
            z=A[m];  
            a=this.dygraph_.axisPropertiesForSeries(z);  
            d=this.colors[z];  
            var l=this.layout.setPointsOffsets[m];  
            var y=this.layout.setPointsLengths[m];  
            var n=Dygraph.createIterator(r,l,y,DygraphCanvasRenderer._getIteratorPredicate(this.attr_("connectSeparatedPoints")));  
            t=NaN;  
            u=NaN;  
            v=[-1,-1];  
            D=a.yscale;  
            w=new RGBColor(d);  
            g="rgba("+w.r+","+w.g+","+w.b+","+j+")";  
            e.fillStyle=g;  
            e.beginPath();  
            while(n.hasNext)
            {
                q=n.next();  
                if(q.name==z)
                {
                    if(!Dygraph.isOK(q.y))
                    {
                        t=NaN;  
                        continue
                    }
                    if(C)
                    {
                        p=[q.y_bottom,q.y_top];  
                        u=q.y
                    }
                    else
                    {
                        p=[q.y_bottom,q.y_top]
                    }
                    p[0]=this.area.h*p[0]+this.area.y;  
                    p[1]=this.area.h*p[1]+this.area.y;  
                    if(!isNaN(t))
                    {
                        if(C)
                        {
                            e.moveTo(t,p[0])
                        }
                        else
                        {
                            e.moveTo(t,v[0])
                        }
                        e.lineTo(q.canvasx,p[0]);  
                        e.lineTo(q.canvasx,p[1]);  
                        if(C)
                        {
                            e.lineTo(t,p[1])
                        }
                        else
                        {
                            e.lineTo(t,v[1])
                        }
                        e.closePath()
                    }
                    v=p;  t=q.canvasx
                }
            }
            e.fill()
        }
        e.restore()
    }
    else
    {
        if(k)
        {
            e.save();  
            var c={};  
            var f;  
            for(m=x-1;  m>=0;  m--)
            {
                z=A[m];  
                d=this.colors[z];  
                a=this.dygraph_.axisPropertiesForSeries(z);  
                var b=1+a.minyval*a.yscale;  
                if(b<0)
                {
                    b=0
                }
                else
                {
                    if(b>1)
                    {
                        b=1
                    }
                }
                b=this.area.h*b+this.area.y;  
                var l=this.layout.setPointsOffsets[m];  
                var y=this.layout.setPointsLengths[m];  
                var n=Dygraph.createIterator(r,l,y,DygraphCanvasRenderer._getIteratorPredicate(this.attr_("connectSeparatedPoints")));  
                t=NaN;  
                v=[-1,-1];  
                D=a.yscale;  
                w=new RGBColor(d);  
                g="rgba("+w.r+","+w.g+","+w.b+","+j+")";  
                e.fillStyle=g;  
                e.beginPath();  
                while(n.hasNext)
                {
                    q=n.next();  
                    if(q.name==z)
                    {
                        if(!Dygraph.isOK(q.y))
                        {
                            t=NaN;  
                            continue
                        }
                        if(B)
                        {
                            f=c[q.canvasx];  
                            var o;  
                            if(f===undefined)
                            {
                                o=b
                            }
                            else
                            {
                                if(C)
                                {
                                    o=f[0]
                                }
                                else
                                {
                                    o=f
                                }
                            }
                            p=[q.canvasy,o];  
                            if(C)
                            {
                                if(v[0]===-1)
                                {
                                    c[q.canvasx]=[q.canvasy,b]
                                }
                                else
                                {
                                    c[q.canvasx]=[q.canvasy,v[0]]
                                }
                            }
                            else
                            {
                                c[q.canvasx]=q.canvasy
                            }
                        }
                        else
                        {
                            p=[q.canvasy,b]
                        }
                        if(!isNaN(t))
                        {
                            e.moveTo(t,v[0]);  
                            if(C)
                            {
                                e.lineTo(q.canvasx,v[0]);  
                                if(f)
                                {
                                    e.lineTo(q.canvasx,f[1])
                                }
                                else
                                {
                                    e.lineTo(q.canvasx,p[1])
                                }
                            }
                            else
                            {
                                e.lineTo(q.canvasx,p[0]);  
                                e.lineTo(q.canvasx,p[1])
                            }
                            e.lineTo(t,v[1]);  
                            e.closePath()
                        }
                        v=p;  
                        t=q.canvasx
                    }
                }
                e.fill()
            }
            e.restore()
        }
    }
    for(m=0;  m<x;  m+=1)
    {
        this._drawLine(e,m)
    }
};  

DygraphCanvasRenderer.prototype._dashedLine=function(a,i,k,j,l,e)
{
    var b,c,d,g,f,h;  
    if(!e||e.length<=1)
    {
        a.moveTo(i,k);  
        a.lineTo(j,l);  
        return
    }
    if(!Dygraph.compareArrays(e,this._dashedLineToHistoryPattern))
    {
        this._dashedLineToHistoryPattern=e;  
        this._dashedLineToHistory=[0,0]
    }
    a.save();  
    b=(j-i);  
    c=(l-k);  
    d=Math.sqrt(b*b+c*c);  
    g=Math.atan2(c,b);  
    a.translate(i,k);  
    a.moveTo(0,0);  
    a.rotate(g);  
    f=this._dashedLineToHistory[0];  
    i=0;  
    while(d>i)
    {
        h=e[f];  
        if(this._dashedLineToHistory[1])
        {
            i+=this._dashedLineToHistory[1]
        }
        else
        {
            i+=h
        }
        if(i>d)
        {
            this._dashedLineToHistory=[f,i-d];  
            i=d
        }
        else
        {
            this._dashedLineToHistory=[(f+1)%e.length,0]
        }
        if(f%2===0)
        {
            a.lineTo(i,0)
        }
        else
        {
            a.moveTo(i,0)
        }
        f=(f+1)%e.length
    }
    a.restore()
};  
    
"use strict";  
var Dygraph=function(b,a,d,c)
{
    if(c!==undefined)
    {
        this.warn("Using deprecated four-argument dygraph constructor");  
        this.__old_init__(b,a,d,c)
    }
    else
    {
        this.__init__(b,a,d)
    }
};  

Dygraph.NAME="Dygraph";  
Dygraph.VERSION="1.2";  

Dygraph.__repr__=function()
{
    return"["+this.NAME+" "+this.VERSION+"]"
};  

Dygraph.toString=function()
{
    return this.__repr__()
};  

Dygraph.DEFAULT_ROLL_PERIOD=1;  
Dygraph.DEFAULT_WIDTH=480;  
Dygraph.DEFAULT_HEIGHT=320;  
Dygraph.ANIMATION_STEPS=10;  
Dygraph.ANIMATION_DURATION=200;  

Dygraph.numberValueFormatter=function(h,d,e,b)
{
    var f=d("sigFigs");  
    if(f!==null)
    {
        return Dygraph.floatFormat(h,f)
    }
    var a=d("digitsAfterDecimal");  
    var c=d("maxNumberWidth");  
    if(h!==0&&(Math.abs(h)>=Math.pow(10,c)||Math.abs(h)<Math.pow(10,-a)))
    {
        return h.toExponential(a)
    }
    else
    {
        return""+Dygraph.round_(h,a)
    }
};  

Dygraph.numberAxisLabelFormatter=function(d,b,c,a)
{
    return Dygraph.numberValueFormatter(d,c,a)
};  

Dygraph.dateString_=function(b)
{
    var i=Dygraph.zeropad;  
    var a=new Date(b);  
    var h=""+a.getFullYear();  
    var f=i(a.getMonth()+1);  
    var c=i(a.getDate());  
    var g="";  
    var e=a.getHours()*3600+a.getMinutes()*60+a.getSeconds();  
    if(e)
    {
        g=" "+Dygraph.hmsString_(b)
    }
    return h+"/"+f+"/"+c+g
};  

Dygraph.dateAxisFormatter=function(a,c)
{
    if(c>=Dygraph.DECADAL)
    {
        return a.strftime("%Y")
    }
    else
    {
        if(c>=Dygraph.MONTHLY)
        {
            return a.strftime("%b %y")
        }
        else
        {
            var b=a.getHours()*3600+a.getMinutes()*60+a.getSeconds()+a.getMilliseconds();  
            if(b===0||c>=Dygraph.DAILY)
            {
                return new Date(a.getTime()+3600*1000).strftime("%d%b")
            }
            else
            {
                return Dygraph.hmsString_(a.getTime())
            }
        }
    }
};  

Dygraph.DEFAULT_ATTRS=
{
    highlightCircleSize:3,
    highlightSeriesOpts:null,
    highlightOnHover:true,
    highlightSeriesBackgroundAlpha:0.5,
    labelsDivWidth:250,
    labelsDivStyles:{},
    labelsSeparateLines:false,
    labelsShowZeroValues:true,
    labelsKMB:false,
    labelsKMG2:false,
    showLabelsOnHighlight:true,
    digitsAfterDecimal:2,
    maxNumberWidth:6,
    sigFigs:null,
    strokeWidth:1,
    strokeBorderWidth:0,
    strokeBorderColor:"white",
    axisTickSize:3,
    axisLabelFontSize:14,
    xAxisLabelWidth:50,
    yAxisLabelWidth:50,
    rightGap:5,
    showRoller:false,
    xValueParser:Dygraph.dateParser,
    delimiter:",",
    sigma:2,
    errorBars:false,
    fractions:false,
    wilsonInterval:true,
    customBars:false,
    fillGraph:false,
    fillAlpha:0.15,
    connectSeparatedPoints:false,
    stackedGraph:false,
    hideOverlayOnMouseOut:true,
    legend:"onmouseover",
    stepPlot:false,
    avoidMinZero:false,
    drawAxesAtZero:false,
    titleHeight:28,
    xLabelHeight:18,
    yLabelWidth:18,
    drawXAxis:true,
    drawYAxis:true,
    axisLineColor:"black",
    axisLineWidth:0.3,
    gridLineWidth:0.3,
    axisLabelColor:"black",
    axisLabelFont:"Arial",
    axisLabelWidth:50,
    drawYGrid:true,
    drawXGrid:true,
    gridLineColor:"rgb(128,128,128)",
    interactionModel:null,
    animatedZooms:false,
    showRangeSelector:false,
    rangeSelectorHeight:40,
    rangeSelectorPlotStrokeColor:"#808FAB",
    rangeSelectorPlotFillColor:"#A7B1C4",
    axes:
    {
        x:
        {
            pixelsPerLabel:60,
            axisLabelFormatter:Dygraph.dateAxisFormatter,
            valueFormatter:Dygraph.dateString_,
            ticker:null
        },
        y:
        {
            pixelsPerLabel:30,
            valueFormatter:Dygraph.numberValueFormatter,
            axisLabelFormatter:Dygraph.numberAxisLabelFormatter,
            ticker:null
        },
        y2:
        {
            pixelsPerLabel:30,
            valueFormatter:Dygraph.numberValueFormatter,
            axisLabelFormatter:Dygraph.numberAxisLabelFormatter,
            ticker:null
        }
    }
};  

Dygraph.HORIZONTAL=1;  
Dygraph.VERTICAL=2;  
Dygraph.PLUGINS=[];  
Dygraph.addedAnnotationCSS=false;  
Dygraph.prototype.__old_init__=function(b,c,e,a)
{
    if(e!==null)
    {
        var f=["Date"];  
        for(var d=0;  d<e.length;  d++)
        {
            f.push(e[d])
        }
        Dygraph.update(a,{labels:f})
    }
    this.__init__(b,c,a)
};  

Dygraph.prototype.__init__=function(c,e,a)
{
    if(/MSIE/.test(navigator.userAgent)&&!window.opera&&typeof(G_vmlCanvasManager)!="undefined"&&document.readyState!="complete")
    {
        var n=this;  
        setTimeout(function() {n.__init__(c,e,a)},100);  
        return
    }
    if(a===null||a===undefined)
    {
        a={}
    }
    a=Dygraph.mapLegacyOptions_(a);  
    if(!c)
    {
        Dygraph.error("Constructing dygraph with a non-existent div!");  
        return
    }
    this.isUsingExcanvas_=typeof(G_vmlCanvasManager)!="undefined";  
    this.maindiv_=c;  
    this.file_=e;  
    this.rollPeriod_=a.rollPeriod||Dygraph.DEFAULT_ROLL_PERIOD;  
    this.previousVerticalX_=-1;  
    this.fractions_=a.fractions||false;  
    this.dateWindow_=a.dateWindow||null;  
    this.is_initial_draw_=true;  
    this.annotations_=[];  
    this.zoomed_x_=false;  
    this.zoomed_y_=false;  
    c.innerHTML="";  
    if(c.style.width===""&&a.width)
    {
        c.style.width=a.width+"px"
    }
    if(c.style.height===""&&a.height)
    {
        c.style.height=a.height+"px"
    }
    if(c.style.height===""&&c.clientHeight===0)
    {
        c.style.height=Dygraph.DEFAULT_HEIGHT+"px";  
        if(c.style.width==="")
        {
            c.style.width=Dygraph.DEFAULT_WIDTH+"px"
        }
    }
    this.width_=c.clientWidth;  
    this.height_=c.clientHeight;  
    if(a.stackedGraph)
    {
        a.fillGraph=true
    }
    this.user_attrs_={};  
    Dygraph.update(this.user_attrs_,a);  
    this.attrs_={};  
    Dygraph.updateDeep(this.attrs_,Dygraph.DEFAULT_ATTRS);  
    this.boundaryIds_=[];  
    this.setIndexByName_={};  
    this.datasetIndex_=[];  
    this.registeredEvents_=[];  
    this.createInterface_();  
    this.plugins_=[];  
    for(var g=0;  g<Dygraph.PLUGINS.length;  g++)
    {
        var j=Dygraph.PLUGINS[g];  
        var m=new j();  
        var l=
        {
            plugin:m,events:{},options:{},pluginOptions:{}
        };  
        var f=m.activate(this);  
        for(var d in f)
        {
            l.events[d]=f[d]
        }
        this.plugins_.push(l)
    }
    this.eventListeners_={};  
    for(var g=0;  g<this.plugins_.length;  g++)
    {
        var k=this.plugins_[g];  
        for(var d in k.events)
        {
            if(!k.events.hasOwnProperty(d))
            {
                continue
            }
            var b=k.events[d];  
            var h=[k.plugin,b];  
            if(!(d in this.eventListeners_))
            {
                this.eventListeners_[d]=[h]
            }
            else
            {
                this.eventListeners_[d].push(h)
            }
        }
    }
    this.start_()
};  

Dygraph.prototype.cascadeEvents_=function(g,d)
{
    if(!g in this.eventListeners_)
    {
        return true
    }
    var c= 
    {
        dygraph:this,cancelable:false,defaultPrevented:false,preventDefault:function() 
        {
            if(!c.cancelable)
            {
                throw"Cannot call preventDefault on non-cancelable event."
            }
            c.defaultPrevented=true
        },
        propagationStopped:false,stopPropagation:function()
        {
            c.propagationStopped=true
        }
    };  
    Dygraph.update(c,d);  
    var b=this.eventListeners_[g];  
    if(b)
    {
        for(var f=b.length-1;  
        f>=0;  
        f--)
        {
            var h=b[f][0];  
            var a=b[f][1];  
            a.call(h,c);  
            if(c.propagationStopped)
            {
                break
            }
        }
    }
    return c.defaultPrevented
};  

Dygraph.prototype.isZoomed=function(a)
{
    if(a==null)
    {
        return this.zoomed_x_||this.zoomed_y_
    }
    if(a==="x")
    {
        return this.zoomed_x_
    }
    if(a==="y")
    {
        return this.zoomed_y_
    }
    throw"axis parameter is ["+a+"] must be null, 'x' or 'y'."
};  

Dygraph.prototype.toString=function()
{
    var b=this.maindiv_;  
    var a=(b&&b.id)?b.id:b;  
    return"[Dygraph "+a+"]"
};  

Dygraph.prototype.attr_=function(b,d)
{
    var f=[];  
    f.push(this.attrs_);  
    if(this.user_attrs_)
    {
        f.push(this.user_attrs_);  
        if(d)
        {
            if(this.user_attrs_.hasOwnProperty(d))
            {
                f.push(this.user_attrs_[d])
            }
            if(d===this.highlightSet_&&this.user_attrs_.hasOwnProperty("highlightSeriesOpts"))
            {
                f.push(this.user_attrs_.highlightSeriesOpts)
            }
        }
    }
    var c=null;  
    for(var a=f.length-1;  a>=0;  --a)
    {
        var e=f[a];  
        if(e.hasOwnProperty(b))
        {
            c=e[b];  
            break
        }
    }
    return c
};  

Dygraph.prototype.getOption=function(a,b)
{
    return this.attr_(a,b)
};  

Dygraph.prototype.optionsViewForAxis_=function(a)
{
    var b=this;  
    return function(d)
    {
        var c=b.user_attrs_.axes;  
        if(c&&c[a]&&c[a][d])
        {
            return c[a][d]
        }
        if(typeof(b.user_attrs_[d])!="undefined")
        {
            return b.user_attrs_[d]
        }
        c=b.attrs_.axes;  
        if(c&&c[a]&&c[a][d])
        {
            return c[a][d]
        }
        if(a=="y"&&b.axes_[0].hasOwnProperty(d))
        {
            return b.axes_[0][d]
        }
        else
        {
            if(a=="y2"&&b.axes_[1].hasOwnProperty(d))
            {
                return b.axes_[1][d]
            }
        }
        return b.attr_(d)
    }
};  
    
Dygraph.prototype.rollPeriod=function()
{
    return this.rollPeriod_
};  
Dygraph.prototype.xAxisRange=function()
{
    return this.dateWindow_?this.dateWindow_:this.xAxisExtremes()
};  

Dygraph.prototype.xAxisExtremes=function()
{
    var a=this.rawData_[0][0];  
    var b=this.rawData_[this.rawData_.length-1][0];  
    return[a,b]
};  

Dygraph.prototype.yAxisRange=function(b)
{
    if(typeof(b)=="undefined")
    {
        b=0
    }
    if(b<0||b>=this.axes_.length)
    {
        return null
    }
    var a=this.axes_[b];  
    return[a.computedValueRange[0],a.computedValueRange[1]]
};  
    
Dygraph.prototype.yAxisRanges=function()
{
    var b=[];  
    for(var a=0;  
    a<this.axes_.length;  a++)
    {
        b.push(this.yAxisRange(a))
    }
    return b
};  

Dygraph.prototype.toDomCoords=function(b,c,a)
{
    return[this.toDomXCoord(b),this.toDomYCoord(c,a)]
};  

Dygraph.prototype.toDomXCoord=function(b)
{
    if(b===null)
    {
        return null
    }
    var a=this.plotter_.area;  var c=this.xAxisRange();  
    return a.x+(b-c[0])/(c[1]-c[0])*a.w
};  

Dygraph.prototype.toDomYCoord=function(d,b)
{
    var c=this.toPercentYCoord(d,b);  
    if(c===null)
    {
        return null
    }
    var a=this.plotter_.area;  
    return a.y+c*a.h
};  

Dygraph.prototype.toDataCoords=function(b,c,a)
{
    return[this.toDataXCoord(b),this.toDataYCoord(c,a)]
};  
Dygraph.prototype.toDataXCoord=function(b)
{
    if(b===null)
    {
        return null
    }
    var a=this.plotter_.area;  
    var c=this.xAxisRange();  
    return c[0]+(b-a.x)/a.w*(c[1]-c[0])
};  

Dygraph.prototype.toDataYCoord=function(g,b)
{
    if(g===null)
    {
        return null
    }
    var a=this.plotter_.area;  
    var h=this.yAxisRange(b);  
    if(typeof(b)=="undefined")
    {
        b=0
    }
    if(!this.axes_[b].logscale)
    {
        return h[0]+(a.y+a.h-g)/a.h*(h[1]-h[0])
    }
    else
    {
        var e=(g-a.y)/a.h;  
        var d=Dygraph.log10(h[1]);  
        var c=d-(e*(d-Dygraph.log10(h[0])));  
        var f=Math.pow(Dygraph.LOG_SCALE,c);  
        return f
    }
};  


Dygraph.prototype.toPercentYCoord=function(d,a)
{
    if(d===null)
    {
        return null
    }
    if(typeof(a)=="undefined")
    {
        a=0
    }
    var e=this.yAxisRange(a);  
    var c;  
    if(!this.axes_[a].logscale)
    {
        c=(e[1]-d)/(e[1]-e[0])
    }
    else
    {
        var b=Dygraph.log10(e[1]);  
        c=(b-Dygraph.log10(d))/(b-Dygraph.log10(e[0]))
    }
    return c
};  

Dygraph.prototype.toPercentXCoord=function(a)
{
    if(a===null)
    {
        return null
    }
    var b=this.xAxisRange();  
    return(a-b[0])/(b[1]-b[0])
};  

Dygraph.prototype.numColumns=function()
{
    return this.rawData_[0]?this.rawData_[0].length:this.attr_("labels").length
};  

Dygraph.prototype.numRows=function()
{
    return this.rawData_.length
};  

Dygraph.prototype.fullXRange_=function()
{
    if(this.numRows()>0)
    {
        return[this.rawData_[0][0],this.rawData_[this.numRows()-1][0]]
    }
    else
    {
        return[0,1]
    }
};  

Dygraph.prototype.getValue=function(b,a)
{
    if(b<0||b>this.rawData_.length)
    {
        return null
    }
    if(a<0||a>this.rawData_[b].length)
    {
        return null
    }
    return this.rawData_[b][a]
};  

Dygraph.prototype.createInterface_=function()
{
    var b=this.maindiv_;  
    this.graphDiv=document.createElement("div");  
    this.graphDiv.style.width=this.width_+"px";  
    this.graphDiv.style.height=this.height_+"px";  
    b.appendChild(this.graphDiv);  
    this.canvas_=Dygraph.createCanvas();  
    this.canvas_.style.position="absolute";  
    this.canvas_.width=this.width_;  
    this.canvas_.height=this.height_;  
    this.canvas_.style.width=this.width_+"px";  
    this.canvas_.style.height=this.height_+"px";  
    this.canvas_ctx_=Dygraph.getContext(this.canvas_);  
    this.hidden_=this.createPlotKitCanvas_(this.canvas_);  
    this.hidden_ctx_=Dygraph.getContext(this.hidden_);  
    if(this.attr_("showRangeSelector"))
    {
        this.rangeSelector_=new DygraphRangeSelector(this)
    }
    this.graphDiv.appendChild(this.hidden_);  
    this.graphDiv.appendChild(this.canvas_);  
    this.mouseEventElement_=this.createMouseEventElement_();  
    this.layout_=new DygraphLayout(this);  
    if(this.rangeSelector_)
    {
        this.rangeSelector_.addToGraph(this.graphDiv,this.layout_)
    }
    var a=this;  
    this.mouseMoveHandler=function(c)
    {
        a.mouseMove_(c)
    };  
    this.addEvent(this.mouseEventElement_,"mousemove",this.mouseMoveHandler);  
    this.mouseOutHandler=function(c)
    {
        a.mouseOut_(c)
    };  
    this.addEvent(this.mouseEventElement_,"mouseout",this.mouseOutHandler);  
    this.createDragInterface_();  
    this.resizeHandler=function(c)
    {
        a.resize()
    };  
    this.addEvent(window,"resize",this.resizeHandler)
};  

Dygraph.prototype.destroy=function()
{
    var d=function(e)
    {
        while(e.hasChildNodes())
        {
            d(e.firstChild);  
            e.removeChild(e.firstChild)
        }
    };  
    for(var a=0;  a<this.registeredEvents_.length;  a++)
    {
        var c=this.registeredEvents_[a];  
        Dygraph.removeEvent(c.elem,c.type,c.fn)
    }
    this.registeredEvents_=[];  
    Dygraph.removeEvent(this.mouseEventElement_,"mouseout",this.mouseOutHandler);  
    Dygraph.removeEvent(this.mouseEventElement_,"mousemove",this.mouseMoveHandler);  
    Dygraph.removeEvent(this.mouseEventElement_,"mousemove",this.mouseUpHandler_);  
    d(this.maindiv_);  
    var b=function(f)
    {
        for(var e in f)
        {
            if(typeof(f[e])==="object")
            {
                f[e]=null
            }
        }
    };  
    Dygraph.removeEvent(window,"resize",this.resizeHandler);  
    this.resizeHandler=null;  
    b(this.layout_);  
    b(this.plotter_);  
    b(this)
};  

Dygraph.prototype.createPlotKitCanvas_=function(a)
{
    var b=Dygraph.createCanvas();  
    b.style.position="absolute";  
    b.style.top=a.style.top;  
    b.style.left=a.style.left;  
    b.width=this.width_;  
    b.height=this.height_;  
    b.style.width=this.width_+"px";  
    b.style.height=this.height_+"px";  
    return b
};  

Dygraph.prototype.createMouseEventElement_=function()
{
    if(this.isUsingExcanvas_)
    {
        var a=document.createElement("div"); 
        a.style.position="absolute"; 
        a.style.backgroundColor="white"; 
        a.style.filter="alpha(opacity=0)"; 
        a.style.width=this.width_+"px"; 
        a.style.height=this.height_+"px"; 
        this.graphDiv.appendChild(a); 
        return a
    }
    else
    {
        return this.canvas_
    }
}; 

Dygraph.prototype.setColors_=function()
{
    var g=this.attr_("labels").length-1; 
    this.colors_=[]; 
    var a=this.attr_("colors"); 
    var e; 
    if(!a)
    {
        var h=this.attr_("colorSaturation")||1; 
        var j=this.attr_("colorValue")||0.5; 
        var c=Math.ceil(g/2); 
        for(e=1; e<=g; e++)
        {
            if(!this.visibility()[e-1])
            {
                continue
            }
            var f=e%2?Math.ceil(e/2):(c+e/2); 
            var d=(1*f/(1+g)); 
            this.colors_.push(Dygraph.hsvToRGB(d,h,j))
        }
    }
    else
    {
        for(e=0; e<g; e++)
        {
            if(!this.visibility()[e])
            {
                continue
            }
            var b=a[e%a.length]; 
            this.colors_.push(b)
        }
    }
    this.plotter_.setColors(this.colors_)
}; 

Dygraph.prototype.getColors=function()
{
    return this.colors_
}; 
Dygraph.prototype.getPropertiesForSeries=function(d)
{
    var b=-1; 
    var c=this.getLabels(); 
    for(var a=1; a<c.length; a++)
    {
        if(c[a]==d)
        {
            b=a; 
            break
        }
    }
    if(b==-1)
    {
        return null
    }
    return{name:d,column:b,visible:this.visibility()[b-1],color:this.plotter_.colors[d],axis:1+this.seriesToAxisMap_[d]}
}; 

Dygraph.prototype.createRollInterface_=function()
{
    if(!this.roller_)
    {
        this.roller_=document.createElement("input"); 
        this.roller_.type="text"; 
        this.roller_.style.display="none"; 
        this.graphDiv.appendChild(this.roller_)
    }
    var b=this.attr_("showRoller")?"block":"none"; 
    var a=this.plotter_.area; 
    var e={position:"absolute",zIndex:10,top:(a.y+a.h-25)+"px",left:(a.x+1)+"px",display:b}; 
    this.roller_.size="2"; 
    this.roller_.value=this.rollPeriod_; 
    for(var d in e)
    {
        if(e.hasOwnProperty(d))
        {
            this.roller_.style[d]=e[d]
        }
    }var c=this; 
    this.roller_.onchange=function()
    {
        c.adjustRoll(c.roller_.value)
    }
}; 

Dygraph.prototype.dragGetX_=function(b,a)
{return Dygraph.pageX(b)-a.px}; 
Dygraph.prototype.dragGetY_=function(b,a)
{return Dygraph.pageY(b)-a.py}; 
Dygraph.prototype.createDragInterface_=function()
{
    var b=
    {
        isZooming:false,isPanning:false,is2DPan:false,dragStartX:null,dragStartY:null,dragEndX:null,dragEndY:null,dragDirection:null,prevEndX:null,prevEndY:null,prevDragDirection:null,cancelNextDblclick:false,initialLeftmostDate:null,xUnitsPerPixel:null,dateRange:null,px:0,py:0,boundedDates:null,boundedValues:null,initializeMouseDown:function(h,i,f)
        {
            if(h.preventDefault)
            {
                h.preventDefault()
            }
            else
            {
                h.returnValue=false; 
                h.cancelBubble=true
            }
            f.px=Dygraph.findPosX(i.canvas_); 
            f.py=Dygraph.findPosY(i.canvas_); 
            f.dragStartX=i.dragGetX_(h,f); 
            f.dragStartY=i.dragGetY_(h,f); 
            f.cancelNextDblclick=false
        }
    }; 
    var d=this.attr_("interactionModel"); 
    var e=this; 
    var a=function(f)
    {
        return function(g)
        {
            f(g,e,b)
        }
    }; 
    for(var c in d)
    {
        if(!d.hasOwnProperty(c))
        {
            continue
        }
        this.addEvent(this.mouseEventElement_,c,a(d[c]))
    }
    this.mouseUpHandler_=function(f)
    {
        if(b.isZooming||b.isPanning)
        {
            b.isZooming=false; 
            b.dragStartX=null; 
            b.dragStartY=null
        }
        if(b.isPanning)
        {
            b.isPanning=false; 
            b.draggingDate=null; 
            b.dateRange=null; 
            for(var g=0; g<e.axes_.length; g++)
            {
                delete e.axes_[g].draggingValue; 
                delete e.axes_[g].dragValueRange
            }
        }
    }; 
    this.addEvent(document,"mouseup",this.mouseUpHandler_)
}; 

Dygraph.prototype.drawZoomRect_=function(b,h,c,i,d,e,f,g)
{
    var a=this.canvas_ctx_; 
    if(e==Dygraph.HORIZONTAL)
    {
        a.clearRect(Math.min(h,f),this.layout_.getPlotArea().y,Math.abs(h-f),this.layout_.getPlotArea().h)
    }
    else
    {
        if(e==Dygraph.VERTICAL)
        {
            a.clearRect(this.layout_.getPlotArea().x,Math.min(i,g),this.layout_.getPlotArea().w,Math.abs(i-g))
        }
    }
    if(b==Dygraph.HORIZONTAL)
    {
        if(c&&h)
        {
            a.fillStyle="rgba(128,128,128,0.33)"; 
            a.fillRect(Math.min(h,c),this.layout_.getPlotArea().y,Math.abs(c-h),this.layout_.getPlotArea().h)
        }
    }
    else
    {
        if(b==Dygraph.VERTICAL)
        {
            if(d&&i)
            {
                a.fillStyle="rgba(128,128,128,0.33)"; 
                a.fillRect(this.layout_.getPlotArea().x,Math.min(i,d),this.layout_.getPlotArea().w,Math.abs(d-i))
            }
        }
    }
    if(this.isUsingExcanvas_)
    {
        this.currentZoomRectArgs_=[b,h,c,i,d,0,0,0]
    }
}; 

Dygraph.prototype.clearZoomRect_=function()
{
    this.currentZoomRectArgs_=null; 
    this.canvas_ctx_.clearRect(0,0,this.canvas_.width,this.canvas_.height)
}; 
Dygraph.prototype.doZoomX_=function(b,a)
{
    this.currentZoomRectArgs_=null; 
    var d=this.toDataXCoord(b); 
    var c=this.toDataXCoord(a); 
    this.doZoomXDates_(d,c)
}; 
Dygraph.zoomAnimationFunction=function(a,c)
{
    var b=1.5; 
    return(1-Math.pow(b,-a))/(1-Math.pow(b,-c))
}; 
Dygraph.prototype.doZoomXDates_=function(b,a)
{
    var d=this.xAxisRange(); 
    var c=[b,a]; 
    this.zoomed_x_=true; 
    var e=this; 
    this.doAnimatedZoom(d,c,null,null,function()
    {
    if(e.attr_("zoomCallback"))
        {
            e.attr_("zoomCallback")(b,a,e.yAxisRanges())
        }
    })
}; 

Dygraph.prototype.doZoomY_=function(e,b)
{
    this.currentZoomRectArgs_=null; 
    var g=this.yAxisRanges(); 
    var f=[]; 
    for(var c=0; c<this.axes_.length; c++)
    {
        var a=this.toDataYCoord(e,c); 
        var d=this.toDataYCoord(b,c); 
        f.push([d,a])
    }
    this.zoomed_y_=true; 
    var h=this; 
    this.doAnimatedZoom(null,null,g,f,function()
    {
        if(h.attr_("zoomCallback"))
        {
            var i=h.xAxisRange(); 
            h.attr_("zoomCallback")(i[0],i[1],h.yAxisRanges())
        }
    })
}; 

Dygraph.prototype.doUnzoom_=function()
{
    var b=false,c=false,d=false; 
    if(this.dateWindow_!==null)
    {
        b=true; 
        c=true
    }
    for(var f=0; f<this.axes_.length; f++)
    {
        if(typeof(this.axes_[f].valueWindow)!=="undefined"&&this.axes_[f].valueWindow!==null)
        {
            b=true; 
            d=true
        }
    }
    this.clearSelection(); 
    if(b)
    {
        this.zoomed_x_=false; 
        this.zoomed_y_=false; 
        var h=this.rawData_[0][0]; 
        var g=this.rawData_[this.rawData_.length-1][0]; 
        if(!this.attr_("animatedZooms"))
        {
            this.dateWindow_=null; 
            for(f=0; f<this.axes_.length; f++)
            {
                if(this.axes_[f].valueWindow!==null)
                {
                    delete this.axes_[f].valueWindow
                }
            }
            this.drawGraph_(); 
            if(this.attr_("zoomCallback"))
            {
                this.attr_("zoomCallback")(h,g,this.yAxisRanges())
            }
            return
        }
        var m=null,k=null,l=null,j=null; 
        if(c)
        {
            m=this.xAxisRange(); 
            k=[h,g]
        }
        if(d)
        {
            l=this.yAxisRanges(); 
            var n=this.gatherDatasets_(this.rolledSeries_,null); 
            var e=n[1]; 
            this.computeYAxisRanges_(e); 
            j=[]; 
            for(f=0; f<this.axes_.length; f++)
            {
                var a=this.axes_[f]; 
                j.push(a.valueRange!=null?a.valueRange:a.extremeRange)
            }
        }
        var o=this; 
        this.doAnimatedZoom(m,k,l,j,function()
        {
            o.dateWindow_=null; 
            for(var p=0; p<o.axes_.length; p++)
            {
                if(o.axes_[p].valueWindow!==null)
                {
                    delete o.axes_[p].valueWindow
                }
            }
            if(o.attr_("zoomCallback"))
            {
                o.attr_("zoomCallback")(h,g,o.yAxisRanges())
            }
        })
    }
}; 

Dygraph.prototype.doAnimatedZoom=function(f,d,g,e,a)
{
    var i=this.attr_("animatedZooms")?Dygraph.ANIMATION_STEPS:1; 
    var n=[]; 
    var m=[]; 
    var h,b; 
    if(f!==null&&d!==null)
    {
        for(h=1; h<=i; h++)
        {
            b=Dygraph.zoomAnimationFunction(h,i); 
            n[h-1]=[f[0]*(1-b)+b*d[0],f[1]*(1-b)+b*d[1]]
        }
    }
    if(g!==null&&e!==null)
    {
        for(h=1; h<=i; h++)
        {
            b=Dygraph.zoomAnimationFunction(h,i);
            var l=[]; 
            for(var c=0; c<this.axes_.length; c++)
            {
                l.push([g[c][0]*(1-b)+b*e[c][0],g[c][1]*(1-b)+b*e[c][1]])
            }
            m[h-1]=l
        }
    }
    var k=this; 
    Dygraph.repeatAndCleanup(function(o)
    {
        if(m.length)
        {
            for(var j=0; 
            j<k.axes_.length; 
            j++)
            {
                var p=m[o][j]; 
                k.axes_[j].valueWindow=[p[0],p[1]]
            }
        }
        if(n.length)
        {
            k.dateWindow_=n[o]
        }
        k.drawGraph_()
    },
    i,Dygraph.ANIMATION_DURATION/i,a)
};

 Dygraph.prototype.getArea=function()
 {return this.plotter_.area};
 Dygraph.prototype.eventToDomCoords=function(c)
 {
    var a=Dygraph.pageX(c)-Dygraph.findPosX(this.mouseEventElement_);
    var b=Dygraph.pageY(c)-Dygraph.findPosY(this.mouseEventElement_);
    return[a,b]
};
Dygraph.prototype.findClosestRow=function(b)
{
    var f=Infinity;
    var d=-1; 
    var h=this.layout_.points;
    var e=h.length;
    for(var c=0; c<e; c++)
    {
        var g=h[c]; 
        if(!Dygraph.isValidPoint(g,true))
        {continue}
        var a=Math.abs(g.canvasx-b); 
        if(a<f)
        {
            f=a; d=c
        }
    }
    return this.idxToRow_(d)
}; 

Dygraph.prototype.findClosestPoint=function(d,e)
{
    var m=Infinity; 
    var k=-1; 
    var p=this.layout_.points; 
    var c,f,g,o,a,b; 
    for(var q=0; q<this.layout_.datasets.length; ++q)
    {
        var h=this.layout_.setPointsOffsets[q]; 
        var l=this.layout_.setPointsLengths[q]; 
        for(var j=0; j<l; ++j)
        {
            var o=p[h+j]; 
            if(!Dygraph.isValidPoint(o))
            {continue}
            f=o.canvasx-d; 
            g=o.canvasy-e; 
            c=f*f+g*g; 
            if(c<m)
            {
                m=c; 
                a=o; 
                b=q; 
                k=j
            }
        }
    }
    var n=this.layout_.setNames[b]; 
    return {row:k+this.getLeftBoundary_(),seriesName:n,point:a}
}; 

Dygraph.prototype.findStackedPoint=function(d,e)
{
    var p=this.findClosestRow(d); 
    var a=this.getLeftBoundary_(); 
    var q=p-a; 
    var m=this.layout_.points; 
    var b,c; 
    for(var s=0; s<this.layout_.datasets.length; ++s)
    {
        var g=this.layout_.setPointsOffsets[s]; 
        var h=this.layout_.setPointsLengths[s]; 
        if(q>=h)
        {continue}
        var k=m[g+q]; 
        if(!Dygraph.isValidPoint(k))
        {continue}
        var n=k.canvasy; 
        if(d>k.canvasx&&q+1<h)
        {
            var l=m[g+q+1]; 
            if(Dygraph.isValidPoint(l))
            {
                var f=l.canvasx-k.canvasx; 
                if(f>0)
                {
                    var o=(d-k.canvasx)/f; 
                    n+=o*(l.canvasy-k.canvasy)
                }
            }
        }
        else
        {
            if(d<k.canvasx&&q>0)
            {
                var j=m[g+q-1]; 
                if(Dygraph.isValidPoint(j))
                {
                    var f=k.canvasx-j.canvasx; 
                    if(f>0)
                    {
                        var o=(k.canvasx-d)/f; 
                        n+=o*(j.canvasy-k.canvasy)
                    }
                }
            }
        }
        if(s==0||n<e)
        {
            b=k; 
            c=s
        }
    }
    var i=this.layout_.setNames[c]; 
    return{row:p,seriesName:i,point:b}
}; 

Dygraph.prototype.mouseMove_=function(f)
{
    var j=this.layout_.points; 
    if(j===undefined)
    {return}
    var b=this.eventToDomCoords(f); 
    var c=b[0]; 
    var d=b[1]; 
    var h=this.attr_("highlightSeriesOpts"); 
    var g=this.attr_("highlightOnHover"); 
    var k=false; 
    if(h)
    {
        var e; 
        if(this.attr_("stackedGraph"))
        {
            e=this.findStackedPoint(c,d)
        }
        else
        {
            e=this.findClosestPoint(c,d)
        }
        if(g)
        {
            k=this.setSelection(e.row,e.seriesName)
        }
    }
    else
    {
        var i=this.findClosestRow(c); 
        if(g)
        {
            k=this.setSelection(i)
        }
    }
    var a=this.attr_("highlightCallback"); 
    if(a&&k)
    {
        a(f,this.lastx_,this.selPoints_,this.lastRow_,this.highlightSet_)
    }
}; 

Dygraph.prototype.getLeftBoundary_=function()
{
    for(var a=0; a<this.boundaryIds_.length; a++)
    {
        if(this.boundaryIds_[a]!==undefined)
        {
            return this.boundaryIds_[a][0]
        }
    }
    return 0
}; 

Dygraph.prototype.idxToRow_=function(b)
{
    if(b<0)
        {return -1}
        var a=this.getLeftBoundary_(); 
        for(var d=0; 
        d<this.layout_.datasets.length; 
        ++d)
    {
        var c=this.layout_.datasets[d]; 
        if(b<c.length)
        {return a+b}
        b-=c.length
    }
    return -1
}; 

Dygraph.prototype.animateSelection_=function(a)
{
    var g=10; 
    var b=30; 
    if(this.fadeLevel===undefined)
    {
        this.fadeLevel=0
    }
    if(this.animateId===undefined)
    {
        this.animateId=0
    }
    var c=this.fadeLevel; 
    var d=a<0?c:g-c; 
    if(d<=0)
    {
        if(this.fadeLevel)
        {
            this.updateSelection_(1)
        }
        return
    }
    var f=++this.animateId; 
    var e=this; 
    Dygraph.repeatAndCleanup(function(h)
    {
        if(e.animateId!=f)
        {return}
        e.fadeLevel+=a; 
        if(e.fadeLevel===0)
        {
            e.clearSelection()
        }
        else
        {
            e.updateSelection_(e.fadeLevel/g)
        }
    },
    d,b,function() {})
}; 

Dygraph.prototype.updateSelection_=function(m)
{
    var h=this.cascadeEvents_("select",{selectedX:this.lastx_,selectedPoints:this.selPoints_}); 
    var j; 
    var g=this.canvas_ctx_; 
    if(this.attr_("highlightSeriesOpts"))
    {
        g.clearRect(0,0,this.width_,this.height_); 
        var a=1-this.attr_("highlightSeriesBackgroundAlpha"); 
        if(a)
        {
            var b=true; 
            if(b)
            {
                if(m===undefined)
                {
                    this.animateSelection_(1); 
                    return
                }
                a*=m
            }
            g.fillStyle="rgba(255,255,255,"+a+")"; 
            g.fillRect(0,0,this.width_,this.height_)
        }
        var q=this.datasetIndexFromSetName_(this.highlightSet_); 
        this.plotter_._drawLine(g,q)
    }
    else
    {
        if(this.previousVerticalX_>=0)
        {
            var l=0; 
            var k=this.attr_("labels"); 
            for(j=1; j<k.length; j++)
            {
                var p=this.attr_("highlightCircleSize",k[j]); 
                if(p>l)
                {l=p}
            }
            var o=this.previousVerticalX_; 
            g.clearRect(o-l-1,0,2*l+2,this.height_)
        }
    }
    if(this.isUsingExcanvas_&&this.currentZoomRectArgs_)
    {
        Dygraph.prototype.drawZoomRect_.apply(this,this.currentZoomRectArgs_)
    }
    if(this.selPoints_.length>0)
    {
        var d=this.selPoints_[0].canvasx; 
        g.save(); 
        for(j=0; j<this.selPoints_.length; j++)
        {
            var n=this.selPoints_[j]; 
            if(!Dygraph.isOK(n.canvasy))
            {continue}
            var e=this.attr_("highlightCircleSize",n.name); 
            var c=this.attr_("drawHighlightPointCallback",n.name); 
            var f=this.plotter_.colors[n.name]; 
            if(!c)
            {
                c=Dygraph.Circles.DEFAULT
            }
            g.lineWidth=this.attr_("strokeWidth",n.name); 
            g.strokeStyle=f; 
            g.fillStyle=f; 
            c(this.g,n.name,g,d,n.canvasy,f,e)
        }
        if(this.attr_("showVerticalCrosshair"))
        {
            var f="blue"; 
            var s=1.5; 
            if(this.attr_("crosshairColor"))
            {
                f=this.attr_("crosshairColor")
            }
            if(this.attr_("crosshairWidth"))
            {
                s=this.attr_("crosshairWidth")
            }
            g.strokeStyle=f; 
            g.lineWidth=s; 
            g.beginPath(); 
            g.moveTo(d,0); 
            g.lineTo(d,this.height_); 
            g.closePath(); 
            g.stroke()
        }
        g.restore(); 
        this.previousVerticalX_=d
    }
}; 

Dygraph.prototype.setSelection=function(i,f)
{
    this.selPoints_=[]; 
    var h=0; 
    if(i!==false)
    {
        i-=this.getLeftBoundary_()
    }
    var e=false; 
    if(i!==false&&i>=0)
    {
        if(i!=this.lastRow_)
        {e=true}
        this.lastRow_=i; 
        for(var l=0; l<this.layout_.datasets.length; ++l)
        {
            var k=this.layout_.datasets[l]; 
            if(i<k.length)
            {
                var g=this.layout_.points[h+i]; 
                if(this.attr_("stackedGraph"))
                {
                    g=this.layout_.unstackPointAtIndex(h+i)
                }
                if(!(g.yval===null))
                {
                    this.selPoints_.push(g)
                }
                else
                {
                    if(this.attr_("interpolatePoints"))
                    {
                        var b=null; 
                        var a=null; 
                        for(var j=i; j>=0; j--)
                        {
                            var m=this.layout_.points[h+j]; 
                            if(m.yval!==null&&m.name===g.name)
                            {
                                b=m; 
                                break
                            }
                        }
                        for(var j=i; j<k.length; j++)
                        {
                            var m=this.layout_.points[h+j]; 
                            if(m.yval!==null&&m.name===g.name)
                            {
                                a=m; 
                                break
                            }
                        }
                        if(b===null||a===null)
                        {continue}
                        var o=a.xval-b.xval; 
                        var q=a.yval-b.yval; 
                        var c=a.canvasx-b.canvasx; 
                        var d=a.canvasy-b.canvasy; 
                        var n=(g.canvasx-b.canvasx)/c; 
                        var p=n*q; 
                        g.yval=b.yval+p; 
                        g.canvasy=b.canvasy+(n*d); 
                        this.selPoints_.push(g)
                    }
                }
            }
            h+=k.length
        }
    }
    else
    {
        if(this.lastRow_>=0)
        {e=true}
        this.lastRow_=-1
    }
    if(this.selPoints_.length)
    {
        this.lastx_=this.selPoints_[0].xval
    }
    else
    {
        this.lastx_=-1
    }
    if(f!==undefined)
    {
        if(this.highlightSet_!==f)
        {e=true}
        this.highlightSet_=f
    }
    if(e)
    {
        this.updateSelection_(undefined)
    }
    return e
}; 

Dygraph.prototype.mouseOut_=function(a)
{
    if(this.attr_("unhighlightCallback"))
    {
        this.attr_("unhighlightCallback")(a)
    }
    if(this.attr_("hideOverlayOnMouseOut"))
    {
        this.clearSelection()
    }
}; 

Dygraph.prototype.clearSelection=function()
{
    this.cascadeEvents_("deselect",{}); 
    if(this.fadeLevel)
    {
        this.animateSelection_(-1); 
        return
    }
    this.canvas_ctx_.clearRect(0,0,this.width_,this.height_); 
    this.fadeLevel=0; 
    this.selPoints_=[]; 
    this.lastx_=-1; 
    this.lastRow_=-1; 
    this.highlightSet_=null
}; 

Dygraph.prototype.getSelection=function()
{
    if(!this.selPoints_||this.selPoints_.length<1)
    {
        return -1
    }
    for(var a=0; a<this.layout_.points.length; a++)
    {
        if(this.layout_.points[a].x==this.selPoints_[0].x)
        {
            return a+this.getLeftBoundary_()
        }
    }
    return -1
}; 

Dygraph.prototype.getHighlightSeries=function()
{
    return this.highlightSet_
}; 

Dygraph.prototype.loadedEvent_=function(a)
{
    this.rawData_=this.parseCSV_(a); 
    this.predraw_()
}; 

Dygraph.prototype.addXTicks_=function()
{
    var a; 
    if(this.dateWindow_)
    {
        a=[this.dateWindow_[0],this.dateWindow_[1]]
    }
    else
    {
        a=this.fullXRange_()
    }
    var b=this.optionsViewForAxis_("x"); 
    var c=b("ticker")(a[0],a[1],this.width_,b,this); 
    this.layout_.setXTicks(c)
}; 

Dygraph.prototype.extremeValues_=function(g)
{
    var f=null,e=null,c,h; 
    var a=this.attr_("errorBars")||this.attr_("customBars"); 
    if(a)
    {
        for(c=0; c<g.length; c++)
        {
            h=g[c][1][0]; 
            if(!h)
            {
                continue
            }
            var d=h-g[c][1][1]; 
            var b=h+g[c][1][2]; 
            if(d>h)
            {
                d=h
            }
            if(b<h)
            {
                b=h
            }
            if(e===null||b>e)
            {
                e=b
            }
            if(f===null||d<f)
            {
                f=d
            }
        }
    }
    else
    {
        for(c=0; c<g.length; c++)
        {
            h=g[c][1]; 
            if(h===null||isNaN(h))
            {
                continue
            }
            if(e===null||h>e)
            {
                e=h
            }
            if(f===null||h<f)
            {
                f=h
            }
        }
    }
    return[f,e]
}; 

Dygraph.prototype.predraw_=function()
{
    var e=new Date(); 
    this.computeYAxes_(); 
    if(this.plotter_)
    {
        this.plotter_.clear()
    }
    this.plotter_=new DygraphCanvasRenderer(this,this.hidden_,this.hidden_ctx_,this.layout_); 
    this.createRollInterface_(); 
    this.cascadeEvents_("predraw"); 
    if(this.rangeSelector_)
    {
        this.rangeSelector_.renderStaticLayer()
    }
    this.rolledSeries_=[null]; 
    for(var b=1; b<this.numColumns(); b++)
    {
        var c=this.attr_("logscale",b); 
        var d=this.extractSeries_(this.rawData_,b,c); 
        d=this.rollingAverage(d,this.rollPeriod_); 
        this.rolledSeries_.push(d)
    }
    this.drawGraph_(); 
    var a=new Date(); 
    this.drawingTimeMs_=(a-e)
}; 

Dygraph.prototype.gatherDatasets_=function(v,f)
{
    var c=[]; 
    var d=[]; 
    var e=[]; 
    var g={}; 
    var n,o,p; 
    var t=v.length-1; 
    for(n=t; n>=1; n--)
    {
        if(!this.visibility()[n-1])
        {
            continue
        }
        var w=[]; 
        for(o=0; o<v[n].length; o++)
        {
            w.push(v[n][o])
        }
        var b=this.attr_("errorBars")||this.attr_("customBars"); 
        if(f)
        {
            var s=f[0]; 
            var m=f[1]; 
            var u=[]; 
            var h=null,r=null; 
            for(p=0; p<w.length; p++)
            {
                if(w[p][0]>=s&&h===null)
                {
                    h=p
                }
                if(w[p][0]<=m)
                {
                    r=p
                }
            }
            if(h===null)
            {
                h=0
            }
            if(h>0)
            {h--}
            if(r===null)
            {r=w.length-1}
            if(r<w.length-1)
            {r++}
            c[n-1]=[h,r]; 
            for(p=h; p<=r; p++)
            {
                u.push(w[p])
            }
            w=u
        }
        else
        {
            c[n-1]=[0,w.length-1]
        }
        var y=this.extremeValues_(w); 
        if(b)
        {
            for(o=0; o<w.length; o++)
            {
                w[o]=[w[o][0],w[o][1][0],w[o][1][1],w[o][1][2]]
            }
        }
        else
        {
            if(this.attr_("stackedGraph"))
            {
                var q=w.length; 
                var a; 
                for(o=0; o<q; o++)
                {
                    var A=w[o][0]; 
                    if(d[A]===undefined)
                    {
                        d[A]=0
                    }
                    a=w[o][1]; 
                    if(a===null)
                    {
                        w[o]=[A,null]; 
                        continue
                    }
                    d[A]+=a; 
                    w[o]=[A,d[A]]; 
                    if(d[A]>y[1])
                    {
                        y[1]=d[A]
                    }
                    if(d[A]<y[0])
                    {
                        y[0]=d[A]
                    }
                }
            }
        }
        var z=this.attr_("labels")[n]; 
        g[z]=y; 
        e[n]=w
    }
    if(this.attr_("stackedGraph"))
    {
        for(p=e.length-1; p>=0; --p)
        {
            if(!e[p])
            {
                continue
            }
            for(o=0; o<e[p].length; o++)
            {
                var A=e[p][o][0]; 
                if(isNaN(d[A]))
                {
                    for(n=e.length-1; n>=0; n--)
                    {
                        if(!e[n])
                        {
                            continue
                        }
                        e[n][o][1]=NaN
                    }
                }
            }
            break
        }
    }
    return[e,g,c]
}; 

Dygraph.prototype.drawGraph_=function()
{
    var j=new Date(); 
    var f=this.is_initial_draw_; 
    this.is_initial_draw_=false; 
    this.layout_.removeAllDatasets(); 
    this.setColors_(); 
    this.attrs_.pointSize=0.5*this.attr_("highlightCircleSize"); 
    var h=this.gatherDatasets_(this.rolledSeries_,this.dateWindow_); 
    var b=h[0]; 
    var d=h[1]; 
    this.boundaryIds_=h[2]; 
    this.setIndexByName_={}; 
    var g=this.attr_("labels"); 
    if(g.length>0)
    {
        this.setIndexByName_[g[0]]=0
    }
    var a=0; 
    for(var e=1; e<b.length; e++)
    {
        this.setIndexByName_[g[e]]=e; 
        if(!this.visibility()[e-1])
        {
            continue
        }
        this.layout_.addDataset(g[e],b[e]); 
        this.datasetIndex_[e]=a++
    }
    this.computeYAxisRanges_(d); 
    this.layout_.setYAxes(this.axes_); 
    this.addXTicks_(); 
    var k=this.zoomed_x_; 
    this.layout_.setDateWindow(this.dateWindow_); 
    this.zoomed_x_=k; 
    this.layout_.evaluateWithError(); 
    this.renderGraph_(f); 
    if(this.attr_("timingName"))
    {
        var c=new Date(); 
        if(console)
        {
            console.log(this.attr_("timingName")+" - drawGraph: "+(c-j)+"ms")
        }
    }
}; 


Dygraph.prototype.renderGraph_=function(a)
{
    this.plotter_.clear(); 
    this.plotter_.render(); 
    this.canvas_.getContext("2d").clearRect(0,0,this.canvas_.width,this.canvas_.height); 
    if(this.rangeSelector_)
    {
        this.rangeSelector_.renderInteractiveLayer()
    }
    this.cascadeEvents_("drawChart"); 
    if(this.attr_("drawCallback")!==null)
    {
        this.attr_("drawCallback")(this,a)
    }
}; 

Dygraph.prototype.computeYAxes_=function()
{
    var d,o,m,b,f,j,n; 
    if(this.axes_!==undefined&&this.user_attrs_.hasOwnProperty("valueRange")===false)
    {
        o=[]; 
        for(f=0; f<this.axes_.length; f++)
        {
            o.push(this.axes_[f].valueWindow)
        }
    }
    this.axes_=[{yAxisId:0,g:this}]; 
    this.seriesToAxisMap_={}; 
    var h=this.attr_("labels"); 
    var l={}; 
    for(d=1; d<h.length; d++)
    {
        l[h[d]]=(d-1)
    }
    var c=["includeZero","valueRange","labelsKMB","labelsKMG2","pixelsPerYLabel","yAxisLabelWidth","axisLabelFontSize","axisTickSize","logscale"]; 
    for(d=0; d<c.length; d++)
    {
        var g=c[d]; 
        n=this.attr_(g); 
        if(n)
        {
            this.axes_[0][g]=n
        }
    }
    for(m in l)
    {
        if(!l.hasOwnProperty(m))
        {
            continue
        }
        b=this.attr_("axis",m); 
        if(b===null)
        {
            this.seriesToAxisMap_[m]=0; 
            continue
        }
        if(typeof(b)=="object")
        {
            j={}; 
            Dygraph.update(j,this.axes_[0]); 
            Dygraph.update(j,{valueRange:null}); 
            var p=this.axes_.length; 
            j.yAxisId=p; 
            j.g=this; 
            Dygraph.update(j,b); 
            this.axes_.push(j); 
            this.seriesToAxisMap_[m]=p
        }
    }
    for(m in l)
    {
        if(!l.hasOwnProperty(m))
        {
            continue
        }
        b=this.attr_("axis",m); 
        if(typeof(b)=="string")
        {
            if(!this.seriesToAxisMap_.hasOwnProperty(b))
            {
                this.error("Series "+m+" wants to share a y-axis with series "+b+", which does not define its own axis."); 
                return null
            }
            var e=this.seriesToAxisMap_[b]; 
            this.seriesToAxisMap_[m]=e
        }
    }
    if(o!==undefined)
    {
        for(f=0; f<o.length; f++)
        {
            this.axes_[f].valueWindow=o[f]
        }
    }
    for(b=0; b<this.axes_.length; b++)
    {
        if(b===0)
        {
            j=this.optionsViewForAxis_("y"+(b?"2":"")); 
            n=j("valueRange"); 
            if(n)
            {
                this.axes_[b].valueRange=n
            }
        }
        else
        {
            var a=this.user_attrs_.axes; 
            if(a&&a.y2)
            {
                n=a.y2.valueRange; 
                if(n)
                {
                    this.axes_[b].valueRange=n
                }
            }
        }
    }
}; 

Dygraph.prototype.numAxes=function()
{
    var b=0; 
    for(var c in this.seriesToAxisMap_)
    {
        if(!this.seriesToAxisMap_.hasOwnProperty(c))
        {
            continue
        }
        var a=this.seriesToAxisMap_[c]; 
        if(a>b)
        {b=a}
    }
    return 1+b
}; 

Dygraph.prototype.axisPropertiesForSeries=function(a)
{
    return this.axes_[this.seriesToAxisMap_[a]]
}; 
Dygraph.prototype.computeYAxisRanges_=function(d)
{
    var v=[],u; 
    for(u in this.seriesToAxisMap_)
    {
        if(!this.seriesToAxisMap_.hasOwnProperty(u))
        {
            continue
        }
        var f=this.seriesToAxisMap_[u]; 
        while(v.length<=f)
        {
            v.push([])
        }
        v[f].push(u)
        }
    for(var e=0; e<this.axes_.length; e++)
    {
        var a=this.axes_[e]; 
        if(!v[e])
        {
            a.extremeRange=[0,1]
        }
        else
        {
            u=v[e]; 
            var o=Infinity; 
            var m=-Infinity; 
            var c,b; 
            for(var g=0; g<u.length; g++)
            {
                if(!d.hasOwnProperty(u[g]))
                {
                    continue
                }
                c=d[u[g]][0]; 
                if(c!==null)
                {
                    o=Math.min(c,o)
                }
                b=d[u[g]][1]; 
                if(b!==null)
                {
                    m=Math.max(b,m)
                }
            }
            if(a.includeZero&&o>0)
            {
                o=0
            }
            if(o==Infinity)
            {
                o=0
            }
            if(m==-Infinity)
            {m=1}
            var w=m-o;
            if(w===0)
            {w=m}
            var l,n; 
            if(a.logscale)
            {
                l=m+0.1*w; n=o
            }
            else
            {
                l=m+0.1*w; 
                n=o-0.1*w; 
                if(!this.attr_("avoidMinZero"))
                {
                    if(n<0&&o>=0)
                    {n=0}
                    if(l>0&&m<=0)
                    {l=0}
                }
                if(this.attr_("includeZero"))
                {
                    if(m<0)
                    {l=0}
                    if(o>0)
                    {n=0}
                }
            }
            a.extremeRange=[n,l]
        }
        if(a.valueWindow)
        {
            a.computedValueRange=[a.valueWindow[0],a.valueWindow[1]]
        }
        else
        {
            if(a.valueRange)
            {
                a.computedValueRange=[a.valueRange[0],a.valueRange[1]]
            }
            else
            {
                a.computedValueRange=a.extremeRange
            }
        }
        var p=this.optionsViewForAxis_("y"+(e?"2":"")); 
        var y=p("ticker"); 
        if(e===0||a.independentTicks)
        {
            a.ticks=y(a.computedValueRange[0],a.computedValueRange[1],this.height_,p,this)
        }
        else
        {
            var q=this.axes_[0]; 
            var s=q.ticks; 
            var r=q.computedValueRange[1]-q.computedValueRange[0]; 
            var t=a.computedValueRange[1]-a.computedValueRange[0]; 
            var x=[]; 
            for(var h=0; h<s.length; h++)
            {
                var z=(s[h].v-q.computedValueRange[0])/r; 
                var A=a.computedValueRange[0]+z*t; 
                x.push(A)
            }
            a.ticks=y(a.computedValueRange[0],a.computedValueRange[1],this.height_,p,this,x)
        }
    }
}; 

Dygraph.prototype.extractSeries_=function(e,a,c)
{
    var f=[]; 
    for(var b=0; b<e.length; b++)
    {
        var g=e[b][0]; 
        var d=e[b][a]; 
        if(c)
        {
            if(d<=0)
            {
                d=null
            }
        }
        f.push([g,d])
    }
    return f
}; 


Dygraph.prototype.rollingAverage=function(s,x)
{
    if(s.length<2)
    {
        return s
    }
    x=Math.min(x,s.length); 
    var w=[]; 
    var z=this.attr_("sigma"); 
    var k,f,g,h,E,B,r,A; 
    if(this.fractions_)
    {
        var q=0; 
        var d=0; 
        var m=100; 
        for(g=0; g<s.length; g++)
        {
            q+=s[g][1][0]; 
            d+=s[g][1][1]; 
            if(g-x>=0)
            {
                q-=s[g-x][1][0]; 
                d-=s[g-x][1][1]
            }
            var c=s[g][0]; 
            var C=d?q/d:0; 
            if(this.attr_("errorBars"))
            {
                if(this.attr_("wilsonInterval"))
                {
                    if(d)
                    {
                        var t=C<0?0:C,o=d; 
                        var u=z*Math.sqrt(t*(1-t)/o+z*z/(4*o*o)); 
                        var e=1+z*z/d; 
                        k=(t+z*z/(2*d)-u)/e; 
                        f=(t+z*z/(2*d)+u)/e; 
                        w[g]=[c,[t*m,(t-k)*m,(f-t)*m]]
                    }
                    else
                    {
                        w[g]=[c,[0,0,0]]
                    }
                }
                else
                {
                    A=d?z*Math.sqrt(C*(1-C)/d):1; 
                    w[g]=[c,[m*C,m*A,m*A]]
                }
            }
            else
            {
                w[g]=[c,m*C]
            }
        }
    }
    else
    {
        if(this.attr_("customBars"))
        {
            k=0; 
            var l=0; 
            f=0; 
            var a=0; 
            for(g=0; g<s.length; g++)
            {
                var b=s[g][1]; 
                E=b[1]; 
                w[g]=[s[g][0],[E,E-b[0],b[2]-E]]; 
                if(E!==null&&!isNaN(E))
                {
                    k+=b[0]; 
                    l+=E; 
                    f+=b[2]; 
                    a+=1
                }
                if(g-x>=0)
                {
                    var v=s[g-x]; 
                    if(v[1][1]!==null&&!isNaN(v[1][1]))
                    {
                        k-=v[1][0]; 
                        l-=v[1][1]; 
                        f-=v[1][2]; 
                        a-=1
                    }
                }
                if(a)
                {
                    w[g]=[s[g][0],[1*l/a,1*(l-k)/a,1*(f-l)/a]]
                }
                else
                {
                    w[g]=[s[g][0],[null,null,null]]
                }
            }
        }
        else
        {
            if(!this.attr_("errorBars"))
            {
                if(x==1)
                {return s}
                for(g=0; g<s.length; g++)
                {
                    B=0; 
                    r=0; 
                    for(h=Math.max(0,g-x+1); h<g+1; h++)
                    {
                        E=s[h][1]; 
                        if(E===null||isNaN(E))
                        {continue}
                        r++; 
                        B+=s[h][1]
                    }
                    if(r)
                    {
                        w[g]=[s[g][0],B/r]
                    }
                    else
                    {
                        w[g]=[s[g][0],null]
                    }
                }
            }
            else
            {
                for(g=0; g<s.length; g++)
                {
                    B=0; 
                    var D=0; 
                    r=0; 
                    for(h=Math.max(0,g-x+1); h<g+1; h++)
                    {
                        E=s[h][1][0]; 
                        if(E===null||isNaN(E))
                        {continue}
                        r++; 
                        B+=s[h][1][0]; 
                        D+=Math.pow(s[h][1][1],2)
                    }
                    if(r)
                    {
                        A=Math.sqrt(D)/r; 
                        w[g]=[s[g][0],[B/r,z*A,z*A]]
                    }
                    else
                    {
                        w[g]=[s[g][0],[null,null,null]]
                    }
                }
            }
        }
    }
    return w
}; 

Dygraph.prototype.detectTypeFromString_=function(c)
{
    var b=false; 
    var a=c.indexOf("-"); 
    if((a>0&&(c[a-1]!="e"&&c[a-1]!="E"))||c.indexOf("/")>=0||isNaN(parseFloat(c)))
    {
        b=true
    }
    else
    {
        if(c.length==8&&c>"19700101"&&c<"20371231")
        {
            b=true
        }
    }
    if(b)
    {
        this.attrs_.xValueParser=Dygraph.dateParser; 
        this.attrs_.axes.x.valueFormatter=Dygraph.dateString_; 
        this.attrs_.axes.x.ticker=Dygraph.dateTicker; 
        this.attrs_.axes.x.axisLabelFormatter=Dygraph.dateAxisFormatter
    }
    else
    {
        this.attrs_.xValueParser=function(d)
        {return parseFloat(d)}; 
        this.attrs_.axes.x.valueFormatter=function(d)
        {return d}; 
        this.attrs_.axes.x.ticker=Dygraph.numericLinearTicks; 
        this.attrs_.axes.x.axisLabelFormatter=this.attrs_.axes.x.valueFormatter
    }
}; 

Dygraph.prototype.parseFloat_=function(e,c,b)
{
    var d=parseFloat(e); 
    if(!isNaN(d))
    {return d}
    if(/^ *$/.test(e))
    {return null}
    if(/^ *nan *$/i.test(e))
    {return NaN}
    var a="Unable to parse '"+e+"' as a number"; 
    if(b!==null&&c!==null)
    {
        a+=" on line "+(1+c)+" ('"+b+"') of CSV."
    }
    this.error(a); 
    return null
}; 

Dygraph.prototype.parseCSV_=function(b)
{
    var p=[]; 
    var n=b.split("\n"); 
    var s,k; 
    var d=this.attr_("delimiter"); 
    if(n[0].indexOf(d)==-1&&n[0].indexOf("\t")>=0)
    {
        d="\t"}var q=0; 
        if(!("labels" in this.user_attrs_))
        {
            q=1; 
            this.attrs_.labels=n[0].split(d)
        }
        var m=0; 
        var t; 
        var c=false; 
        var e=this.attr_("labels").length; 
        var o=false; 
        for(var g=q; g<n.length; g++)
        {
            var l=n[g]; 
            m=g; 
            if(l.length===0)
            {continue}
            if(l[0]=="#")
            {continue}
            var h=l.split(d); 
            if(h.length<2)
            {continue}
            var f=[]; 
            if(!c)
            {
                this.detectTypeFromString_(h[0]); 
                t=this.attr_("xValueParser"); 
                c=true
            }
            f[0]=t(h[0],this); 
            if(this.fractions_)
            {
                for(k=1; k<h.length; k++)
                {
                    s=h[k].split("/"); 
                    if(s.length!=2)
                    {
                        this.error('Expected fractional "num/den" values in CSV data but found a value \''+h[k]+"' on line "+(1+g)+" ('"+l+"') which is not of this form."); 
                        f[k]=[0,0]
                    }
                    else
                    {
                        f[k]=[this.parseFloat_(s[0],g,l),this.parseFloat_(s[1],g,l)]
                    }
                }
            }
            else
            {
                if(this.attr_("errorBars"))
                {
                    if(h.length%2!=1)
                    {
                        this.error("Expected alternating (value, stdev.) pairs in CSV data but line "+(1+g)+" has an odd number of values ("+(h.length-1)+"): '"+l+"'")
                    }
                    for(k=1; k<h.length; k+=2)
                    {
                        f[(k+1)/2]=[this.parseFloat_(h[k],g,l),this.parseFloat_(h[k+1],g,l)]
                    }
                }
                else
                {
                    if(this.attr_("customBars"))
                    {
                        for(k=1; k<h.length; k++)
                        {
                            var r=h[k]; 
                            if(/^ *$/.test(r))
                            {
                                f[k]=[null,null,null]
                            }
                            else
                            {
                                s=r.split("; "); 
                                if(s.length==3)
                                {
                                    f[k]=[this.parseFloat_(s[0],g,l),this.parseFloat_(s[1],g,l),this.parseFloat_(s[2],g,l)]
                                }
                                else
                                {
                                    this.warn('When using customBars, values must be either blank or "low; center; high" tuples (got "'+r+'" on line '+(1+g))
                                }
                            }
                        }
                    }
                    else
                    {
                    for(k=1; k<h.length; k++)
                    {
                        f[k]=this.parseFloat_(h[k],g,l)
                    }
                }
            }
        }
        if(p.length>0&&f[0]<p[p.length-1][0])
        {o=true}
        if(f.length!=e)
        {
            this.error("Number of columns in line "+g+" ("+f.length+") does not agree with number of labels ("+e+") "+l)
        }
        if(g===0&&this.attr_("labels"))
        {
            var a=true; 
            for(k=0; a&&k<f.length; k++)
            {
                if(f[k])
                {a=false}
            }
            if(a)
            {
                this.warn("The dygraphs 'labels' option is set, but the first row of CSV data ('"+l+"') appears to also contain labels. Will drop the CSV labels and use the option labels."); continue
            }
        }
        p.push(f)
    }
    if(o)
    {
        this.warn("CSV is out of order;  order it correctly to speed loading."); p.sort(function(i,j) {return i[0]-j[0]})
    }
    return p
}; 

Dygraph.prototype.parseArray_=function(a)
{
    if(a.length===0)
    {
        this.error("Can't plot empty data set"); 
        return null
    }
    if(a[0].length===0)
    {
        this.error("Data set cannot contain an empty row"); 
        return null
    }
    var b; 
    if(this.attr_("labels")===null)
    {
        this.warn("Using default labels. Set labels explicitly via 'labels' in the options parameter"); 
        this.attrs_.labels=["X"]; 
        for(b=1; b<a[0].length; b++)
        {
            this.attrs_.labels.push("Y"+b)
        }
    }
    if(Dygraph.isDateLike(a[0][0]))
    {
        this.attrs_.axes.x.valueFormatter=Dygraph.dateString_; 
        this.attrs_.axes.x.axisLabelFormatter=Dygraph.dateAxisFormatter; 
        this.attrs_.axes.x.ticker=Dygraph.dateTicker; 
        var c=Dygraph.clone(a); 
        for(b=0; b<a.length; b++)
        {
            if(c[b].length===0)
            {
                this.error("Row "+(1+b)+" of data is empty"); 
                return null
            }
            if(c[b][0]===null||typeof(c[b][0].getTime)!="function"||isNaN(c[b][0].getTime()))
            {
                this.error("x value in row "+(1+b)+" is not a Date"); 
                return null
            }
            c[b][0]=c[b][0].getTime()
        }
        return c
    }
    else
    {
        this.attrs_.axes.x.valueFormatter=function(d)
        {return d}; 
        this.attrs_.axes.x.axisLabelFormatter=Dygraph.numberAxisLabelFormatter; 
        this.attrs_.axes.x.ticker=Dygraph.numericLinearTicks; 
        return a
    }
}; 

Dygraph.prototype.parseDataTable_=function(g)
{
    var v=function(i)
    {
        var j=String.fromCharCode(65+i%26); 
        i=Math.floor(i/26); 
        while(i>0)
        {
            j=String.fromCharCode(65+(i-1)%26)+j.toLowerCase(); 
            i=Math.floor((i-1)/26)
        }
        return j
    }; 
    var f=g.getNumberOfColumns(); 
    var u=g.getNumberOfRows(); 
    var n=g.getColumnType(0); 
    if(n=="date"||n=="datetime")
    {
        this.attrs_.xValueParser=Dygraph.dateParser; 
        this.attrs_.axes.x.valueFormatter=Dygraph.dateString_; 
        this.attrs_.axes.x.ticker=Dygraph.dateTicker; 
        this.attrs_.axes.x.axisLabelFormatter=Dygraph.dateAxisFormatter
    }
    else
    {
        if(n=="number")
        {
            this.attrs_.xValueParser=function(i)
            {
                return parseFloat(i)
            }; 
            this.attrs_.axes.x.valueFormatter=function(i)
            {
                return i
            }; 
            this.attrs_.axes.x.ticker=Dygraph.numericLinearTicks; 
            this.attrs_.axes.x.axisLabelFormatter=this.attrs_.axes.x.valueFormatter
        }
        else
        {
            this.error("only 'date', 'datetime' and 'number' types are supported for column 1 of DataTable input (Got '"+n+"')"); 
            return null
        }
    }
    var e=[]; 
    var b={}; 
    var l=false; 
    var m,o; 
    for(m=1; m<f; m++)
    {
        var w=g.getColumnType(m); 
        if(w=="number")
        {
            e.push(m)
        }
            else
            {
                if(w=="string"&&this.attr_("displayAnnotations"))
                {
                    var h=e[e.length-1]; 
                    if(!b.hasOwnProperty(h))
                    {
                        b[h]=[m]
                    }
                    else
                    {
                        b[h].push(m)
                    }
                    l=true
                }
                else
                {
                    this.error("Only 'number' is supported as a dependent type with Gviz. 'string' is only supported if displayAnnotations is true")
                }
            }
        }
        var q=[g.getColumnLabel(0)]; 
        for(m=0; m<e.length; m++)
        {
            q.push(g.getColumnLabel(e[m])); 
            if(this.attr_("errorBars"))
            {m+=1}
        }
        this.attrs_.labels=q; 
        f=q.length; var s=[]; 
        var r=false; var c=[]; 
        for(m=0; m<u; m++)
        {
            var t=[]; 
            if(typeof(g.getValue(m,0))==="undefined"||g.getValue(m,0)===null)
            {
                this.warn("Ignoring row "+m+" of DataTable because of undefined or null first column."); 
                continue
            }
            if(n=="date"||n=="datetime")
            {
                t.push(g.getValue(m,0).getTime())
            }
            else
            {
                t.push(g.getValue(m,0))
            }
            if(!this.attr_("errorBars"))
            {
                for(o=0; o<e.length; o++)
                {
                    var d=e[o]; 
                    t.push(g.getValue(m,d)); 
                    if(l&&b.hasOwnProperty(d)&&g.getValue(m,b[d][0])!==null)
                    {
                        var a={}; 
                        a.series=g.getColumnLabel(d); 
                        a.xval=t[0]; 
                        a.shortText=v(c.length); 
                        a.text=""; 
                        for(var p=0; p<b[d].length; p++)
                        {
                            if(p)
                            {a.text+="\n"}
                            a.text+=g.getValue(m,b[d][p])
                        }
                        c.push(a)
                    }
                }
                for(o=0; o<t.length; o++)
                {
                    if(!isFinite(t[o]))
                    {
                        t[o]=null
                    }
                }
            }
            else
            {
                for(o=0; o<f-1; o++)
                {
                    t.push([g.getValue(m,1+2*o),g.getValue(m,2+2*o)])
                }
            }
            if(s.length>0&&t[0]<s[s.length-1][0])
            {r=true}
            s.push(t)
        }
        if(r)
        {
            this.warn("DataTable is out of order; order it correctly to speed loading."); s.sort(function(i,j) {return i[0]-j[0]})
        }
        this.rawData_=s; 
        if(c.length>0)
        {
            this.setAnnotations(c,true)
        }
    }; 

Dygraph.prototype.start_=function()
{
    var b=this.file_; 
    if(typeof b=="function")
    {
        b=b()
    }
    if(Dygraph.isArrayLike(b))
    {
        this.rawData_=this.parseArray_(b); 
        this.predraw_()
    }
    else
    {
        if(typeof b=="object"&&typeof b.getColumnRange=="function")
        {
            this.parseDataTable_(b); 
            this.predraw_()
        }
        else
        {
            if(typeof b=="string")
            {
                if(b.indexOf("\n")>=0)
                {
                    this.loadedEvent_(b)
                }
                else
                {
                    var c=new XMLHttpRequest(); 
                    var a=this; 
                    c.onreadystatechange=function()
                    {
                        if(c.readyState==4)
                        {
                            if(c.status===200||c.status===0)
                            {
                                a.loadedEvent_(c.responseText)
                            }
                        }
                    }; 
                    c.open("GET",b,true); 
                    c.send(null)
                }
            }
            else
            {
                this.error("Unknown data format: "+(typeof b))
            }
        }
    }
}; 

Dygraph.prototype.updateOptions=function(d,b)
{
    if(typeof(b)=="undefined")
    {
        b=false
    }
    var c=d.file; 
    var a=Dygraph.mapLegacyOptions_(d); 
    if("rollPeriod" in a)
    {
        this.rollPeriod_=a.rollPeriod
    }
    if("dateWindow" in a)
    {
        this.dateWindow_=a.dateWindow; 
        if(!("isZoomedIgnoreProgrammaticZoom" in a))
        {
            this.zoomed_x_=(a.dateWindow!==null)
        }
    }
    if("valueRange" in a&&!("isZoomedIgnoreProgrammaticZoom" in a))
    {
        this.zoomed_y_=(a.valueRange!==null)
    }
    var e=Dygraph.isPixelChangingOptionList(this.attr_("labels"),a); 
    Dygraph.updateDeep(this.user_attrs_,a); 
    if(c)
    {
        this.file_=c; 
        if(!b)
        {
            this.start_()
        }
    }
    else
    {
        if(!b)
        {
            if(e)
            {
                this.predraw_()
            }
            else
            {
                this.renderGraph_(false)
            }
        }
    }
}; 
        
Dygraph.mapLegacyOptions_=function(a)
{
    var d={}; 
    for(var b in a)
    {
        if(b=="file")
        {continue}
        if(a.hasOwnProperty(b))
        {
            d[b]=a[b]
        }
    }
    var e=function(f,g,h)
    {
        if(!d.axes)
        {
            d.axes={}
        }
        if(!d.axes[f])
        {
            d.axes[f]={}
        }
        d.axes[f][g]=h}; 
        var c=function(h,f,g)
        {
            if(typeof(a[h])!="undefined")
            {
                e(f,g,a[h]); 
                delete d[h]
            }
        }; 
        c("xValueFormatter","x","valueFormatter"); 
        c("pixelsPerXLabel","x","pixelsPerLabel"); 
        c("xAxisLabelFormatter","x","axisLabelFormatter"); 
        c("xTicker","x","ticker"); 
        c("yValueFormatter","y","valueFormatter"); 
        c("pixelsPerYLabel","y","pixelsPerLabel"); 
        c("yAxisLabelFormatter","y","axisLabelFormatter"); 
        c("yTicker","y","ticker"); 
        return d
    }; 
    
    Dygraph.prototype.resize=function(d,a)
    {
        if(this.resize_lock)
        {return}
        this.resize_lock=true; 
        if((d===null)!=(a===null))
        {
            this.warn("Dygraph.resize() should be called with zero parameters or two non-NULL parameters. Pretending it was zero."); 
            d=a=null
        }
        var c=this.width_; 
        var b=this.height_; 
        if(d)
        {
            this.maindiv_.style.width=d+"px"; 
            this.maindiv_.style.height=a+"px"; 
            this.width_=d; this.height_=a
        }
        else
        {
            this.width_=this.maindiv_.clientWidth; 
            this.height_=this.maindiv_.clientHeight
        }
        if(c!=this.width_||b!=this.height_)
        {
            this.maindiv_.innerHTML=""; 
            this.roller_=null; 
            this.attrs_.labelsDiv=null; 
            this.createInterface_(); 
            if(this.annotations_.length)
            {
                this.layout_.setAnnotations(this.annotations_)
            }
            this.predraw_()
        }
        this.resize_lock=false
    }; 
    
    Dygraph.prototype.adjustRoll=function(a)
    {
        this.rollPeriod_=a; 
        this.predraw_()
    }; 
    
    Dygraph.prototype.visibility=function()
    {
        if(!this.attr_("visibility"))
        {
            this.attrs_.visibility=[]
        }
        while(this.attr_("visibility").length<this.numColumns()-1)
        {
            this.attrs_.visibility.push(true)
        }
        return this.attr_("visibility")
    }; 
    
    Dygraph.prototype.setVisibility=function(a,b)
    {
        var c=this.visibility(); 
        if(a<0||a>=c.length)
        {
            this.warn("invalid series number in setVisibility: "+a)
        }
        else
        {
            c[a]=b; this.predraw_()
        }
    }; 

    Dygraph.prototype.size=function()
    {
        return {width:this.width_,height:this.height_}
    }; 
    
    Dygraph.prototype.setAnnotations=function(a,b)
    {
        Dygraph.addAnnotationRule(); 
        this.annotations_=a; 
        this.layout_.setAnnotations(this.annotations_); 
        if(!b)
        {
            this.predraw_()
        }
    }; 
    
    Dygraph.prototype.annotations=function()
    {
        return this.annotations_
    }; 
    
    Dygraph.prototype.getLabels=function()
    {
        return this.attr_("labels").slice()
    }; 
    
    Dygraph.prototype.indexFromSetName=function(a)
    {
        return this.setIndexByName_[a]
    }; 
    
    Dygraph.prototype.datasetIndexFromSetName_=function(a)
    {
        return this.datasetIndex_[this.indexFromSetName(a)]
    }; 
    
    Dygraph.addAnnotationRule=function()
    {
        if(Dygraph.addedAnnotationCSS)
        {return}
        var e="border: 1px solid black;  background-color: white;  text-align: center; "; 
        var f=document.createElement("style"); f.type="text/css"; document.getElementsByTagName("head")[0].appendChild(f); 
        for(var b=0; b<document.styleSheets.length; b++)
        {
            if(document.styleSheets[b].disabled)
            {continue}
            var d=document.styleSheets[b]; 
            try
            {
                if(d.insertRule)
                {
                    var c=d.cssRules?d.cssRules.length:0; d.insertRule(".dygraphDefaultAnnotation { "+e+" }",c)
                }
                else
                {
                    if(d.addRule)
                    {
                        d.addRule(".dygraphDefaultAnnotation",e)
                    }
                }
                Dygraph.addedAnnotationCSS=true; 
                return
            }
            catch(a){}
        }
        this.warn("Unable to add default annotation CSS rule;  display may be off.")
    }; 
    var DateGraph=Dygraph; 
    "use strict"; 
    Dygraph.LOG_SCALE=10; 
    Dygraph.LN_TEN=Math.log(Dygraph.LOG_SCALE); 
    Dygraph.log10=function(a)
    {
        return Math.log(a)/Dygraph.LN_TEN
    }; 
    Dygraph.DEBUG=1; 
    Dygraph.INFO=2; 
    Dygraph.WARNING=3; 
    Dygraph.ERROR=3; 
    Dygraph.LOG_STACK_TRACES=false; 
    Dygraph.DOTTED_LINE=[2,2]; 
    Dygraph.DASHED_LINE=[7,3]; 
    Dygraph.DOT_DASH_LINE=[7,2,2,2]; 
    Dygraph.log=function(c,b)
    {
        var d; 
        if(typeof(printStackTrace)!="undefined")
        {
            d=printStackTrace({guess:false}); 
            while(d[0].indexOf("stacktrace")!=-1)
            {
                d.splice(0,1)
            }
            d.splice(0,2); 
            for(var a=0; a<d.length; a++)
            {
                d[a]=d[a].replace(/\([^)]*\/(.*)\)/,"@$1").replace(/\@.*\/([^\/]*)/,"@$1").replace("[object Object].","")
            }
            var e=d.splice(0,1)[0]; 
            b+=" ("+e.replace(/^.*@ ?/,"")+")"
        }
        if(typeof(console)!="undefined")
        {
            switch(c)
            {
            case Dygraph.DEBUG:
                console.debug("dygraphs: "+b); 
                break; 
            case Dygraph.INFO:
                console.info("dygraphs: "+b); 
                break; 
            case Dygraph.WARNING:
                console.warn("dygraphs: "+b); 
                break; 
            case Dygraph.ERROR:
                console.error("dygraphs: "+b); 
                break
            }
        }
        if(Dygraph.LOG_STACK_TRACES)
        {
            console.log(d.join("\n"))
        }
    }; 
    
    Dygraph.info=function(a)
    {
        Dygraph.log(Dygraph.INFO,a)
    }; 
    Dygraph.prototype.info=Dygraph.info; 
    Dygraph.warn=function(a)
    {
        Dygraph.log(Dygraph.WARNING,a)
    }; 
    Dygraph.prototype.warn=Dygraph.warn; 
    Dygraph.error=function(a)
    {
        Dygraph.log(Dygraph.ERROR,a)
    }; 
    Dygraph.prototype.error=Dygraph.error; 
    Dygraph.getContext=function(a)
    {
        return a.getContext("2d")
    }; 
    Dygraph.addEvent=function addEvent(a,c,b)
    {
        if(a.addEventListener)
        {
            a.addEventListener(c,b,false)
        }
        else
        {
            a[c+b]=function()
            {
                b(window.event)
            }; 
            a.attachEvent("on"+c,a[c+b])
        }
    }; 
    Dygraph.prototype.addEvent=function addEvent(a,c,b)
    {
        Dygraph.addEvent(a,c,b); 
        this.registeredEvents_.push({elem:a,type:c,fn:b})
    }; 
    Dygraph.removeEvent=function addEvent(a,c,b)
    {
        if(a.removeEventListener)
        {
            a.removeEventListener(c,b,false)
        }
        else
        {
            a.detachEvent("on"+c,a[c+b]); 
            a[c+b]=null
        }
    }; 
    Dygraph.cancelEvent=function(a)
    {
        a=a?a:window.event; 
        if(a.stopPropagation)
        {
            a.stopPropagation()
        }
        if(a.preventDefault)
        {
            a.preventDefault()
        }
        a.cancelBubble=true; 
        a.cancel=true; 
        a.returnValue=false; 
        return false
    }; 
    Dygraph.hsvToRGB=function(d,k,m)
    {
        var j; 
        var c; 
        var a; 
        if(k===0)
        {
            j=m; c=m; a=m
        }
        else
        {
            var e=Math.floor(d*6); 
            var b=(d*6)-e; 
            var g=m*(1-k); 
            var h=m*(1-(k*b)); 
            var l=m*(1-(k*(1-b))); 
            switch(e)
            {
            case 1:
                j=h; c=m; a=g; 
                break; 
            case 2:
                j=g; c=m; a=l; 
                break; 
            case 3:
                j=g; c=h; a=m; 
                break; 
            case 4:
                j=l; c=g; a=m; 
                break; 
            case 5:
                j=m; c=g; a=h; 
                break; 
            case 6:
            case 0:
                j=m; c=l; a=g; 
                break
            }
        }
        j=Math.floor(255*j+0.5); 
        c=Math.floor(255*c+0.5); 
        a=Math.floor(255*a+0.5); 
        return"rgb("+j+","+c+","+a+")"
    }; 
    Dygraph.findPosX=function(c)
    {
        var b=0; 
        if(c.offsetParent)
        {
            var a=c; 
            while(1)
            {
                b+=a.offsetLeft; 
                if(!a.offsetParent)
                {break}
                a=a.offsetParent
            }
        }
        else
        {
            if(c.x){b+=c.x}
        }
        while(c&&c!=document.body)
        {
            b-=c.scrollLeft; 
            c=c.parentNode
        }
        return b
    }; 
    
    Dygraph.findPosY=function(c)
    {
        var b=0; 
        if(c.offsetParent)
        {
            var a=c; 
            while(1)
            {
                b+=a.offsetTop; 
                if(!a.offsetParent)
                {break}
                a=a.offsetParent
            }
        }
        else
        {
            if(c.y)
            {
                b+=c.y
            }
        }
        while(c&&c!=document.body)
        {
            b-=c.scrollTop; 
            c=c.parentNode
        }
        return b
    }; 
    Dygraph.pageX=function(d)
    {
        if(d.pageX)
        {
            return(!d.pageX||d.pageX<0)?0:d.pageX
        }
        else
        {
            var c=document; 
            var a=document.body; 
            return d.clientX+(c.scrollLeft||a.scrollLeft)-(c.clientLeft||0)
        }
    }; 
    
    Dygraph.pageY=function(d)
    {
        if(d.pageY)
        {
            return(!d.pageY||d.pageY<0)?0:d.pageY
        }
        else
        {
            var c=document; 
            var a=document.body; 
            return d.clientY+(c.scrollTop||a.scrollTop)-(c.clientTop||0)
        }
    }; 

Dygraph.isOK=function(a)
{
    return a&&!isNaN(a)
}; 

Dygraph.isValidPoint=function(b,a)
{
    if(!b)
    {
        return false
    }
    if(b.yval===null)
    {
        return false
    }
    if(b.x===null||b.x===undefined)
    {
        return false
    }
    if(b.y===null||b.y===undefined)
    {
        return false
    }
    if(isNaN(b.x)||(!a&&isNaN(b.y)))
    {
        return false
    }
    return true
}; 

Dygraph.floatFormat=function(c,a)
{
    var b=Math.min(Math.max(1,a||2),21); 
    return(Math.abs(c)<0.001&&c!==0)?c.toExponential(b-1):c.toPrecision(b)
}; 

Dygraph.zeropad=function(a)
{
    if(a<10)
    {
        return"0"+a
    }
    else
    {
        return""+a
    }
}; 

Dygraph.hmsString_=function(b)
{
    var c=Dygraph.zeropad; 
    var a=new Date(b); 
    if(a.getSeconds())
    {
        return c(a.getHours())+":"+c(a.getMinutes())+":"+c(a.getSeconds())
    }
    else
    {
        return c(a.getHours())+":"+c(a.getMinutes())
    }
}; 

Dygraph.round_=function(a,b)
{
    var c=Math.pow(10,b); 
    return Math.round(a*c)/c
}; 

Dygraph.binarySearch=function(h,b,a,f,d)
{
    if(f===null||f===undefined||d===null||d===undefined)
    {
        f=0; 
        d=b.length-1
    }
    if(f>d)
    {
        return -1
    }
    if(a===null||a===undefined)
    {
        a=0
    }
    var i=function(j)
    {
        return j>=0&&j<b.length
    }; 
    var g=parseInt((f+d)/2,10); 
    var c=b[g]; 
    if(c==h)
    {
        return g
    }
    var e; 
    if(c>h)
    {
        if(a>0)
        {
            e=g-1; 
            if(i(e)&&b[e]<h)
            {return g}
        }
        return Dygraph.binarySearch(h,b,a,f,g-1)
    }
    if(c<h)
    {
        if(a<0)
        {
            e=g+1; 
            if(i(e)&&b[e]>h)
            {return g}
        }
        return Dygraph.binarySearch(h,b,a,g+1,d)
    }
}; 

Dygraph.dateParser=function(b)
{
    var c; var a; 
    if(b.search("-")==-1||b.search("T")!=-1||b.search("Z")!=-1)
    {
        a=Dygraph.dateStrToMillis(b); 
        if(a&&!isNaN(a))
        {return a}
    }
    if(b.search("-")!=-1)
    {
        c=b.replace("-","/","g"); 
        while(c.search("-")!=-1)
        {
            c=c.replace("-","/")
        }
        a=Dygraph.dateStrToMillis(c)
    }
    else
    {
        if(b.length==8)
        {
            c=b.substr(0,4)+"/"+b.substr(4,2)+"/"+b.substr(6,2); 
            a=Dygraph.dateStrToMillis(c)
        }
        else
        {
            a=Dygraph.dateStrToMillis(b)
        }
    }
    if(!a||isNaN(a))
    {
        Dygraph.error("Couldn't parse "+b+" as a date")
    }
    return a
}; 

Dygraph.dateStrToMillis=function(a)
{
    return new Date(a).getTime()
}; 

Dygraph.update=function(c,b)
{
    if(typeof(b)!="undefined"&&b!==null)
    {
        for(var a in b)
        {
            if(b.hasOwnProperty(a))
            {
                c[a]=b[a]
            }
        }
    }
    return c
}; 

Dygraph.updateDeep=function(d,c)
{
    function a(e)
    {
        return(typeof Node==="object"?e instanceof Node:typeof e==="object"&&typeof e.nodeType==="number"&&typeof e.nodeName==="string")
    }
    if(typeof(c)!="undefined"&&c!==null)
    {
        for(var b in c)
        {
            if(c.hasOwnProperty(b))
            {
                if(c[b]===null)
                {
                    d[b]=null
                }
                else
                {
                    if(Dygraph.isArrayLike(c[b]))
                    {
                        d[b]=c[b].slice()
                    }
                    else
                    {
                        if(a(c[b]))
                        {
                            d[b]=c[b]
                        }
                        else
                        {
                            if(typeof(c[b])=="object")
                            {
                                if(typeof(d[b])!="object"||d[b]===null)
                                {
                                    d[b]={}
                                }
                                Dygraph.updateDeep(d[b],c[b])
                            }
                            else
                            {
                                d[b]=c[b]
                            }
                        }
                    }
                }
            }
        }
    }
    return d
}; 

Dygraph.isArrayLike=function(a)
{
    var b=typeof(a); 
    if((b!="object"&&!(b=="function"&&typeof(a.item)=="function"))||a===null||typeof(a.length)!="number"||a.nodeType===3)
    {
        return false
    }
    return true
}; 

Dygraph.isDateLike=function(a)
{
    if(typeof(a)!="object"||a===null||typeof(a.getTime)!="function")
    {
        return false
    }
    return true
}; 

Dygraph.clone=function(b)
{
    var c=[]; 
    for(var a=0; a<b.length; a++)
    {
        if(Dygraph.isArrayLike(b[a]))
        {
            c.push(Dygraph.clone(b[a]))
        }
        else
        {
            c.push(b[a])
        }
    }
    return c
}; 

Dygraph.createCanvas=function()
{
    var a=document.createElement("canvas"); 
    var b=(/MSIE/.test(navigator.userAgent)&&!window.opera); 
    if(b&&(typeof(G_vmlCanvasManager)!="undefined"))
    {
        a=G_vmlCanvasManager.initElement(a)
    }
    return a
}; 

Dygraph.isAndroid=function()
{
    return(/Android/).test(navigator.userAgent)
}; 
Dygraph.Iterator=function(a,d,b,c)
{
    d=d||0; b=b||a.length; 
    this.hasNext=true; 
    this.peek=null; 
    this.array_=a; 
    this.predicate_=c; 
    this.end_=Math.min(a.length,d+b); 
    this.nextIdx_=d-1; 
    this.next()
}; 

Dygraph.Iterator.prototype.next=function()
{
    if(!this.hasNext)
    {
        return null
    }
    var c=this.peek; 
    var b=this.nextIdx_+1; 
    var a=false; 
    while(b<this.end_)
    {
        if(!this.predicate_||this.predicate_(this.array_,b))
        {
            this.peek=this.array_[b]; 
            a=true; 
            break
        }
        b++
    }
    this.nextIdx_=b; 
    if(!a)
    {
        this.hasNext=false; 
        this.peek=null
    }
    return c
}; 

Dygraph.createIterator=function(a,d,b,c)
{
    return new Dygraph.Iterator(a,d,b,c)
}; 

Dygraph.repeatAndCleanup=function(e,g,c,a)
{
    var b=0; var f=new Date().getTime(); 
    e(b); 
    if(g==1)
    {
        a(); 
        return
    }
    (function d()
    {
        if(b>=g)
        {return}
        var h=f+(1+b)*c; 
        setTimeout(function()
        {
            b++; 
            e(b); 
            if(b>=g-1)
            {
                a()
            }
            else
            {
                d()
            }
        },
        h-new Date().getTime())
    })()
}; 

Dygraph.isPixelChangingOptionList=function(c,a)
{
    var d=
    {
        annotationClickHandler:true,
        annotationDblClickHandler:true,
        annotationMouseOutHandler:true,
        annotationMouseOverHandler:true,
        axisLabelColor:true,
        axisLineColor:true,
        axisLineWidth:true,
        clickCallback:true,
        digitsAfterDecimal:true,
        drawCallback:true,
        drawHighlightPointCallback:true,
        drawPoints:true,
        drawPointCallback:true,
        drawXGrid:true,
        drawYGrid:true,
        fillAlpha:true,
        gridLineColor:true,
        gridLineWidth:true,
        hideOverlayOnMouseOut:true,
        highlightCallback:true,
        highlightCircleSize:true,
        interactionModel:true,
        isZoomedIgnoreProgrammaticZoom:true,
        labelsDiv:true,
        labelsDivStyles:true,
        labelsDivWidth:true,
        labelsKMB:true,
        labelsKMG2:true,
        labelsSeparateLines:true,
        labelsShowZeroValues:true,
        legend:true,
        maxNumberWidth:true,
        panEdgeFraction:true,
        pixelsPerYLabel:true,
        pointClickCallback:true,
        pointSize:true,
        rangeSelectorPlotFillColor:true,
        rangeSelectorPlotStrokeColor:true,
        showLabelsOnHighlight:true,
        showRoller:true,
        sigFigs:true,
        strokeWidth:true,
        underlayCallback:true,
        unhighlightCallback:true,
        xAxisLabelFormatter:true,
        xTicker:true,
        xValueFormatter:true,
        yAxisLabelFormatter:true,
        yValueFormatter:true,
        zoomCallback:true
    }; 
    var f=false; 
    var g={}; 
    if(c)
    {
        for(var b=1; b<c.length; b++)
        {
            g[c[b]]=true
        }
    }
    for(var e in a)
    {
        if(f)
        {break}
        if(a.hasOwnProperty(e))
        {
            if(g[e])
            {
                for(var h in a[e])
                {
                    if(f)
                    {break}
                    if(a[e].hasOwnProperty(h)&&!d[h])
                    {
                        f=true
                    }
                }
            }
            else
            {
                if(!d[e])
                {
                    f=true
                }
            }
        }
    }
    return f
}; 

Dygraph.compareArrays=function(a,b)
{
    if(!Dygraph.isArrayLike(a)||!Dygraph.isArrayLike(b))
    {return false}
    if(a.length!==b.length)
    {return false}
    for(var c=0; c<a.length; c++)
    {
        if(a[c]!==b[c])
        {return false}
    }
    return true
}; 

Dygraph.regularShape_=function(d,n,l,e,f,m,g)
{
    m=m?m:0; 
    g=g?g:Math.PI*2/n; 
    d.beginPath(); 
    var h=true; 
    var j=m; 
    var a=j; 
    var b=function()
    {
        var q=e+(Math.sin(a)*l); 
        var r=f+(-Math.cos(a)*l); 
        return[q,r]
    }; 
    var k=b(); 
    var o=k[0]; 
    var p=k[1]; 
    d.moveTo(o,p); 
    for(var i=0; i<n; i++)
    {
        a=(i==n-1)?j:(a+g); 
        var c=b(); 
        d.lineTo(c[0],c[1])
        }
    d.fill(); 
    d.stroke()
}; 

Dygraph.shapeFunction_=function(c,b,a)
{
    return function(i,j,e,f,h,d,k)
    {
        e.strokeStyle=d; 
        e.fillStyle="white"; 
        Dygraph.regularShape_(e,c,k,f,h,b,a)
    }
}; 

Dygraph.DrawPolygon_=function(h,g,b,c,d,a,f,e)
{
    new Dygraph.RegularShape_(h,g,e).draw(b,c,d,f)
}; 
Dygraph.Circles=
{
    DEFAULT:function(e,f,d,a,b,c,h)
    {
        d.beginPath(); 
        d.fillStyle=c; 
        d.arc(a,b,h,0,2*Math.PI,false); 
        d.fill()
    },
    TRIANGLE:Dygraph.shapeFunction_(3),
    SQUARE:Dygraph.shapeFunction_(4,Math.PI/4),
    DIAMOND:Dygraph.shapeFunction_(4),
    PENTAGON:Dygraph.shapeFunction_(5),
    HEXAGON:Dygraph.shapeFunction_(6),
    CIRCLE:function(e,f,b,c,d,a,h)
    {
        b.beginPath(); 
        b.strokeStyle=a; 
        b.fillStyle="white"; 
        b.arc(c,d,h,0,2*Math.PI,false); 
        b.fill(); 
        b.stroke()
    },
    STAR:Dygraph.shapeFunction_(5,0,4*Math.PI/5),
    PLUS:function(e,f,b,c,d,a,h)
    {
        b.strokeStyle=a; 
        b.beginPath(); 
        b.moveTo(c+h,d); 
        b.lineTo(c-h,d); 
        b.closePath(); 
        b.stroke(); 
        b.beginPath(); 
        b.moveTo(c,d+h); 
        b.lineTo(c,d-h); 
        b.closePath(); 
        b.stroke()
    },
    EX:function(e,f,b,c,d,a,h)
    {
        b.strokeStyle=a; 
        b.beginPath(); 
        b.moveTo(c+h,d+h); 
        b.lineTo(c-h,d-h); 
        b.closePath(); 
        b.stroke(); 
        b.beginPath(); 
        b.moveTo(c+h,d-h); 
        b.lineTo(c-h,d+h); 
        b.closePath(); 
        b.stroke()
    }
}; 

"use strict"; 
Dygraph.GVizChart=function(a)
{this.container=a}; 
Dygraph.GVizChart.prototype.draw=function(a,b)
{
    this.container.innerHTML=""; 
    if(typeof(this.date_graph)!="undefined")
    {
        this.date_graph.destroy()
    }
    this.date_graph=new Dygraph(this.container,a,b)
}; 

Dygraph.GVizChart.prototype.setSelection=function(b)
{
    var a=false; 
    if(b.length)
    {
        a=b[0].row
    }
    this.date_graph.setSelection(a)
}; 
Dygraph.GVizChart.prototype.getSelection=function()
{
    var c=[]; 
    var b=this.date_graph.getSelection(); 
    if(b<0)
    {
        return c
    }
    var a=this.date_graph.layout_.datasets; 
    for(var d=0; d<a.length; ++d)
    {
        c.push({row:b,column:d+1})
    }
    return c
}; 

"use strict"; 
Dygraph.Interaction={}; 
Dygraph.Interaction.startPan=function(o,p,n)
{
    var q,a; 
    n.isPanning=true; 
    var u=p.xAxisRange(); 
    n.dateRange=u[1]-u[0]; 
    n.initialLeftmostDate=u[0]; 
    n.xUnitsPerPixel=n.dateRange/(p.plotter_.area.w-1); 
    if(p.attr_("panEdgeFraction"))
    {
        var r=p.width_*p.attr_("panEdgeFraction"); 
        var t=p.xAxisExtremes(); 
        var f=p.toDomXCoord(t[0])-r; 
        var j=p.toDomXCoord(t[1])+r; 
        var e=p.toDataXCoord(f); 
        var h=p.toDataXCoord(j); 
        n.boundedDates=[e,h]; 
        var m=[]; 
        var s=p.height_*p.attr_("panEdgeFraction"); 
        for(q=0; q<p.axes_.length; q++)
        {
            a=p.axes_[q]; 
            var v=a.extremeRange; 
            var l=p.toDomYCoord(v[0],q)+s; 
            var d=p.toDomYCoord(v[1],q)-s; 
            var k=p.toDataYCoord(l); 
            var c=p.toDataYCoord(d); 
            m[q]=[k,c]
        }
        n.boundedValues=m
    }
    n.is2DPan=false; 
    n.axes=[]; 
    for(q=0; q<p.axes_.length; q++)
    {
        a=p.axes_[q]; 
        var b={}; 
        var w=p.yAxisRange(q); 
        if(a.logscale)
        {
            b.initialTopValue=Dygraph.log10(w[1]); 
            b.dragValueRange=Dygraph.log10(w[1])-Dygraph.log10(w[0])
        }
        else
        {
            b.initialTopValue=w[1]; 
            b.dragValueRange=w[1]-w[0]
        }
        b.unitsPerPixel=b.dragValueRange/(p.plotter_.area.h-1); 
        n.axes.push(b); 
        if(a.valueWindow||a.valueRange)
        {n.is2DPan=true}
    }
}; 

Dygraph.Interaction.movePan=function(e,f,d)
{
    d.dragEndX=f.dragGetX_(e,d); 
    d.dragEndY=f.dragGetY_(e,d); 
    var l=d.initialLeftmostDate-(d.dragEndX-d.dragStartX)*d.xUnitsPerPixel; 
    if(d.boundedDates)
    {
        l=Math.max(l,d.boundedDates[0])
    }
    var j=l+d.dateRange; 
    if(d.boundedDates)
    {
        if(j>d.boundedDates[1])
        {
            l=l-(j-d.boundedDates[1]); 
            j=l+d.dateRange
        }
    }
    f.dateWindow_=[l,j]; 
    if(d.is2DPan)
    {
        for(var h=0; h<f.axes_.length; h++)
        {
            var a=f.axes_[h]; 
            var b=d.axes[h]; 
            var n=d.dragEndY-d.dragStartY; 
            var o=n*b.unitsPerPixel; 
            var c=d.boundedValues?d.boundedValues[h]:null; 
            var k=b.initialTopValue+o; 
            if(c)
            {
                k=Math.min(k,c[1])
            }
            var m=k-b.dragValueRange; 
            if(c)
            {
                if(m<c[0])
                {
                    k=k-(m-c[0]); 
                    m=k-b.dragValueRange
                }
            }
            if(a.logscale)
            {
                a.valueWindow=[Math.pow(Dygraph.LOG_SCALE,m),Math.pow(Dygraph.LOG_SCALE,k)]
            }
            else
            {
                a.valueWindow=[m,k]
            }
        }
    }
    f.drawGraph_(false)
}; 

Dygraph.Interaction.endPan=function(b,c,a)
{
    a.dragEndX=c.dragGetX_(b,a); 
    a.dragEndY=c.dragGetY_(b,a); 
    var e=Math.abs(a.dragEndX-a.dragStartX); 
    var d=Math.abs(a.dragEndY-a.dragStartY); 
    if(e<2&&d<2&&c.lastx_!==undefined&&c.lastx_!=-1)
    {
        Dygraph.Interaction.treatMouseOpAsClick(c,b,a)
    }
    a.isPanning=false; 
    a.is2DPan=false; 
    a.initialLeftmostDate=null; 
    a.dateRange=null; 
    a.valueRange=null; 
    a.boundedDates=null; 
    a.boundedValues=null; 
    a.axes=null
}; 

Dygraph.Interaction.startZoom=function(b,c,a)
{a.isZooming=true}; 
Dygraph.Interaction.moveZoom=function(b,c,a)
{
    a.dragEndX=c.dragGetX_(b,a); 
    a.dragEndY=c.dragGetY_(b,a); 
    var d=Math.abs(a.dragStartX-a.dragEndX); 
    var e=Math.abs(a.dragStartY-a.dragEndY); 
    a.dragDirection=(d<e/2)?Dygraph.VERTICAL:Dygraph.HORIZONTAL; 
    c.drawZoomRect_(a.dragDirection,a.dragStartX,a.dragEndX,a.dragStartY,a.dragEndY,a.prevDragDirection,a.prevEndX,a.prevEndY); 
    a.prevEndX=a.dragEndX; 
    a.prevEndY=a.dragEndY; 
    a.prevDragDirection=a.dragDirection
}; 
    
Dygraph.Interaction.treatMouseOpAsClick=function(h,f,d)
{
    var a=h.attr_("clickCallback"); 
    var l=h.attr_("pointClickCallback"); 
    var n=null; 
    if(l)
    {
        var c=-1; 
        var b=Number.MAX_VALUE; 
        for(var j=0; j<h.selPoints_.length; j++)
        {
            var k=h.selPoints_[j]; 
            var e=Math.pow(k.canvasx-d.dragEndX,2)+Math.pow(k.canvasy-d.dragEndY,2); 
            if(!isNaN(e)&&(c==-1||e<b))
            {
                b=e; 
                c=j
            }
        }
        var m=h.attr_("highlightCircleSize")+2; 
        if(b<=m*m)
        {
            n=h.selPoints_[c]
        }
    }
    if(n)
    {
        l(f,n)
    }
    if(a)
    {
        a(f,h.lastx_,h.selPoints_)
    }
}; 

Dygraph.Interaction.endZoom=function(b,c,a)
{
    a.isZooming=false; 
    a.dragEndX=c.dragGetX_(b,a); 
    a.dragEndY=c.dragGetY_(b,a); 
    var e=Math.abs(a.dragEndX-a.dragStartX); 
    var d=Math.abs(a.dragEndY-a.dragStartY); 
    if(e<2&&d<2&&c.lastx_!==undefined&&c.lastx_!=-1)
    {
        Dygraph.Interaction.treatMouseOpAsClick(c,b,a)
    }
    if(e>=10&&a.dragDirection==Dygraph.HORIZONTAL)
    {
        c.doZoomX_(Math.min(a.dragStartX,a.dragEndX),Math.max(a.dragStartX,a.dragEndX)); 
        a.cancelNextDblclick=true
    }
    else
    {
        if(d>=10&&a.dragDirection==Dygraph.VERTICAL)
        {
            c.doZoomY_(Math.min(a.dragStartY,a.dragEndY),Math.max(a.dragStartY,a.dragEndY)); 
            a.cancelNextDblclick=true
        }
        else
        {
            c.clearZoomRect_()
        }
    }
    a.dragStartX=null; 
    a.dragStartY=null
}; 

Dygraph.Interaction.startTouch=function(b,c,a)
{
    b.preventDefault(); 
    var h=[]; 
    for(var d=0; d<b.touches.length; d++)
    {
        var f=b.touches[d]; 
        h.push({pageX:f.pageX,pageY:f.pageY,dataX:c.toDataXCoord(f.pageX),dataY:c.toDataYCoord(f.pageY)})
    }
    a.initialTouches=h; 
    if(h.length==1)
    {
        a.initialPinchCenter=h[0]; 
        a.touchDirections={x:true,y:true}
    }
    else
    {
        if(h.length==2)
        {
            a.initialPinchCenter={pageX:0.5*(h[0].pageX+h[1].pageX),pageY:0.5*(h[0].pageY+h[1].pageY),dataX:0.5*(h[0].dataX+h[1].dataX),dataY:0.5*(h[0].dataY+h[1].dataY)}; 
            var e=180/Math.PI*Math.atan2(a.initialPinchCenter.pageY-h[0].pageY,h[0].pageX-a.initialPinchCenter.pageX); 
            e=Math.abs(e); 
            if(e>90)
            {
                e=90-e
            }
            a.touchDirections={x:(e<(90-45/2)),y:(e>45/2)}
        }
    }
    a.initialRange={x:c.xAxisRange(),y:c.yAxisRange()}
}; 

Dygraph.Interaction.moveTouch=function(h,j,d)
{
    var k,q=[]; 
    for(k=0; k<h.touches.length; k++)
    {
        var p=h.touches[k]; 
        q.push({pageX:p.pageX,pageY:p.pageY})
    }
    var n=d.initialTouches; 
    var c; 
    var b=d.initialPinchCenter; 
    if(q.length==1)
    {
        c=q[0]
    }
    else
    {
        c={pageX:0.5*(q[0].pageX+q[1].pageX),pageY:0.5*(q[0].pageY+q[1].pageY)}
    }
    var o={pageX:c.pageX-b.pageX,pageY:c.pageY-b.pageY}; 
    var f=d.initialRange.x[1]-d.initialRange.x[0]; 
    var e=d.initialRange.y[0]-d.initialRange.y[1]; 
    o.dataX=(o.pageX/j.plotter_.area.w)*f; 
    o.dataY=(o.pageY/j.plotter_.area.h)*e; 
    var r,s; 
    if(q.length==1)
    {
        r=1; 
        s=1
    }
    else
    {
        if(q.length==2)
        {
            var m=(n[1].pageX-b.pageX); 
            r=(q[1].pageX-c.pageX)/m; 
            var l=(n[1].pageY-b.pageY); 
            s=(q[1].pageY-c.pageY)/l
        }
    }
    r=Math.min(8,Math.max(0.125,r)); 
    s=Math.min(8,Math.max(0.125,s)); 
    if(d.touchDirections.x)
    {
        j.dateWindow_=[b.dataX-o.dataX+(d.initialRange.x[0]-b.dataX)/r,b.dataX-o.dataX+(d.initialRange.x[1]-b.dataX)/r]
    }
    if(d.touchDirections.y)
    {
        for(k=0; k<1; k++)
        {
            var a=j.axes_[k]; 
            if(a.logscale)
            {}
            else
            {
                a.valueWindow=[b.dataY-o.dataY+(d.initialRange.y[0]-b.dataY)/s,b.dataY-o.dataY+(d.initialRange.y[1]-b.dataY)/s]
            }
        }
    }
    j.drawGraph_(false)
}; 

Dygraph.Interaction.endTouch=function(b,c,a)
{
    if(b.touches.length!=0)
    {
        Dygraph.Interaction.startTouch(b,c,a)
    }
}; 
Dygraph.Interaction.defaultModel=
{
    mousedown:function(b,c,a)
    {
        if(b.button&&b.button==2)
        {return}
        a.initializeMouseDown(b,c,a); 
        if(b.altKey||b.shiftKey)
        {
            Dygraph.startPan(b,c,a)
        }
        else
        {
            Dygraph.startZoom(b,c,a)
        }
    },
    mousemove:function(b,c,a)
    {
        if(a.isZooming)
        {
            Dygraph.moveZoom(b,c,a)
        }
        else
        {
            if(a.isPanning)
            {
                Dygraph.movePan(b,c,a)
            }
        }
    },
    mouseup:function(b,c,a)
    {
        if(a.isZooming)
        {
            Dygraph.endZoom(b,c,a)
        }
        else
        {
            if(a.isPanning)
            {
                Dygraph.endPan(b,c,a)
            }
        }
    },
    touchstart:function(b,c,a)
    {
        Dygraph.Interaction.startTouch(b,c,a)
    },
    touchmove:function(b,c,a)
    {
        Dygraph.Interaction.moveTouch(b,c,a)
    },
    touchend:function(b,c,a)
    {
        Dygraph.Interaction.endTouch(b,c,a)
    },
    mouseout:function(b,c,a)
    {
        if(a.isZooming)
        {
            a.dragEndX=null; 
            a.dragEndY=null
        }
    },
    dblclick:function(b,c,a)
    {
        if(a.cancelNextDblclick)
        {
            a.cancelNextDblclick=false; 
            return
        }
        if(b.altKey||b.shiftKey)
        {return}
        c.doUnzoom_()
    }
}; 

Dygraph.DEFAULT_ATTRS.interactionModel=Dygraph.Interaction.defaultModel; 
Dygraph.defaultInteractionModel=Dygraph.Interaction.defaultModel; 
Dygraph.endZoom=Dygraph.Interaction.endZoom; 
Dygraph.moveZoom=Dygraph.Interaction.moveZoom; 
Dygraph.startZoom=Dygraph.Interaction.startZoom; 
Dygraph.endPan=Dygraph.Interaction.endPan; 
Dygraph.movePan=Dygraph.Interaction.movePan; 
Dygraph.startPan=Dygraph.Interaction.startPan; 
Dygraph.Interaction.nonInteractiveModel_=
{
    mousedown:function(b,c,a)
    {
        a.initializeMouseDown(b,c,a)
    },
    mouseup:function(b,c,a)
    {
        a.dragEndX=c.dragGetX_(b,a); 
        a.dragEndY=c.dragGetY_(b,a); 
        var e=Math.abs(a.dragEndX-a.dragStartX); 
        var d=Math.abs(a.dragEndY-a.dragStartY); 
        if(e<2&&d<2&&c.lastx_!==undefined&&c.lastx_!=-1)
        {
            Dygraph.Interaction.treatMouseOpAsClick(c,b,a)
        }
    }
}; 

Dygraph.Interaction.dragIsPanInteractionModel=
{
    mousedown:function(b,c,a)
    {
        a.initializeMouseDown(b,c,a); 
        Dygraph.startPan(b,c,a)
    },
    mousemove:function(b,c,a)
    {
        if(a.isPanning)
        {
            Dygraph.movePan(b,c,a)
        }
    },
    mouseup:function(b,c,a)
    {
        if(a.isPanning)
        {
            Dygraph.endPan(b,c,a)
        }
    }
}; 

"use strict"; 
var DygraphRangeSelector=function(a)
{
    this.isIE_=/MSIE/.test(navigator.userAgent)&&!window.opera; 
    this.isUsingExcanvas_=a.isUsingExcanvas_; 
    this.dygraph_=a; 
    this.hasTouchInterface_=typeof(TouchEvent)!="undefined"; 
    this.isMobileDevice_=/mobile|android/gi.test(navigator.appVersion); 
    this.createCanvases_(); 
    if(this.isUsingExcanvas_)
    {
        this.createIEPanOverlay_()
    }
    this.createZoomHandles_(); 
    this.initInteraction_()
}; 

DygraphRangeSelector.prototype.addToGraph=function(a,b)
{
    this.layout_=b; 
    this.resize_(); 
    a.appendChild(this.bgcanvas_); 
    a.appendChild(this.fgcanvas_); 
    a.appendChild(this.leftZoomHandle_); 
    a.appendChild(this.rightZoomHandle_)
}; 

DygraphRangeSelector.prototype.renderStaticLayer=function()
{
    this.resize_(); 
    this.drawStaticLayer_()
}; 

DygraphRangeSelector.prototype.renderInteractiveLayer=function()
{
    if(this.isChangingRange_)
    {return}
    this.placeZoomHandles_(); 
    this.drawInteractiveLayer_()
}; 

DygraphRangeSelector.prototype.resize_=function()
{
    function b(d,e)
    {
        d.style.top=e.y+"px"; 
        d.style.left=e.x+"px"; 
        d.width=e.w; 
        d.height=e.h; 
        d.style.width=d.width+"px"; 
        d.style.height=d.height+"px"
    }
    var a=this.layout_.getPlotArea(); 
    var c=this.attr_("axisLabelFontSize")+2*this.attr_("axisTickSize"); 
    this.canvasRect_={x:a.x,y:a.y+a.h+c+4,w:a.w,h:this.attr_("rangeSelectorHeight")};
    b(this.bgcanvas_,this.canvasRect_); 
    b(this.fgcanvas_,this.canvasRect_)
}; 

DygraphRangeSelector.prototype.attr_=function(a)
{
    return this.dygraph_.attr_(a)
}; 
DygraphRangeSelector.prototype.createCanvases_=function()
{
    this.bgcanvas_=Dygraph.createCanvas(); 
    this.bgcanvas_.className="dygraph-rangesel-bgcanvas"; 
    this.bgcanvas_.style.position="absolute"; 
    this.bgcanvas_.style.zIndex=9; 
    this.bgcanvas_ctx_=Dygraph.getContext(this.bgcanvas_); 
    this.fgcanvas_=Dygraph.createCanvas(); 
    this.fgcanvas_.className="dygraph-rangesel-fgcanvas"; 
    this.fgcanvas_.style.position="absolute"; 
    this.fgcanvas_.style.zIndex=9; 
    this.fgcanvas_.style.cursor="default"; 
    this.fgcanvas_ctx_=Dygraph.getContext(this.fgcanvas_)
}; 

DygraphRangeSelector.prototype.createIEPanOverlay_=function()
{
    this.iePanOverlay_=document.createElement("div"); 
    this.iePanOverlay_.style.position="absolute"; 
    this.iePanOverlay_.style.backgroundColor="white"; 
    this.iePanOverlay_.style.filter="alpha(opacity=0)"; 
    this.iePanOverlay_.style.display="none"; 
    this.iePanOverlay_.style.cursor="move"; 
    this.fgcanvas_.appendChild(this.iePanOverlay_)
}; 

DygraphRangeSelector.prototype.createZoomHandles_=function()
{
    var a=new Image(); 
    a.className="dygraph-rangesel-zoomhandle"; 
    a.style.position="absolute"; 
    a.style.zIndex=10; 
    a.style.visibility="hidden"; 
    a.style.cursor="col-resize"; 
    if(/MSIE 7/.test(navigator.userAgent))
    {
        a.width=7; 
        a.height=14; 
        a.style.backgroundColor="white"; 
        a.style.border="1px solid #333333"
    }
    else
    {
        a.width=9; 
        a.height=16; 
        a.src="data:image/png; base64,iVBORw0KGgoAAAANSUhEUgAAAAkAAAAQCAYAAADESFVDAAAAAXNSR0IArs4c6QAAAAZiS0dEANAAzwDP4Z7KegAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAAd0SU1FB9sHGw0cMqdt1UwAAAAZdEVYdENvbW1lbnQAQ3JlYXRlZCB3aXRoIEdJTVBXgQ4XAAAAaElEQVQoz+3SsRFAQBCF4Z9WJM8KCDVwownl6YXsTmCUsyKGkZzcl7zkz3YLkypgAnreFmDEpHkIwVOMfpdi9CEEN2nGpFdwD03yEqDtOgCaun7sqSTDH32I1pQA2Pb9sZecAxc5r3IAb21d6878xsAAAAAASUVORK5CYII="
    }
    if(this.isMobileDevice_)
    {
        a.width*=2; a.height*=2
    }
    this.leftZoomHandle_=a; 
    this.rightZoomHandle_=a.cloneNode(false)
}; 

DygraphRangeSelector.prototype.initInteraction_=function()
{
    var t=this; 
    var u=this.isIE_?document:window; 
    var w=0; 
    var g=null; 
    var j=false; 
    var i=false; 
    var f=!this.isMobileDevice_&&!this.isUsingExcanvas_; 
    var v,s,p,q,d,h,o,m,n,c,k,b; 
    var r,l,a; 
    v=function(B)
    {
        var y=t.dygraph_.xAxisExtremes(); 
        var x=(y[1]-y[0])/t.canvasRect_.w; 
        var A=y[0]+(B.leftHandlePos-t.canvasRect_.x)*x; 
        var z=y[0]+(B.rightHandlePos-t.canvasRect_.x)*x; 
        return[A,z]
    }; 
    b=function(x)
    {
        var y=window.outerWidth/document.documentElement.clientWidth; 
        if(!isNaN(y))
        {
            return x/y
        }
        else
        {return x}
    }; 
    s=function(x)
    {
        Dygraph.cancelEvent(x); 
        j=true; 
        w=x.screenX; 
        g=x.target?x.target:x.srcElement; 
        t.dygraph_.addEvent(u,"mousemove",p); 
        t.dygraph_.addEvent(u,"mouseup",q); 
        t.fgcanvas_.style.cursor="col-resize"; 
        return true
    }; 
    p=function(y)
    {
        if(!j)
        {return false}
        Dygraph.cancelEvent(y); 
        var x=y.screenX-w; 
        if(Math.abs(x)<4||y.screenX==0)
        {return true}
        w=y.screenX; 
        x=b(x); 
        var B=t.getZoomHandleStatus_(); 
        var A; 
        if(g==t.leftZoomHandle_)
        {
            A=B.leftHandlePos+x; 
            A=Math.min(A,B.rightHandlePos-g.width-3); 
            A=Math.max(A,t.canvasRect_.x)
        }
        else
        {
            A=B.rightHandlePos+x; 
            A=Math.min(A,t.canvasRect_.x+t.canvasRect_.w); 
            A=Math.max(A,B.leftHandlePos+g.width+3)}var z=g.width/2; 
            g.style.left=(A-z)+"px"; 
            t.drawInteractiveLayer_(); 
            if(f)
            {
                d()
            }
        return true
    }; 
    q=function(x)
    {
        if(!j)
        {
            return false
        }
        j=false; 
        Dygraph.removeEvent(u,"mousemove",p); 
        Dygraph.removeEvent(u,"mouseup",q); 
        t.fgcanvas_.style.cursor="default"; 
        if(!f)
        {d()}
        return true
    }; 
    d=function()
    {
        try
        {
            var y=t.getZoomHandleStatus_(); 
            t.isChangingRange_=true; 
            if(!y.isZoomed)
            {
                t.dygraph_.doUnzoom_()
            }
            else
            {
                var x=v(y); 
                t.dygraph_.doZoomXDates_(x[0],x[1])
            }
        }
        finally
        {
            t.isChangingRange_=false
        }
    }; 
    h=function(x)
    {
        if(t.isUsingExcanvas_)
        {
            return x.srcElement==t.iePanOverlay_
        }
        else
        {
            var z=t.leftZoomHandle_.getBoundingClientRect(); 
            var y=z.left+z.width/2; 
            z=t.rightZoomHandle_.getBoundingClientRect(); 
            var A=z.left+z.width/2; 
            return(x.clientX>y&&x.clientX<A)
        }
    }; 
    o=function(x)
    {
        if(!i&&h(x)&&t.getZoomHandleStatus_().isZoomed)
        {
            Dygraph.cancelEvent(x); 
            i=true; 
            w=x.screenX; 
            t.dygraph_.addEvent(u,"mousemove",m); 
            t.dygraph_.addEvent(u,"mouseup",n); 
            return true
        }
        return false
    }; 
    m=function(y)
    {
        if(!i)
        {
            return false
        }
        Dygraph.cancelEvent(y); 
        var x=y.screenX-w; 
        if(Math.abs(x)<4)
        {
            return true
        }
        w=y.screenX; 
        x=b(x); 
        var D=t.getZoomHandleStatus_(); 
        var A=D.leftHandlePos; 
        var C=D.rightHandlePos; 
        var B=C-A; 
        if(A+x<=t.canvasRect_.x)
        {
            A=t.canvasRect_.x; 
            C=A+B
        }
        else
        {
            if(C+x>=t.canvasRect_.x+t.canvasRect_.w)
            {
                C=t.canvasRect_.x+t.canvasRect_.w; 
                A=C-B
            }
            else
            {
                A+=x; 
                C+=x
            }
        }
        var z=t.leftZoomHandle_.width/2; 
        t.leftZoomHandle_.style.left=(A-z)+"px"; 
        t.rightZoomHandle_.style.left=(C-z)+"px"; 
        t.drawInteractiveLayer_(); 
        if(f)
        {
            c()
        }
        return true
    }; 
    n=function(x)
    {
        if(!i)
        {
            return false
        }
        i=false; 
        Dygraph.removeEvent(u,"mousemove",m); 
        Dygraph.removeEvent(u,"mouseup",n); 
        if(!f)
        {
            c()
        }
        return true
    }; 
    c=function()
    {
        try
        {
            t.isChangingRange_=true; 
            t.dygraph_.dateWindow_=v(t.getZoomHandleStatus_()); 
            t.dygraph_.drawGraph_(false)
        }
        finally
        {
            t.isChangingRange_=false
        }
    }; 
    k=function(y)
    {
        if(j||i)
        {
            return
        }
        var x=h(y)?"move":"default"; 
        if(x!=t.fgcanvas_.style.cursor)
        {
            t.fgcanvas_.style.cursor=x
        }
    }; 
    r=function(x)
    {
        if(x.type=="touchstart"&&x.targetTouches.length==1)
        {
            if(s(x.targetTouches[0]))
            {
                Dygraph.cancelEvent(x)
            }
        }
        else
        {
            if(x.type=="touchmove"&&x.targetTouches.length==1)
            {
                if(p(x.targetTouches[0]))
                {
                    Dygraph.cancelEvent(x)
                }
            }
            else
            {
                q(x)
            }
        }
    }; 
    l=function(x)
    {
        if(x.type=="touchstart"&&x.targetTouches.length==1)
        {
            if(o(x.targetTouches[0]))
            {
                Dygraph.cancelEvent(x)
            }
        }
        else
        {
            if(x.type=="touchmove"&&x.targetTouches.length==1)
            {
                if(m(x.targetTouches[0]))
                {
                    Dygraph.cancelEvent(x)
                }
            }
            else
            {
                n(x)
            }
        }
    }; 
    a=function(x,y)
    {
        var A=["touchstart","touchend","touchmove","touchcancel"]; 
        for(var z=0; z<A.length; z++)
        {
            t.dygraph_.addEvent(x,A[z],y)
        }
    }; 
    this.dygraph_.attrs_.interactionModel=Dygraph.Interaction.dragIsPanInteractionModel; 
    this.dygraph_.attrs_.panEdgeFraction=0.0001; 
    var e=window.opera?"mousedown":"dragstart"; 
    this.dygraph_.addEvent(this.leftZoomHandle_,e,s); 
    this.dygraph_.addEvent(this.rightZoomHandle_,e,s); 
    if(this.isUsingExcanvas_)
    {
        this.dygraph_.addEvent(this.iePanOverlay_,"mousedown",o)
    }
    else
    {
        this.dygraph_.addEvent(this.fgcanvas_,"mousedown",o); 
        this.dygraph_.addEvent(this.fgcanvas_,"mousemove",k)
    }
    if(this.hasTouchInterface_)
    {
        a(this.leftZoomHandle_,r); 
        a(this.rightZoomHandle_,r); 
        a(this.fgcanvas_,l)
    }
}; 

DygraphRangeSelector.prototype.drawStaticLayer_=function()
{
    var a=this.bgcanvas_ctx_; 
    a.clearRect(0,0,this.canvasRect_.w,this.canvasRect_.h); 
    try
    {
        this.drawMiniPlot_()
    }
    catch(b)
    {
        Dygraph.warn(b)
    }
    var c=0.5; 
    this.bgcanvas_ctx_.lineWidth=1; 
    a.strokeStyle="gray"; 
    a.beginPath(); 
    a.moveTo(c,c); 
    a.lineTo(c,this.canvasRect_.h-c); 
    a.lineTo(this.canvasRect_.w-c,this.canvasRect_.h-c); 
    a.lineTo(this.canvasRect_.w-c,c); 
    a.stroke()
}; 

DygraphRangeSelector.prototype.drawMiniPlot_=function()
{
    var f=this.attr_("rangeSelectorPlotFillColor"); 
    var k=this.attr_("rangeSelectorPlotStrokeColor"); 
    if(!f&&!k)
    {return}
    var c=this.computeCombinedSeriesAndLimits_(); 
    var r=c.yMax-c.yMin; 
    var d=this.bgcanvas_ctx_; 
    var j=0.5; 
    var m=this.dygraph_.xAxisExtremes(); 
    var o=Math.max(m[1]-m[0],1e-30); 
    var n=(this.canvasRect_.w-j)/o; 
    var q=(this.canvasRect_.h-j)/r; 
    var b=this.canvasRect_.w-j; 
    var a=this.canvasRect_.h-j; 
    d.beginPath(); 
    d.moveTo(j,a); 
    for(var g=0; g<c.data.length; g++)
    {
        var e=c.data[g]; 
        var l=(e[0]-m[0])*n; 
        var p=a-(e[1]-c.yMin)*q; 
        if(isFinite(l)&&isFinite(p))
        {
            d.lineTo(l,p)
        }
    }
    d.lineTo(b,a); 
    d.closePath(); 
    if(f)
    {
        var h=this.bgcanvas_ctx_.createLinearGradient(0,0,0,a); 
        h.addColorStop(0,"white"); 
        h.addColorStop(1,f); 
        this.bgcanvas_ctx_.fillStyle=h; 
        d.fill()
    }
    if(k)
    {
        this.bgcanvas_ctx_.strokeStyle=k; 
        this.bgcanvas_ctx_.lineWidth=1.5; 
        d.stroke()
    }
}; 
DygraphRangeSelector.prototype.computeCombinedSeriesAndLimits_=function()
{
    var c=this.dygraph_.rawData_; 
    var l=this.attr_("logscale"); 
    var a=[]; 
    var n; 
        var b; 
        var m; 
        var f,g,h; 
        var o,u; 
        for(f=0; f<c.length; f++)
        {
            if(c[f].length>1&&c[f][1]!==null)
            {
                m=typeof c[f][1]!="number"; 
                if(m){n=[]; 
                b=[]; 
                for(h=0; h<c[f][1].length; h++)
                {
                    n.push(0); 
                    b.push(0)
                }
            }
            break
        }
    }
    for(f=0; f<c.length; f++)
    {
        var d=c[f]; 
        o=d[0]; 
        if(m)
        {
            for(h=0; h<n.length; h++)
            {
                n[h]=b[h]=0
            }
        }
        else
        {
            n=b=0
        }
        for(g=1; g<d.length; g++)
        {
            if(this.dygraph_.visibility()[g-1])
            {
                var p; 
                if(m){for(h=0; h<n.length; h++)
                {
                    p=d[g][h]; 
                    if(p===null||isNaN(p))
                    {continue}
                    n[h]+=p; 
                    b[h]++
                }
            }
            else
            {
                p=d[g]; 
                if(p===null||isNaN(p))
                {continue}
                n+=p; 
                b++
            }
        }
    }
    if(m)
    {
        for(h=0; h<n.length; h++)
        {
            n[h]/=b[h]}u=n.slice(0)
        }
        else
        {
            u=n/b
        }
        a.push([o,u])
    }
    a=this.dygraph_.rollingAverage(a,this.dygraph_.rollPeriod_); 
    if(typeof a[0][1]!="number")
    {
        for(f=0; f<a.length; f++)
        {
            u=a[f][1]; 
            a[f][1]=u[0]
        }
    }
    var s=Number.MAX_VALUE; 
    var r=-Number.MAX_VALUE; 
    for(f=0; f<a.length; f++)
    {
        u=a[f][1]; 
        if(u!==null&&isFinite(u)&&(!l||u>0))
        {
            s=Math.min(s,u); 
            r=Math.max(r,u)
        }
    }
    var e=0.25; 
    if(l)
    {
        r=Dygraph.log10(r); 
        r+=r*e; 
        s=Dygraph.log10(s); 
        for(f=0; f<a.length; f++)
        {
            a[f][1]=Dygraph.log10(a[f][1])
        }
    }
    else
    {
        var q; 
        var t=r-s; 
        if(t<=Number.MIN_VALUE)
        {
            q=r*e
        }
        else
        {
            q=t*e
        }
        r+=q; 
        s-=q
    }
    return {data:a,yMin:s,yMax:r}
}; 
DygraphRangeSelector.prototype.placeZoomHandles_=function()
{
    var g=this.dygraph_.xAxisExtremes(); 
    var i=this.dygraph_.xAxisRange(); 
    var h=g[1]-g[0]; 
    var d=Math.max(0,(i[0]-g[0])/h); 
    var f=Math.max(0,(g[1]-i[1])/h); 
    var c=this.canvasRect_.x+this.canvasRect_.w*d; 
    var e=this.canvasRect_.x+this.canvasRect_.w*(1-f); 
    var b=Math.max(this.canvasRect_.y,this.canvasRect_.y+(this.canvasRect_.h-this.leftZoomHandle_.height)/2); 
    var a=this.leftZoomHandle_.width/2; 
    this.leftZoomHandle_.style.left=(c-a)+"px"; 
    this.leftZoomHandle_.style.top=b+"px"; 
    this.rightZoomHandle_.style.left=(e-a)+"px"; 
    this.rightZoomHandle_.style.top=this.leftZoomHandle_.style.top; 
    this.leftZoomHandle_.style.visibility="visible"; 
    this.rightZoomHandle_.style.visibility="visible"
}; 

DygraphRangeSelector.prototype.drawInteractiveLayer_=function()
{
    var a=this.fgcanvas_ctx_; 
    a.clearRect(0,0,this.canvasRect_.w,this.canvasRect_.h); 
    var d=1; 
    var f=this.canvasRect_.w-d; 
    var b=this.canvasRect_.h-d; 
    var g=this.getZoomHandleStatus_(); 
    a.strokeStyle="black"; 
    if(!g.isZoomed)
    {
        a.beginPath(); 
        a.moveTo(d,d); 
        a.lineTo(d,b); 
        a.lineTo(f,b); 
        a.lineTo(f,d); 
        a.stroke(); 
        if(this.iePanOverlay_)
        {
            this.iePanOverlay_.style.display="none"
        }
    }
    else
    {
        var c=Math.max(d,g.leftHandlePos-this.canvasRect_.x); 
        var e=Math.min(f,g.rightHandlePos-this.canvasRect_.x); 
        a.fillStyle="rgba(240, 240, 240, 0.6)"; 
        a.fillRect(0,0,c,this.canvasRect_.h); 
        a.fillRect(e,0,this.canvasRect_.w-e,this.canvasRect_.h); 
        a.beginPath(); 
        a.moveTo(d,d); 
        a.lineTo(c,d); 
        a.lineTo(c,b); 
        a.lineTo(e,b); 
        a.lineTo(e,d); 
        a.lineTo(f,d); 
        a.stroke(); 
        if(this.isUsingExcanvas_)
        {
            this.iePanOverlay_.style.width=(e-c)+"px"; 
            this.iePanOverlay_.style.left=c+"px"; 
            this.iePanOverlay_.style.height=b+"px"; 
            this.iePanOverlay_.style.display="inline"
        }
    }
}; 

DygraphRangeSelector.prototype.getZoomHandleStatus_=function()
{
    var a=this.leftZoomHandle_.width/2; 
    var b=parseInt(this.leftZoomHandle_.style.left,10)+a; 
    var c=parseInt(this.rightZoomHandle_.style.left,10)+a; 
    return {leftHandlePos:b,rightHandlePos:c,isZoomed:(b-1>this.canvasRect_.x||c+1<this.canvasRect_.x+this.canvasRect_.w)}
}; 

"use strict"; 
Dygraph.numericLinearTicks=function(c,d,h,g,e,i)
{
    var f=function(a)
    {
        if(a==="logscale"){return false}return g(a)
    }; 
    return Dygraph.numericTicks(c,d,h,f,e,i)
}; 
Dygraph.numericTicks=function(c,e,E,C,g,M)
{
    var F=C("pixelsPerLabel"); 
    var J=[]; 
    var m,p,K,B; 
    if(M)
    {
        for(m=0; m<M.length; m++)
        {
            J.push({v:M[m]})
        }
    }
    else
    {
    if(C("logscale"))
    {
        B=Math.floor(E/F); 
        var y=Dygraph.binarySearch(c,Dygraph.PREFERRED_LOG_TICK_VALUES,1); 
        var x=Dygraph.binarySearch(e,Dygraph.PREFERRED_LOG_TICK_VALUES,-1); 
        if(y==-1)
        {
            y=0
        }
        if(x==-1)
        {
            x=Dygraph.PREFERRED_LOG_TICK_VALUES.length-1}var u=null; 
            if(x-y>=B/4)
            {
                for(var o=x; o>=y; o--)
                {
                    var L=Dygraph.PREFERRED_LOG_TICK_VALUES[o]; 
                    var D=Math.log(L/c)/Math.log(e/c)*E; 
                    var I={v:L}; 
                    if(u===null)
                    {
                        u={tickValue:L,pixel_coord:D}
                    }
                    else
                    {
                        if(Math.abs(D-u.pixel_coord)>=F)
                        {
                            u={tickValue:L,pixel_coord:D}
                        }
                        else
                        {
                            I.label=""
                        }
                    }
                    J.push(I)
                }
                J.reverse()
            }
        }
        if(J.length===0)
        {
            var s=C("labelsKMG2"); 
            var z; 
            if(s)
            {
                z=[1,2,4,8]
            }
            else
            {
                z=[1,2,5]
            }
            var G,v,l; 
            for(m=-10; m<50; m++)
            {
                var f; 
                if(s)
                {
                    f=Math.pow(16,m)
                }
                else
                {
                    f=Math.pow(10,m)
                }
                var H=0; 
                for(p=0; p<z.length; p++)
                {
                    G=f*z[p]; 
                    v=Math.floor(c/G)*G; 
                    l=Math.ceil(e/G)*G; 
                    B=Math.abs(l-v)/G; 
                    H=E/B; 
                    if(H>F)
                    {break}
                }
                if(H>F)
                {break}
            }
            if(v>l)
            {G*=-1}
            for(m=0; m<B; m++)
            {
                K=v+m*G; 
                J.push({v:K})
            }
        }
    }
    var q; 
    var r=[]; 
    var w=[]; 
    if(C("labelsKMB"))
    {
        q=1000; 
        r=["K","M","B","T","Q"]
    }
    if(C("labelsKMG2"))
    {
        if(q)
        {
            Dygraph.warn("Setting both labelsKMB and labelsKMG2. Pick one!")}q=1024; 
            r=["k","M","G","T","P","E","Z","Y"]; 
            w=["m","u","n","p","f","a","z","y"]
        }
        var h=C("axisLabelFormatter"); 
        for(m=0; m<J.length; m++)
        {
            if(J[m].label!==undefined)
            {continue}
            K=J[m].v; 
            var d=Math.abs(K); 
            var t=h(K,0,C,g); 
            if(r.length>0)
            {
                var A=Math.pow(q,r.length); 
                for(p=r.length-1; p>=0; p--,A/=q)
                {
                    if(d>=A)
                    {   
                        t=Dygraph.round_(K/A,C("digitsAfterDecimal"))+r[p]; 
                        break
                    }
                }
            }
            if(C("labelsKMG2"))
            {
                K=String(K.toExponential()); 
                if(K.split("e-").length===2&&K.split("e-")[1]>=3&&K.split("e-")[1]<=24)
                {
                    if(K.split("e-")[1]%3>0)
                    {
                        t=Dygraph.round_(K.split("e-")[0]/Math.pow(10,(K.split("e-")[1]%3)),C("digitsAfterDecimal"))
                    }
                    else
                    {
                        t=Number(K.split("e-")[0]).toFixed(2)
                    }
                    t+=w[Math.floor(K.split("e-")[1]/3)-1]
                }
            }
            J[m].label=t
        }
        return J
    }; 

Dygraph.dateTicker=function(c,d,h,g,f,i)
{
    var e=Dygraph.pickDateTickGranularity(c,d,h,g); 
    if(e>=0)
    {
        return Dygraph.getDateAxis(c,d,e,g,f)
    }
    else
    {
        return[]
    }
}; 

Dygraph.SECONDLY=0; 
Dygraph.TWO_SECONDLY=1; 
Dygraph.FIVE_SECONDLY=2; 
Dygraph.TEN_SECONDLY=3; 
Dygraph.THIRTY_SECONDLY=4; 
Dygraph.MINUTELY=5; 
Dygraph.TWO_MINUTELY=6; 
Dygraph.FIVE_MINUTELY=7; 
Dygraph.TEN_MINUTELY=8; 
Dygraph.THIRTY_MINUTELY=9; 
Dygraph.HOURLY=10; 
Dygraph.TWO_HOURLY=11; 
Dygraph.SIX_HOURLY=12; 
Dygraph.DAILY=13; 
Dygraph.WEEKLY=14; 
Dygraph.MONTHLY=15; 
Dygraph.QUARTERLY=16; 
Dygraph.BIANNUAL=17; 
Dygraph.ANNUAL=18; 
Dygraph.DECADAL=19; 
Dygraph.CENTENNIAL=20; 
Dygraph.NUM_GRANULARITIES=21; 
Dygraph.SHORT_SPACINGS=[]; 
Dygraph.SHORT_SPACINGS[Dygraph.SECONDLY]=1000*1; 
Dygraph.SHORT_SPACINGS[Dygraph.TWO_SECONDLY]=1000*2; 
Dygraph.SHORT_SPACINGS[Dygraph.FIVE_SECONDLY]=1000*5; 
Dygraph.SHORT_SPACINGS[Dygraph.TEN_SECONDLY]=1000*10; 
Dygraph.SHORT_SPACINGS[Dygraph.THIRTY_SECONDLY]=1000*30; 
Dygraph.SHORT_SPACINGS[Dygraph.MINUTELY]=1000*60; 
Dygraph.SHORT_SPACINGS[Dygraph.TWO_MINUTELY]=1000*60*2; 
Dygraph.SHORT_SPACINGS[Dygraph.FIVE_MINUTELY]=1000*60*5; 
Dygraph.SHORT_SPACINGS[Dygraph.TEN_MINUTELY]=1000*60*10; 
Dygraph.SHORT_SPACINGS[Dygraph.THIRTY_MINUTELY]=1000*60*30; 
Dygraph.SHORT_SPACINGS[Dygraph.HOURLY]=1000*3600; 
Dygraph.SHORT_SPACINGS[Dygraph.TWO_HOURLY]=1000*3600*2; 
Dygraph.SHORT_SPACINGS[Dygraph.SIX_HOURLY]=1000*3600*6; 
Dygraph.SHORT_SPACINGS[Dygraph.DAILY]=1000*86400; 
Dygraph.SHORT_SPACINGS[Dygraph.WEEKLY]=1000*604800; 
Dygraph.PREFERRED_LOG_TICK_VALUES=function()
{
    var e=[]; 
    for(var b=-39; b<=39; b++)
    {
        var c=Math.pow(10,b); 
        for(var a=1; a<=9; a++)
        {
            var d=c*a; 
            e.push(d)
        }
    }
    return e
}(); 

Dygraph.pickDateTickGranularity=function(c,d,h,g)
{
    var j=g("pixelsPerLabel"); 
    for(var e=0; e<Dygraph.NUM_GRANULARITIES; e++)
    {
        var f=Dygraph.numDateTicks(c,d,e); 
        if(h/f>=j)
        {
            return e
        }
    }
    return -1
}; 

Dygraph.numDateTicks=function(g,a,b)
{
    if(b<Dygraph.MONTHLY)
    {
        var f=Dygraph.SHORT_SPACINGS[b]; 
        return Math.floor(0.5+1*(a-g)/f)
    }
    else
    {
        var h=1; 
        var d=12; 
        if(b==Dygraph.QUARTERLY)
        {
            d=3
        }
        if(b==Dygraph.BIANNUAL)
        {
            d=2
        }
        if(b==Dygraph.ANNUAL)
        {d=1}
        if(b==Dygraph.DECADAL){d=1; h=10}
        if(b==Dygraph.CENTENNIAL)
        {d=1; h=100}
        var c=365.2524*24*3600*1000; 
        var e=1*(a-g)/c; 
        return Math.floor(0.5+1*e*d/h)
    }
}; 

Dygraph.getDateAxis=function(r,e,l,p,c)
{
    var h=p("axisLabelFormatter"); 
    var v=[]; 
    var u; 
    if(l<Dygraph.MONTHLY)
    {
        var q=Dygraph.SHORT_SPACINGS[l]; 
        var k=q/1000; 
        var a=new Date(r); 
        a.setMilliseconds(0); 
        var w; 
        if(k<=60)
        {
            w=a.getSeconds(); 
            a.setSeconds(w-w%k)
        }
        else
        {
            a.setSeconds(0); 
            k/=60; 
            if(k<=60)
            {
                w=a.getMinutes(); 
                a.setMinutes(w-w%k)
            }
            else
            {
                a.setMinutes(0); 
                k/=60; 
                if(k<=24)
                {
                    w=a.getHours(); 
                    a.setHours(w-w%k)
                }
                else
                {
                    a.setHours(0); 
                    k/=24; 
                    if(k==7)
                    {
                        a.setDate(a.getDate()-a.getDay())
                    }
                }
            }
        }
        r=a.getTime(); 
        for(u=r; u<=e; u+=q)
        {
            v.push({v:u,label:h(new Date(u),l,p,c)})
        }
    }
    else
    {
        var o; 
        var y=1; 
        if(l==Dygraph.MONTHLY)
        {
            o=[0,1,2,3,4,5,6,7,8,9,10,11]
        }
        else
        {
            if(l==Dygraph.QUARTERLY)
            {
                o=[0,3,6,9]
            }
            else
            {
                if(l==Dygraph.BIANNUAL)
                {
                    o=[0,6]
                }
                else
                {
                    if(l==Dygraph.ANNUAL)
                    {
                        o=[0]
                    }
                    else
                    {
                        if(l==Dygraph.DECADAL)
                        {o=[0]; y=10}
                        else
                        {
                            if(l==Dygraph.CENTENNIAL)
                            {o=[0]; y=100}
                            else
                            {Dygraph.warn("Span of dates is too long")}
                        }
                    }
                }
            }
        }
        var s=new Date(r).getFullYear(); 
        var f=new Date(e).getFullYear(); 
        var z=Dygraph.zeropad; 
        for(var m=s; m<=f; m++)
        {
            if(m%y!==0)
            {continue}
            for(var n=0; n<o.length; n++)
            {
                var b=m+"/"+z(1+o[n])+"/01"; 
                u=Dygraph.dateStrToMillis(b); 
                if(u<r||u>e)
                {continue}
                v.push({v:u,label:h(new Date(u),l,p,c)})
            }
        }
    }
    return v
}; 

Dygraph.DEFAULT_ATTRS.axes.x.ticker=Dygraph.dateTicker; 
Dygraph.DEFAULT_ATTRS.axes.y.ticker=Dygraph.numericTicks; 
Dygraph.DEFAULT_ATTRS.axes.y2.ticker=Dygraph.numericTicks; 
Dygraph.Plugins={}; 
Dygraph.Plugins.Legend=(function()
{
    var d=function()
    {
        this.legend_div_=null; 
        this.is_generated_div_=false
    }; 
    d.prototype.toString=function()
    {return"Legend Plugin"}; 
    d.prototype.activate=function(j)
    {
        var f; 
        var h=j.getOption("labelsDivWidth"); 
        var m=j.getOption("labelsDiv"); 
        if(m&&null!==m)
        {
            if(typeof(m)=="string"||m instanceof String)
            {
                f=document.getElementById(m)
            }
            else
            {f=m}
        }
        else
        {
            var k={position:"absolute",fontSize:"14px",zIndex:10,width:h+"px",top:"0px",left:(j.size().width-h-2)+"px",background:"white",lineHeight:"normal",textAlign:"left",overflow:"hidden"}; 
            Dygraph.update(k,j.getOption("labelsDivStyles")); 
            f=document.createElement("div"); 
            f.className="dygraph-legend"; 
            for(var l in k)
            {
                if(!k.hasOwnProperty(l))
                {continue}
                try
                {
                    f.style[l]=k[l]
                }
                catch(i)
                {
                    this.warn("You are using unsupported css properties for your browser in labelsDivStyles")
                }
            }
            j.graphDiv.appendChild(f); 
            this.is_generated_div_=true
        }
        this.legend_div_=f; 
        return {select:this.select,deselect:this.deselect,predraw:this.predraw,drawChart:this.drawChart}
    }; 
    var a=function(e)
    {
        var g=document.createElement("span"); 
        g.setAttribute("style","margin: 0; padding: 0 0 0 1em; border: 0;"); 
        e.appendChild(g); 
        var f=g.offsetWidth; 
        e.removeChild(g); 
        return f
    }; 
    d.prototype.select=function(f)
    {
        var j=f.selectedX; 
        var i=f.selectedPoints; 
        var h=a(this.legend_div_); 
        var g=c(f.dygraph,j,i,h); 
        this.legend_div_.innerHTML=g
    }; 
    d.prototype.deselect=function(f)
    {
        var h=a(this.legend_div_); 
        var g=c(f.dygraph,undefined,undefined,h); 
        this.legend_div_.innerHTML=g
    }; 
    d.prototype.drawChart=function(f)
    {
        this.deselect(f)}; 
        d.prototype.predraw=function(g)
        {
            if(!this.is_generated_div_)
            {return}
            g.dygraph.graphDiv.appendChild(this.legend_div_); 
            var f=g.dygraph.plotter_.area; 
            this.legend_div_.style.left=f.x+f.w-g.dygraph.getOption("labelsDivWidth")-1+"px"; 
            this.legend_div_.style.top=f.y+"px"
        }; 
        d.prototype.destroy=function(){this.legend_div_=null
    }; 
    var c=function(k,y,s,q)
    {
        if(k.getOption("showLabelsOnHighlight")!==true)
        {return""}
        var m,t,n,e,h,w; 
        var o=k.getLabels(); 
        if(typeof(y)==="undefined")
        {
            if(k.getOption("legend")!="always")
            {return""}
            t=k.getOption("labelsSeparateLines"); 
            m=""; 
            for(n=1; n<o.length; n++)
            {
                var u=k.getPropertiesForSeries(o[n]); 
                if(!u.visible)
                {continue}
                if(m!=="")
                {
                    m+=(t?"<br/>":" ")
                }
                w=k.getOption("strokePattern",o[n]); h=b(w,u.color,q); m+="<span style='font-weight: bold; color: "+u.color+"; '>"+h+" "+o[n]+"</span>"
            }
            return m
        }
        var z=k.optionsViewForAxis_("x"); 
        var A=z("valueFormatter"); 
        m=A(y,z,o[0],k); 
        if(m!=="")
        {
            m+=":"
        }
        var C=[]; 
        var p=k.numAxes(); 
        for(n=0; n<p; n++)
        {
            C[n]=k.optionsViewForAxis_("y"+(n?1+n:""))
        }
        var v=k.getOption("labelsShowZeroValues"); 
        t=k.getOption("labelsSeparateLines"); 
        var l=k.getHighlightSeries(); 
        for(n=0; n<s.length; n++)
        {
            var r=s[n]; 
            if(r.yval===0&&!v)
            {continue}
            if(!Dygraph.isOK(r.canvasy))
            {continue}
            if(t)
            {m+="<br/>"}
            var u=k.getPropertiesForSeries(r.name); 
            var B=C[u.axis-1]; 
            var j=B("valueFormatter"); 
            var D=j(r.yval,B,r.name,k); 
            var f=(r.name==l)?" class='highlight'":""; 
            m+="<span"+f+"> <b><span style='color: "+u.color+"; '>"+r.name+"</span></b>:"+D+"</span>"
        }
        return m
    }; 
    var b=function(r,e,o)
    {
        var h=(/MSIE/.test(navigator.userAgent)&&!window.opera); if(h)
        {
            return"&mdash; "
        }
        if(!r||r.length<=1)
        {
            return'<div style="display: inline-block;  position: relative;  bottom: .5ex;  padding-left: 1em;  height: 1px;  border-bottom: 2px solid '+e+'; "></div>'
        }
        var g,k,p,m; 
        var s=0,q=0; 
        var n=[]; 
        var l; 
        for(g=0; g<=r.length; g++)
        {
            s+=r[g%r.length]
        }
        l=Math.floor(o/(s-r[0])); 
        if(l>1)
        {
            for(g=0; g<r.length; g++)
            {
                n[g]=r[g]/o}q=n.length
            }
            else
            {
                l=1; 
                for(g=0; g<r.length; g++)
                {
                    n[g]=r[g]/s}q=n.length+1
                }
                var f=""; 
                for(k=0; k<l; k++)
                {
                    for(g=0; g<q; g+=2)
                    {
                        p=n[g%n.length]; 
                        if(g<r.length)
                        {
                            m=n[(g+1)%n.length]
                        }
                        else
                        {m=0}
                        f+='<div style="display: inline-block;  position: relative;  bottom: .5ex;  margin-right: '+m+"em;  padding-left: "+p+"em;  height: 1px;  border-bottom: 2px solid "+e+'; "></div>'
                    }
                }
                return f
            }; 
            return d
        })(); 
        Dygraph.PLUGINS.push(Dygraph.Plugins.Legend); 
        var point_=function(a)
        {
            this.time=null; 
            this.distance=null; 
            this.velocity=null; 
            this.latitde=null; 
            this.longitude=null; 
            this.index=null; 
            for(key in a)
            {
                this[key]=a[key]
            }
        }; 
        var pointsKeyList=["time","distance","velocity","latitude","longitude","index"]; 
        var arrayOfObjects=Array; 
        arrayOfObjects.prototype.sortByObj=function(a)
        {
            return this.sort(objectSort(a))
        }; 
        function objectSort(a)
        {
            return function(c,d){return(c[a]<d[a])?-1:(c[a]>d[a])?1:0}
        }
        function dataLayout(a,c,d,e,b)
        {
            this.name=a; 
            if(b===undefined)
            {
                b=nextAvailablePosition()
            }
            this.position=b; 
            this.size=10; 
            this.pMin=0; 
            this.pMax=1; 
            this.vMin=c; 
            this.vMax=d; 
            this.suffix=e; 
            this.enabled=true; 
            this.valueToGraph=function(h)
            {
                var g=((+this.pMax)-(+this.pMin))/((+this.vMax)-(+this.vMin)); 
                var f=(((+h)-(+this.vMin))*(+g))+(+this.pMin); 
                return f
            },
            this.graphToValue=function(h)
            {
                var g=((+this.vMax)-(+this.vMin))/((+this.pMax)-(+this.pMin)); 
                var f=(((+h)-(+this.pMin))*(+g))+(+this.vMin); 
                return f
            }
        }
        var prefs={layout:{},settings:{},graph:{},trackMap:{}}; 
        function populateGraphPosition()
        {
            var d=[]; 
            var a; 
            for(a in prefs.layout)
            {
                d.push(prefs.layout[a]); 
                d[d.length-1].index=a
            }
            d.sortByObj("position"); 
            a=d.length; 
            var b=0; while(a--)
            {
                if(prefs.layout[d[a].index].enabled)
                {
                    if((a<d.length-1)&&(prefs.layout[d[a].index].position===prefs.layout[d[a+1].index].position)&&(prefs.layout[d[a+1].index].enabled==true))
                    {
                        prefs.layout[d[a].index].pMin=prefs.layout[d[a+1].index].pMin; 
                        prefs.layout[d[a].index].pMax=prefs.layout[d[a+1].index].pMax
                    }
                    else
                    {
                        var c=prefs.layout[d[a].index].size; 
                        prefs.layout[d[a].index].pMin=b; 
                        b+=c; 
                        prefs.layout[d[a].index].pMax=b
                    }
                }
            }
        }
        function nextAvailablePosition()
        {
            var b=0; 
            for(var a in prefs.layout)
            {
                if(prefs.layout.hasOwnProperty(a))
                {
                    b=Math.max(b,prefs.layout[a].position)
                }
            }
            return +b+1
        }
        prefs.layout.distance=new dataLayout("Distance",13,40); 
        prefs.layout.velocity=new dataLayout("Velocity",13,40); 
        prefs.layout["5"]=new dataLayout("Accel X",-2,2); 
        prefs.layout["6"]=new dataLayout("Accel Y",-2,2); 
        prefs.graph.strokeWidth=2; prefs.graph.dotSize=5; 
        prefs.trackMap.strokeWidth=2; 
        prefs.trackMap.dotSize=5; 
        var lapData=function(b)
        {
            for(var a in b)
            {
                if(this.master.idx.indexOf(a)<0)
                {
                    this.getLap(a)
                }
            }
            this.prune(b)
        }; 
        lapData.prototype.master=
        {
            idx:[],points:[],data:[],prefs:[]
        }; 
        lapData.prototype.waiting=0; 
        lapData.prototype.getPage=function(c,b)
        {
            this.waiting++; 
            console.log("this.waiting ",this.waiting); 
            var a=this; 
            var d=new XMLHttpRequest(); 
            d.onreadystatechange=function()
            {
                if(d.readyState==4)
                {
                    a.waiting--; 
                    console.log("this.waiting ",a.waiting); 
                    if(d.status===200||d.status===0)
                    {
                        var e=d.responseText; 
                        b.call(a,e,lap)
                    }
                    else
                    {
                        if(a.waiting==0)
                        {
                            updateGraph(); 
                            spinner.stop()
                        }
                    }
                }
            }; 
            d.open("GET",c,true); 
            d.send(null)
        }; 
        lapData.prototype.getLap=function(b)
        {
            if(!this.waiting)
            {
                spinner.spin(document.getElementById("renderArea"))
            }
            var a=this; 
            var c=b.split(",")[0]; 
            this.getPage("getdata?table=points&parentId="+b+"&refLap="+c,a.getLap_cb)
        }; 
        lapData.prototype.getLap_cb=function(a)
        {
            if(a!="")
            {
                var c=toArrayOfObjects(a); 
                for(var b in c)
                {
                    if(c.hasOwnProperty(b))
                    {
                        this.insertToMaster(c[b],b)
                    }
                }
            }
            if(this.waiting==0)
            {
                updateGraph(); 
                spinner.stop()
            }
        }; 
        lapData.prototype.getData=function(c,b)
        {
            if(!this.waiting)
            {
                spinner.spin(document.getElementById("renderArea"))
            }
            var a=this; 
            this.getPage("getdata?table=data&lapId="+c+"&dataType="+b,a.getData_cb)
        }; 
        lapData.prototype.getData_cb=function(a)
        {
            if(a!="")
            {
                var c=toArrayOfObjects(a); 
                for(var b in c)
                {
                    if(c.hasOwnProperty(b))
                    {
                        this.insertToMaster(c[b],b)
                    }
                }
            }
            if(this.waiting==0)
            {
                updateGraph(); 
                spinner.stop()
            }
        }; 
        lapData.prototype.insertToMaster=function(i,h)
        {
            console.time("insertToMaster"); 
            var g="gps"; 
            if(isNaN(i[0].latitude))
            {
                g="data"
            }
            if(this.master.idx.indexOf(h)<0&&g==="gps")
            {
                this.master.idx.push(h); 
                this.master.points.push(i); 
                this.master.data.push([])
            }
            else
            {
                if(g==="data")
                {
                    if(this.master.idx.indexOf(h)<0)
                    {
                        this.master.idx.push(h)
                    }
                    var j=this.master.idx.indexOf(h); 
                    this.master.data.splice(j,1,i); 
                    var c=0; 
                    var a=0; 
                    for(var l=0; l<this.master.data[j].length; l++)
                    {
                        if(isNaN(this.master.data[j][l].distance))
                        {
                            var k=this.master.data[j][l].time; 
                            var d=null; 
                            var b=null; 
                            for(var m=c; m<this.master.points[j].length; m++)
                            {
                                if(this.master.points[j][m].time<k)
                                {
                                    d=this.master.points[j][m]; 
                                    c=m; 
                                    continue
                                }
                                if(this.master.points[j][m].time===k)
                                {
                                    d=this.master.points[j][m]; 
                                    b=this.master.points[j][m]; 
                                    c=m; 
                                    a=m; 
                                    break
                                }
                                if(this.master.points[j][m].time>k)
                                {
                                    b=this.master.points[j][m]; 
                                    a=m; 
                                    break
                                }
                            }
                            if(d===null||b===null)
                            {
                                this.master.data[j].splice(l,1); 
                                l--; 
                                continue
                            }
                            var n=b.time-d.time; 
                            if(n===0)
                            {
                                this.master.data[j][l].distance=d.distance; 
                                continue
                            }
                            var e=b.distance-d.distance; 
                            var p=this.master.data[j][l].time-d.time; 
                            var o=p/n; 
                            var f=e*o; 
                            this.master.data[j][l].distance=d.distance+f
                        }
                    }
                }
            }
            console.timeEnd("insertToMaster")
        }; 
lapData.prototype.removeFromMaster=function(b)
{
    var a=this.master.idx.indexOf(b); 
    if(a>=0)
    {
        this.master.idx.splice(b,1); 
        this.master.points.splice(b,1); 
        this.master.data.splice(b,1)
    }
}; 

lapData.prototype.header=function()
{
    var a=[]; 
    a.push("Distance"); 
    for(var b=0; b<this.master.idx.length; b++)
    {
        a.push("Lap "+this.master.idx[b])
    }
    a.push("X"); 
    a.push("Y"); 
    a.push("Index"); 
    return a
}; 

lapData.prototype.mergeLaps=function(f)
{
    console.time("mergeLaps"); 
    var p=[]; 
    var o=this.master.points.length; 
    var n=f.length-1; 
    var a=[[],[null]]; 
    for(var d=1; d<(o*n); d++)
    {
        a.push(a[d].concat(null))
    }
    for(var h=0; h<o; h++)
    {
        var m=this.master.points; 
        for(var d=0; d<2; d++)
        {
            var k=m[h].length; 
            for(var r=1; r<k; r++)
            {
                var q=[]; 
                if(isNaN(m[h][r][f[0]]))
                {
                    console.log("Debug: invalid first row found -",m[h][r][f[0]]); 
                    continue
                }
                q.push(m[h][r][f[0]]); 
                q=q.concat(a[h*n]); 
                for(var g=1; g<f.length; g++)
                {
                    var e=f[g]; 
                    var s=m[h][r][e]; 
                    if(prefs.layout[e])
                    {
                        s=prefs.layout[e].valueToGraph(s)
                    }
                    if(isNaN(s))
                    {
                        s=null
                    }
                    q.push(s)
                }
                q=q.concat(a[(o-h-1)*n]); 
                var b=["longitude","latitude","index"]; 
                for(var g=0; g<b.length; g++)
                {
                    var e=b[g]; 
                    var s=m[h][r][e]; 
                    if(isNaN(s))
                    {s=null}
                    q.push(s)
                }
                p.push(q)
            }
            m=this.master.data
        }
    }
    console.time("sort"); 
    p.sort(); 
    console.timeEnd("sort"); 
    var c=[]; 
    c.push(f[0]); 
    for(var j=0; j<o; j++)
    {
        for(var g=1; g<f.length; g++)
        {
            var l=this.master.idx[j]; 
            c.push(l+" "+f[g])
        }
    }
    c.push("X"); 
    c.push("Y"); 
    c.push("idx"); 
    p.splice(0,0,c); 
    console.timeEnd("mergeLaps"); 
    return p
}; 

lapData.prototype.prune=function(a)
{
    for(var b=0; b<this.master.idx.length; b++)
    {
        if(a.indexOf(this.master.idx[b])<0)
        {
            this.master.idx.splice(b,1); 
            this.master.points.splice(b,1); 
            this.master.data.splice(b,1); 
            b--
        }
    }
}; 

var toArrayOfObjects=function(c)
{
    var g=c.split("\n"); 
    var a=[]; 
    var i={}; 
    var e={}; 
    for(var d=0; d<g.length; d++)
    {
        var f=g[d]; 
        if(f.length==0)
        {continue}
        var j=f.split(","); 
        if(d===0)
        {
            var b=[]; 
            var h=j.length; 
            for(k=0; k<h; k++)
            {
                b.push(String(j[k]).toLowerCase())
            }
        }
        if(d>0)
        {
            var l={}; 
            for(var k=1; k<h; k++)
            {
                j[k]=parseFloat(j[k]); 
                if(isNaN(j[k]))
                {
                    j[k]=null
                }
                l[b[k]]=j[k]
            }
            if(!i[j[0]])
            {
                i[j[0]]=new arrayOfObjects; 
                e[j[0]]=0
            }
            l.index=e[j[0]]++; 
            i[j[0]].push(l)
        }
    }
    return i
}; 

var TrackMap=function(b,a)
{
    this.minX=0; 
    this.maxX=0; 
    this.minY=0; 
    this.maxY=0; 
    this.width=b.clientWidth; 
    this.height=b.clientHeight; 
    this.canvas=document.createElement("canvas"); 
    this.dots=document.createElement("canvas"); 
    b.appendChild(this.canvas); 
    b.appendChild(this.dots); 
    this.canvas.style.position="absolute"; 
    this.canvas.width=this.width; 
    this.canvas.height=this.height; 
    this.canvas_ctx=this.canvas.getContext("2d"); 
    this.dots.style.position="absolute"; 
    this.dots.width=this.width; 
    this.dots.height=this.height; 
    this.dots_ctx=this.dots.getContext("2d"); 
    this.drawTrack(a)
}; 

TrackMap.prototype.drawTrack=function(a)
{
    var h=Array(); 
    var j=0; 
    this.coords=a.points; 
    this.minX=this.coords[0][1].longitude; 
    this.minY=this.coords[0][1].latitude; 
    this.maxX=this.coords[0][1].longitude; 
    this.maxY=this.coords[0][1].latitude; 
    for(var b=0; b<a.idx.length; b++)
    {
        h[b]=[]; 
        h[b].push(this.coords[b][1].longitude); 
        h[b].push(this.coords[b][1].latitude); 
        var c=this.coords[b].length; 
        for(var i=2; i<c; i++)
        {
            var g=this.coords[b][i].length; 
            this.minX=Math.min(this.minX,this.coords[b][i].longitude); 
            this.minY=Math.min(this.minY,this.coords[b][i].latitude); 
            this.maxX=Math.max(this.maxX,this.coords[b][i].longitude); 
            this.maxY=Math.max(this.maxY,this.coords[b][i].latitude); 
            h[b].push(this.coords[b][i].longitude); 
            h[b].push(this.coords[b][i].latitude)
        }
    }
    var e=(this.minX+this.maxX)/2; 
    var f=(this.minY+this.maxY)/2; 
    this.deltaX=this.maxX-this.minX; 
    this.deltaY=this.maxY-this.minY; 
    this.scaleX=Math.min((this.width*0.95)/this.deltaX,(this.height*0.95)/this.deltaY); 
    this.canvas_ctx.setTransform(1,0,0,1,0,0); 
    this.dots_ctx.setTransform(1,0,0,1,0,0); 
    this.canvas_ctx.clearRect(0,0,this.width,this.height); 
    this.canvas_ctx.translate(0,this.height); 
    this.canvas_ctx.scale(1,-1); 
    this.dots_ctx.translate(0,this.height); 
    this.dots_ctx.scale(1,-1); 
    var d=prefs.trackMap.strokeWidth; 
    for(var b=0; b<h.length; b++)
    {
        drawLine(this,this.coords[b],d,"white")
    }
}; 

TrackMap.prototype.drawDots=function(e)
{
    var b=this.maxX-this.minX; 
    var c=this.maxY-this.minY; 
    var j=this.minX-(b*0.1); 
    var k=this.minY-(c*0.1); 
    this.dots_ctx.clearRect(0,0,this.height,this.width); 
    var a=this.dots_ctx; 
    for(var g=0; g<e.length; g++)
    {
        var d=e[g]; 
        var h=prefs.trackMap.dotSize; 
        var f=h/this.scaleX; 
        if(d)
        {
            var i=this.pntToMap(this.coords[g][d]); 
            drawPoint(a,i.longitude,i.latitude,h,"#00FF00")
        }
    }
}; 

TrackMap.prototype.pntToMap=function(d)
{
    var a={}; 
    var b=((this.height)-(this.deltaX*this.scaleX))/2; 
    var c=((this.width)-(this.deltaY*this.scaleX))/2; 
    a.longitude=((d.longitude-(+this.minX))*this.scaleX)+b; 
    a.latitude=((d.latitude-(+this.minY))*this.scaleX)+c; 
    return a
}; 

function drawLine(a,f,g,b)
{
    if(!b){b="black"}var c=a.canvas_ctx; 
    c.strokeStyle=b; 
    c.lineWidth=g; 
    c.beginPath(); 
    var e=a.pntToMap(f[0]); 
    c.moveTo(e.longitude,e.latitude); 
    for(var d=1; d<f.length; d++)
    {
        var e=a.pntToMap(f[d]); 
        c.lineTo(e.longitude,e.latitude)
    }
    c.closePath(); 
    c.stroke()
}
function hexToCanvasColor(d,e)
{
    e=e||"1.0"; 
    d=d.replace("#",""); 
    var f=parseInt(d.substring(0,2),16); 
    var c=parseInt(d.substring(2,4),16); 
    var a=parseInt(d.substring(4,6),16); 
    return"rgba("+f+","+c+","+a+","+e+")"
}
function drawPoint(b,d,e,c,a)
{
    b.save(); 
    b.beginPath(); 
    b.lineWidth=c; 
    b.fillStyle=hexToCanvasColor(a,1); 
    b.arc(d,e,c,0,2*Math.PI,false); 
    b.closePath(); 
    b.stroke(); 
    b.fill(); b.restore()
}
function advanceDot(a)
{
    dotPos=dotPos+a; 
    if(dotPos>=trk1.coords.length)
    {dotPos=1}
    trk1.drawDots([dotPos])
}; 
(function(r,s,t){function x(b,f){var g=s.createElement(b||"div"),h; 
    for(h in f)
    {
        g[h]=f[h]
    }
    return g
}
function y(d)
{
    for(var e=1,f=arguments.length; e<f; e++)
    {
        d.appendChild(arguments[e])
    }
    return d
}
function A(e,f,i,m)
{
    var n=["opacity",f,~~(e*100),i,m].join("-"),
        o=0.01+i/m*100,
        p=Math.max(1-(1-e)/f*(100-o),e),
        q=w.substring(0,w.indexOf("Animation")).toLowerCase(),I=q&&"-"+q+"-"||""; 
        return v[n]||(z.insertRule("@"+I+"keyframes "+n+"{0%{opacity:"+p+"}"+o+"%{opacity:"+e+"}"+(o+0.01)+"%{opacity:1}"+(o+f)%100+"%{opacity:"+e+"}100%{opacity:"+p+"}}",0),
        v[n]=1),n
    }
    function B(c,d)
    {
        var h=c.style,i,j; 
        if(h[d]!==t)
        {return d}
        d=d.charAt(0).toUpperCase()+d.slice(1); 
        for(j=0; j<u.length; j++)
        {
            i=u[j]+d; 
            if(h[i]!==t)
            {return i}
        }
    }
    function C(d,e)
    {
        for(var f in e)
        {
            d.style[B(d,f)||f]=e[f]
        }
        return d
    }
    function D(c)
    {
        for(var f=1; f<arguments.length; f++)
        {
            var g=arguments[f]; 
            for(var h in g)
            {
                c[h]===t&&(c[h]=g[h])
            }
        }
        return c
    }
    function E(c)
    {
        var d={x:c.offsetLeft,y:c.offsetTop}; 
        while(c=c.offsetParent)
        {
            d.x+=c.offsetLeft,d.y+=c.offsetTop
        }
        return d
    }
    var u=["webkit","Moz","ms","O"],v={},w,z=function()
    {
        var b=x("style"); 
        return y(s.getElementsByTagName("head")[0],b),b.sheet||b.styleSheet
    }(),
    F={lines:12,length:7,width:5,radius:10,rotate:0,color:"#000",speed:1,trail:100,opacity:0.25,fps:20,zIndex:2000000000,className:"spinner",top:"auto",left:"auto"},
    G=function H(b)
    {
        if(!this.spin)
        {
            return new H(b)
        }
        this.opts=D(b||{},
        H.defaults,F)
    }; 
    G.defaults={},
    D(G.prototype,
    {
        spin:function(f)
        {
            this.stop(); 
            var g=this,l=g.opts,n=g.el=C(x(0,{className:l.className}),{position:"relative",zIndex:l.zIndex}),
            I=l.radius+l.length+l.width,J,K; 
            f&&(f.insertBefore(n,f.firstChild||null),
            K=E(f),J=E(n),C(n,{left:(l.left=="auto"?K.x-J.x+(f.offsetWidth>>1):l.left+I)+"px",top:(l.top=="auto"?K.y-J.y+(f.offsetHeight>>1):l.top+I)+"px"})),
            n.setAttribute("aria-role","progressbar"),g.lines(n,g.opts); 
            if(!w)
            {
                var L=0,M=l.fps,N=M/l.speed,O=(1-l.opacity)/(N*l.trail/100),P=N/l.lines; 
                !function Q()
                {
                    L++; 
                    for(var b=l.lines; b; b--)
                    {
                        var c=Math.max(1-(L+b*P)%N*O,l.opacity); 
                        g.opacity(n,l.lines-b,c,l)
                    }
                    g.timeout=g.el&&setTimeout(Q,~~(1000/M))
                }()
            }
            return g
        },
        stop:function()
        {
            var b=this.el; 
            return b&&(clearTimeout(this.timeout),b.parentNode&&b.parentNode.removeChild(b),this.el=t),this
        },
        lines:function(f,g)
        {
            function j(b,c)
            {
                return C(x(),{position:"absolute",width:g.length+g.width+"px",height:g.width+"px",background:b,boxShadow:c,transformOrigin:"left",transform:"rotate("+~~(360/g.lines*h+g.rotate)+"deg) translate("+g.radius+"px,0)",borderRadius:(g.width>>1)+"px"})
            }
            var h=0,i; 
            for(; h<g.lines; h++)
            {
                i=C(x(),{position:"absolute",top:1+~(g.width/2)+"px",transform:g.hwaccel?"translate3d(0,0,0)":"",opacity:g.opacity,animation:w&&A(g.opacity,g.trail,h,g.lines)+" "+1/g.speed+"s linear infinite"}),g.shadow&&y(i,C(j("#000","0 0 4px #000"),{top:"2px"})),y(f,y(i,j(g.color,"0 0 1px rgba(0,0,0,.1)")))}return f},opacity:function(d,e,f){e<d.childNodes.length&&(d.childNodes[e].style.opacity=f)}}),!function(){function c(e,f){return x("<"+e+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',f)}var d=C(x("group"),{behavior:"url(#default#VML)"}); 
                !B(d,"transform")&&d.adj?(z.addRule(".spin-vml","behavior:url(#default#VML)"),G.prototype.lines=function(a,h)
                {
                    function n()
                    {
                        return C(c("group",{coordsize:m+" "+m,coordorigin:-l+" "+-l
                    }),
                    {width:m,height:m})
                }
                function I(f,i,j)
                {
                    y(p,y(C(n(),
                    {
                        rotation:360/h.lines*f+"deg",left:~~i
                    }),
                    y(C(c("roundrect",{arcsize:1}),{width:l,height:h.width,left:h.radius,top:-h.width>>1,filter:j}),
                    c("fill",{color:h.color,opacity:h.opacity}),
                    c("stroke",{opacity:0}))))
                }
                var l=h.length+h.width,m=2*l,o=-(h.width+h.length)*2+"px",p=C(n(),{position:"absolute",top:o,left:o}),q; 
                if(h.shadow)
                {
                    for(q=1; q<=h.lines; q++)
                    {
                        I(q,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)")
                    }
                }
                for(q=1; q<=h.lines; q++)
                {
                    I(q)}return y(a,p)
                },
                G.prototype.opacity=function(f,g,h,i)
                {
                    var j=f.firstChild; 
                    i=i.shadow&&i.lines||0,j&&g+i<j.childNodes.length&&(j=j.childNodes[g+i],j=j&&j.firstChild,j=j&&j.firstChild,j&&(j.opacity=h))
                }):w=B(d,"animation")
            }(),
            r.Spinner=G
        })(window,document); 
        var updateGraph=function()
        {
            if(!g2)
            {
                drawGraph()
            }
            populateGraphPosition(); 
            autoFillChannelSettings(); 
            var a=getSelectedItem("data"); 
            var c="distance"; 
            a.splice(0,0,c); 
            a.splice(1,0,"velocity"); 
            var j=laps.mergeLaps(a); 
            var e=j[0]; 
            var j=j.slice(1); 
            var h=[]; 
            var d=[]; 
            for(var f=0; f<e.indexOf("X"); f++)
            {
                h.push(f); 
                d.push(e[f])
            }
            var g=e.length-1; 
            h.push(g); 
            d.push(e[g]); 
            var k=arrColumns(j,[e.indexOf("X"),e.indexOf("Y")]); 
            var b=arrColumns(j,h); 
            var l=["latitude","longitude"]; 
            trk1.drawTrack(laps.master); 
            var m=[]; 
            for(var f=0; f<d.length; f++)
            {
                if(f<d.length-2)
                {
                    m.push(1)
                }
                else
                {
                    m.push(0)
                }
            }
            initLegend(); 
            g2.updateOptions({
                file:b,labels:d,strokeWidth:prefs.graph.strokeWidth,highlightCircleSize:prefs.graph.dotSize,visibility:m,highlightCallback:function(o,v,s,t){var w=g2.toDataXCoord(t); t+=g2.getLeftBoundary_(); var u=-1; var n=[]; drawLegend(s); for(var q=0; q<s.length; q++){var r=s[q].name.split(" "); if(r[1]==="velocity"&&!(isNaN(s[q].y))){}
            }
            if(g2.file_[t][1]!==null)
            {
                n[0]=g2.file_[t][g2.file_[t].length-1]
            }
            else
            {
                for(var p=t; p<g2.file_.length; p++)
                {
                    if(g2.file_[p][1]!==null)
                    {
                        n[0]=g2.file_[p][g2.file_[p].length-1]; 
                        break
                    }
                }
            }
            trk1.drawDots(n)
        }
    })
}; 

var xline; 
var drawGraph=function()
{
    trk1=new TrackMap(trackDiv,laps.master); 
    g2=new Dygraph(div,
        [[0,0,0],[1,1,1]],
        {
            labels:["nolap","nolap","nolap"],
            showLabelsOnHighlight:false,
            interpolatePoints:true,
            connectSeparatedPoints:true,
            highlightOnHover:false,
            hideOverlayOnMouseOut:false,
            showRangeSelector:true,
            rangeSelectorHeight:30,
            rangeSelectorPlotStrokeColor:"white",
            rangeSelectorPlotFillColor:null,
            showVerticalCrosshair:true,
            crosshairColor:"red",
            drawXAxis:false,
            drawYAxis:false,
            interactionModel:{mousedown:downV4,mousemove:moveV4,mouseup:upV4,},
            axes:{x:{valueFormatter:function(a){return"Distance: "+a.toFixed(2)+" Units"}},y:{valueFormatter:function(e,b,c){var a=c.split(" "); var d=e; if(prefs.layout[a[1]]){d=prefs.layout[a[1]].graphToValue(e)}return" "+parseFloat(d).toFixed(2)}}}})}; 
function drawLegend(e)
{
    var d=e.length; 
    for(var b=0; b<d; b++)
    {
        var a=document.getElementById(e[b].name); 
        if(a)
        {
            var c=e[b].name.split(" "); 
            a.innerHTML=Number(prefs.layout[c[1]].graphToValue(e[b].yval)).toFixed(2)
        }
    }
}
function initLegend()
{
    var g=document.getElementById("legendTable"); 
    var e=getSelectedItem("lap"); 
    var d=getSelectedItem("data"); 
    d.splice(0,0,"distance"); 
    d.splice(1,0,"velocity"); 
    g.innerHTML=""; 
    var j=g.createTHead(); 
    var f=j.insertRow(-1); 
    f.insertCell(-1); 
    for(var b=0; b<e.length; b++)
    {
        var c=f.insertCell(-1); 
        c.innerHTML="Lap "+e[b]
    }
    var h=document.createElement("tbody"); 
    g.appendChild(h); 
    for(var a=0; a<d.length; a++)
    {
        var f=h.insertRow(-1); 
        var c=f.insertCell(-1); 
        c.innerHTML=prefs.layout[d[a]].name; 
        for(var b=0; b<e.length; b++)
        {
            var c=f.insertCell(-1); 
            c.id=e[b]+" "+d[a]
        }
    }
}
var v4Active=false; 
var v4Canvas=null; 
function downV4(b,c,a)
{
    a.initializeMouseDown(b,c,a); 
    v4Active=true; 
    moveV4(b,c,a)
}
function moveV4(d,e,c)
{
    if(v4Active)
    {
        var h=e.layout_.points; 
        if(h===undefined)
        {return}
        var b=Dygraph.pageX(d)-Dygraph.findPosX(e.graphDiv); 
        var j=false; 
        var f=e.findClosestRow(b); 
        j=e.setSelection(f); 
        var a=e.attr_("highlightCallback"); 
        if(a&&j)
        {
            a(d,e.lastx_,e.selPoints_,e.lastRow_,e.highlightSet_)
        }
    }
}
function upV4(b,c,a)
{
    if(v4Active)
    {
        v4Active=false
    }
}
function dblClickV4(b,c,a)
{
    restorePositioning(c)
}
var arrColumns=function(c,b)
{
    var a=[]; 
    var e=[]; 
    for(var f=0; f<c.length; f++)
    {
        e=[]; 
        for(var d=0; d<b.length; d++)
        {
            e.push(c[f][b[d]])
        }
        a.push(e)
    }
    return a
}; 
function mySorting(c,d)
{
    c=c[0]; 
    d=d[0]; 
    return c==d?0:(c<d?-1:1)
}
function sortByY(c,d)
{
    c=c[3]; 
    d=d[3]; 
    return c==d?0:(c<d?-1:1)
}
var toArray=function(b)
{
    var e=b.split("\n"); 
    var a=[]; 
    for(var c=0; c<e.length; c++)
    {
        var d=e[c]; 
        if(d.length==0)
        {
            continue
        }
        var f=d.split(","); 
        if(c>0)
        {
            for(var g=0; g<f.length; g++)
            {
                f[g]=parseFloat(f[g]); 
                if(isNaN(f[g]))
                {
                    f[g]=null
                }
            }
        }
        a.push(f)
    }
    return a
}; 
var toArray2=function(b)
{
    var e=b.split("\n"); 
    var a=[]; 
    for(var c=0; c<e.length; c++)
    {
        var d=e[c]; 
        if(d.length==0)
        {
            continue
        }
        var f=d.split(","); 
        a.push(f)
    }
    return a
}; 
function getPage(b,a)
{
    var c=new XMLHttpRequest(); 
    c.onreadystatechange=function()
    {
        if(c.readyState==4)
        {
            if(c.status===200||c.status===0)
            {
                var d=c.responseText; 
                a(d)
            }
        }
    }; 
    c.open("GET",b,true); 
    c.send(null)
}
function popRaces()
{
    var a=new XMLHttpRequest(); 
    a.onreadystatechange=function()
    {
        if(a.readyState==4)
        {
            if(a.status===200||a.status===0)
            {
                var b=a.responseText; 
                popRaces_cb(b)
            }
        }
    }; 
    a.open("GET","getdata?table=races",true); 
    a.send(null)
}
function popRaces_cb(a)
{
    var c=toArray2(a); 
    var d=document.getElementById("race"); 
    d.options.length=0; 
    d.options[d.options.length]=new Option("Choose One",-1); 
    for(var b=1; b<c.length; b++)
    {
        d.options[d.options.length]=new Option(c[b][1]+" - "+c[b][2]+" - "+c[b][3]+" laps",c[b][0])
    }
}
function popLaps()
{
    var b=document.getElementById("race"); 
    var a=b.options[b.selectedIndex].value; 
    var c=new XMLHttpRequest(); 
    c.onreadystatechange=function()
    {
        if(c.readyState==4)
        {
            if(c.status===200||c.status===0)
            {
                var d=c.responseText; 
                popLapsCallback(d)
            }
        }
    }; 
    c.open("GET","getlaps.php?action=getLaps&raceId="+a,true); 
    c.send(null)
}
function popLapsCallback(a)
{
    var e=toArray(a); 
    var f=document.getElementById("lap"); 
    var b=e[0][0]; 
    var c=0; 
    var g=e[(e.length-1)][0]; 
    for(var d=0; d<e.length; d++)
    {
        if(e[d][2]<e[c][2])
        {
            c=d; 
            b=e[c][0]
        }
    }
    f.options.length=0; 
    f.options[f.options.length]=new Option("FASTEST LAP",b); 
    f.options[f.options.length]=new Option("LAST LAP",g); 
    f.options[0].selected=true; 
    f.options[1].selected=true; 
    for(var d=0; d<e.length; d++)
    {
        f.options[f.options.length]=new Option(e[d][1]+" - "+sec2min(e[d][2]),e[d][0])
    }
    if(!g1)
    {graphUpdate()}
}
function popData()
{
    var b=document.getElementById("lap"); 
    var a=b.options[b.selectedIndex].value; 
    getPage("getdata?table=channels&parentId="+a,popData_cb)
}
function popData_cb(c)
{
    var a=toArray2(c); 
    a=a.slice(1); 
    var d=document.getElementById("data"); 
    var b=document.getElementById("channeltable"); 
    d.options.length=0; 
    for(var e=0; e<a.length; e++)
    {
        d.options[d.options.length]=new Option(a[e][1],a[e][0]); 
        addChannel(b,a[e][1],a[e][0])
    }
}
function addChannel(h,e,d)
{
    if(!prefs.layout.hasOwnProperty(d))
    {
        prefs.layout[d]=new dataLayout(e,0,1); 
        prefs.layout[d].enabled=true
    }
    if(!prefs.layout[d].tRow)
    {
        var j=h.tBodies[0].insertRow(-1); 
        prefs.layout[d].tRow=j; 
        j.id=d; 
        var a=j.insertCell(-1); 
        var c=document.createElement("input"); 
        c.type="checkbox"; 
        c.id=d+" enabled"; 
        c.checked=prefs.layout[d].enabled; 
        c.onchange=settingChanged; 
        a.appendChild(c); 
        var b=["position","size","vMin","vMax","name"]; 
        for(var f=0; f<b.length; f++)
        {
            var g=b[f]; 
            var a=j.insertCell(-1); 
            a.contentEditable=true; 
            a.onblur=settingChanged; 
            a.id=d+" "+g; 
            a.innerHTML=prefs.layout[d][g]
        }
    }
}
function settingChanged()
{
    var b=this.id.split(" "); 
    var a=b[0]; 
    var d=b[1]; 
    if(this.type=="checkbox")
    {
        var e=this.checked
    }
    else
    {
        if(d=="name")
        {
            var e=this.innerHTML
        }
        else
        {
            var e=parseFloat(this.innerHTML); 
            var c=prefs.layout[a][d]
        }
    }
    if(!isNaN(e)||d=="name")
    {
        prefs.layout[a][d]=e
    }
}
function autoFillChannelSettings()
{
    var a=laps.master.data; 
    var e={}; 
    for(var f=0; f<2; f++)
    {
        for(var d=0; d<a.length; d++)
        {
            var b=a[d].length; 
            for(var c=0; c<b; c++)
            {
                for(key in prefs.layout)
                {
                    if(prefs.layout.hasOwnProperty(key))
                    {
                        if(a[d][c].hasOwnProperty(key)&&prefs.layout[key].enabled)
                        {
                            if(!e.hasOwnProperty(key))
                            {
                                e[key]={}; 
                                e[key].vMin=a[d][c][key]; 
                                e[key].vMax=a[d][c][key]
                            }
                            e[key].vMin=Math.min(a[d][c][key],e[key].vMin); 
                            e[key].vMax=Math.max(a[d][c][key],e[key].vMax); 
                            prefs.layout[key].vMin=e[key].vMin.toFixed(3); 
                            prefs.layout[key].vMax=e[key].vMax.toFixed(3); 
                            if(prefs.layout[key].vMin==prefs.layout[key].vMax)
                            {
                                prefs.layout[key].vMax+=1
                            }
                        }
                    }
                }
            }
        }
        a=laps.master.points
    }
    for(key in prefs.layout)
    {
        if(prefs.layout.hasOwnProperty(key))
        {
            document.getElementById(key+" vMin").innerHTML=prefs.layout[key].vMin; 
            document.getElementById(key+" vMax").innerHTML=prefs.layout[key].vMax
        }
    }
}
function graphUpdate()
{
    var d=document.getElementById("lap"); 
    var e=d.length; 
    var b=[]; 
    var c=""; 
    for(var a=0; a<e; a++)
    {
        if(d[a].selected)
        {
            var f=d[a].value; 
            b.push(f); 
            c=c+","+f
        }
    }
    laps.prune(b); 
    for(var a=0; a<b.length; a++)
    {
        if(laps.master.idx.indexOf(b[a])<0)
        {
            laps.getLap(b[a])
        }
    }
    popData()
}
function dataUpdate()
{
    var b=getSelectedItem("data"); 
    var d=getSelectedItem("lap"); 
    var a=""; 
    if(b[0])
    {
        a=b[0]
    }
    for(var c=1; c<b.length; c++)
    {
        a=a+","+b[c]
    }
    for(var c=0; c<d.length; c++)
    {
        laps.getData(d[c],a)
    }
}
function graphUpdate_old()
{
    var b=document.getElementById("lap"); 
    var c=b.length; 
    var a=0; 
    var e=0; 
    for(i=0; i<c&&(a==0||e==0); i++)
    {
        if(b[i].selected)
        {
            var a=b[i].value; 
            for(i++; i<c&&(a==0||e==0); i++)
            {
                if(b[i].selected)
                {
                    var e=b[i].value
                }
            }
        }
    }
    if(!e)
    {e=a}
    var d=0; 
    var f=new XMLHttpRequest(); 
    f.onreadystatechange=function()
    {
        if(f.readyState==4)
        {
            if(f.status===200||f.status===0)
            {
                var g=f.responseText; 
                updateGraph(g)
            }
        }
    }; 
    f.open("GET","lapdistance.php?lap="+a+"&refLap="+e+"&race="+d+"&allCols=1",true); 
    f.send(null)
}
function getSelectedItem(a)
{
    var b=document.getElementById(a); 
    len=b.length; 
    i=0; 
    chosen=[]; 
    for(i=0; i<len; i++)
    {
        if(b[i].selected)
        {
            chosen.push(b[i].value)
        }
    }
    return chosen
}
function sec2min(c)
{
    var a=Math.floor(c/60); 
    var b=c%60; 
    return a+":"+b.toFixed(3)
}
function createCookie(d,e,b)
{
    if(b)
    {
        var a=new Date(); a.setTime(a.getTime()+(b*24*60*60*1000)); var c=";  expires="+a.toGMTString()
        }
    else
    {
    var c=""
}
document.cookie=d+"="+e+c+";  path=/"
}
function readCookie(e)
{
    var f=e+"="; var b=document.cookie.split("; "); 
    for(var d=0; d<b.length; d++)
    {
        var a=b[d]; 
        while(a.charAt(0)==" ")
        {
            a=a.substring(1,a.length)
        }
        if(a.indexOf(f)==0)
        {
            return a.substring(f.length,a.length)
        }
    }
    return null
}
function eraseCookie(a)
{
    createCookie(a,"",-1)
}
function init()
{
    var a=document.getElementById("channeltable"); 
    for(key in prefs.layout)
    {
        if(prefs.layout.hasOwnProperty(key))
        {
            addChannel(a,prefs.layout[key].name,key)
        }
    }
    var b={lines:13,length:7,width:4,radius:10,corners:1,rotate:0,color:"#fff",speed:1,trail:60,shadow:false,hwaccel:false,className:"spinner",zIndex:9000,top:"auto",left:"auto"}; 
    var c=document.getElementById("renderArea"); 
    spinner=new Spinner(b); 
    toggle2("datamenuframe","datamenutab")
}; 